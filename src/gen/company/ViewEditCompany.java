/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gen.company;

import gen.database.connection.DatabaseConnection1;
import gen.mainclass.MainClass;
import gen.mainclass.TempClassForImage;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.beans.PropertyVetoException;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author pc5
 */
public class ViewEditCompany extends javax.swing.JInternalFrame {

    /**
     * Creates new form ViewEditCompany
     */
    final String dir = System.getProperty("user.dir");
    // Image img = new ImageIcon(getClass().getResource("/images/Symbol.jpg")).getImage();
    byte[] b1;
    String name, name1;
    ResultSet rs;
    private String path = null;
    private String source = null;
    static int control = 0;

    public ViewEditCompany() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtCName = new javax.swing.JTextField();
        txtCAlias = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtCAddress = new javax.swing.JTextArea();
        txtCContact = new javax.swing.JTextField();
        txtCEmailId = new javax.swing.JTextField();
        txtCITN = new javax.swing.JTextField();
        txtCSTN = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtCDeclaration = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtCTagLine = new javax.swing.JTextArea();
        btnCompanyEdit = new javax.swing.JButton();
        btnCompanySave = new javax.swing.JButton();
        btnCompanyExit = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtCTermsConditions = new javax.swing.JTextArea();
        txtCGod = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        txtCSignature = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtCstNewNumber = new javax.swing.JTextField();
        LogoPanelView = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtLBTNumber = new javax.swing.JTextField();

        setClosable(true);
        setTitle(org.openide.util.NbBundle.getMessage(ViewEditCompany.class, "ViewEditCompany.title")); // NOI18N
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Symbol.png"))); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameDeactivated(evt);
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ViewEditCompany.class, "ViewEditCompany.jLabel1.text")); // NOI18N

        jLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ViewEditCompany.class, "ViewEditCompany.jLabel2.text")); // NOI18N

        jLabel3.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(ViewEditCompany.class, "ViewEditCompany.jLabel3.text")); // NOI18N

        jLabel4.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(ViewEditCompany.class, "ViewEditCompany.jLabel4.text")); // NOI18N

        jLabel5.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(ViewEditCompany.class, "ViewEditCompany.jLabel5.text")); // NOI18N

        jLabel6.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(ViewEditCompany.class, "ViewEditCompany.jLabel6.text")); // NOI18N

        jLabel7.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(ViewEditCompany.class, "ViewEditCompany.jLabel7.text")); // NOI18N

        jLabel8.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(ViewEditCompany.class, "ViewEditCompany.jLabel8.text")); // NOI18N

        jLabel9.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel9, org.openide.util.NbBundle.getMessage(ViewEditCompany.class, "ViewEditCompany.jLabel9.text")); // NOI18N

        txtCName.setText(org.openide.util.NbBundle.getMessage(ViewEditCompany.class, "ViewEditCompany.txtCName.text")); // NOI18N
        txtCName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCNameFocusGained(evt);
            }
        });
        txtCName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCNameKeyPressed(evt);
            }
        });

        txtCAlias.setText(org.openide.util.NbBundle.getMessage(ViewEditCompany.class, "ViewEditCompany.txtCAlias.text")); // NOI18N
        txtCAlias.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCAliasFocusGained(evt);
            }
        });
        txtCAlias.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCAliasKeyPressed(evt);
            }
        });

        txtCAddress.setColumns(20);
        txtCAddress.setRows(5);
        txtCAddress.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCAddressFocusGained(evt);
            }
        });
        txtCAddress.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCAddressKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(txtCAddress);

        txtCContact.setText(org.openide.util.NbBundle.getMessage(ViewEditCompany.class, "ViewEditCompany.txtCContact.text")); // NOI18N
        txtCContact.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCContactKeyPressed(evt);
            }
        });

        txtCEmailId.setText(org.openide.util.NbBundle.getMessage(ViewEditCompany.class, "ViewEditCompany.txtCEmailId.text")); // NOI18N
        txtCEmailId.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCEmailIdFocusGained(evt);
            }
        });
        txtCEmailId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCEmailIdKeyPressed(evt);
            }
        });

        txtCITN.setText(org.openide.util.NbBundle.getMessage(ViewEditCompany.class, "ViewEditCompany.txtCITN.text")); // NOI18N
        txtCITN.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCITNKeyPressed(evt);
            }
        });

        txtCSTN.setText(org.openide.util.NbBundle.getMessage(ViewEditCompany.class, "ViewEditCompany.txtCSTN.text")); // NOI18N
        txtCSTN.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCSTNKeyPressed(evt);
            }
        });

        txtCDeclaration.setColumns(20);
        txtCDeclaration.setRows(5);
        txtCDeclaration.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCDeclarationFocusGained(evt);
            }
        });
        txtCDeclaration.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCDeclarationKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(txtCDeclaration);

        txtCTagLine.setColumns(20);
        txtCTagLine.setRows(5);
        txtCTagLine.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCTagLineFocusGained(evt);
            }
        });
        txtCTagLine.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCTagLineKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(txtCTagLine);

        org.openide.awt.Mnemonics.setLocalizedText(btnCompanyEdit, org.openide.util.NbBundle.getMessage(ViewEditCompany.class, "ViewEditCompany.btnCompanyEdit.text")); // NOI18N
        btnCompanyEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompanyEditActionPerformed(evt);
            }
        });
        btnCompanyEdit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnCompanyEditKeyPressed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnCompanySave, org.openide.util.NbBundle.getMessage(ViewEditCompany.class, "ViewEditCompany.btnCompanySave.text")); // NOI18N
        btnCompanySave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompanySaveActionPerformed(evt);
            }
        });
        btnCompanySave.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnCompanySaveKeyPressed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnCompanyExit, org.openide.util.NbBundle.getMessage(ViewEditCompany.class, "ViewEditCompany.btnCompanyExit.text")); // NOI18N
        btnCompanyExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompanyExitActionPerformed(evt);
            }
        });
        btnCompanyExit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnCompanyExitKeyPressed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel10, org.openide.util.NbBundle.getMessage(ViewEditCompany.class, "ViewEditCompany.jLabel10.text")); // NOI18N

        txtCTermsConditions.setColumns(20);
        txtCTermsConditions.setRows(5);
        txtCTermsConditions.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCTermsConditionsFocusGained(evt);
            }
        });
        txtCTermsConditions.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCTermsConditionsKeyPressed(evt);
            }
        });
        jScrollPane4.setViewportView(txtCTermsConditions);

        txtCGod.setText(org.openide.util.NbBundle.getMessage(ViewEditCompany.class, "ViewEditCompany.txtCGod.text")); // NOI18N
        txtCGod.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCGodKeyPressed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(ViewEditCompany.class, "ViewEditCompany.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel11, org.openide.util.NbBundle.getMessage(ViewEditCompany.class, "ViewEditCompany.jLabel11.text")); // NOI18N

        txtCSignature.setText(org.openide.util.NbBundle.getMessage(ViewEditCompany.class, "ViewEditCompany.txtCSignature.text")); // NOI18N
        txtCSignature.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCSignatureFocusGained(evt);
            }
        });
        txtCSignature.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCSignatureKeyPressed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel12, org.openide.util.NbBundle.getMessage(ViewEditCompany.class, "ViewEditCompany.jLabel12.text")); // NOI18N

        txtCstNewNumber.setText(org.openide.util.NbBundle.getMessage(ViewEditCompany.class, "ViewEditCompany.txtCstNewNumber.text")); // NOI18N
        txtCstNewNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCstNewNumberKeyPressed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(LogoPanelView, org.openide.util.NbBundle.getMessage(ViewEditCompany.class, "ViewEditCompany.LogoPanelView.text")); // NOI18N

        jLabel13.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel13, org.openide.util.NbBundle.getMessage(ViewEditCompany.class, "ViewEditCompany.jLabel13.text")); // NOI18N

        txtLBTNumber.setText(org.openide.util.NbBundle.getMessage(ViewEditCompany.class, "ViewEditCompany.txtLBTNumber.text")); // NOI18N
        txtLBTNumber.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtLBTNumberFocusGained(evt);
            }
        });
        txtLBTNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtLBTNumberKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(196, 196, 196)
                .addComponent(btnCompanyEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(btnCompanySave, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(btnCompanyExit, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(83, 83, 83)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel8)
                                .addComponent(jLabel5)
                                .addComponent(jLabel4)
                                .addComponent(jLabel3)
                                .addComponent(jLabel10)
                                .addComponent(jLabel6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel13)
                                        .addComponent(jLabel12)))))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                                .addComponent(LogoPanelView, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(txtCGod, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtLBTNumber, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCstNewNumber, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCITN, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCAlias, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCName)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCContact, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCEmailId, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCSTN)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(txtCSignature, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(120, 120, 120))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtCGod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtCName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(txtCAlias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(LogoPanelView, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtCContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCEmailId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(txtCITN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtCSTN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(txtCstNewNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(txtLBTNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCSignature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCompanyEdit)
                            .addComponent(btnCompanySave)
                            .addComponent(btnCompanyExit)))
                    .addComponent(jLabel10))
                .addContainerGap(60, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCompanyEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompanyEditActionPerformed
        txtCName.requestFocus();
        txtCAddress.setEnabled(true);
        txtCAddress.setEditable(true);
        txtCAlias.setEnabled(true);
        txtCAlias.setEditable(true);
        txtCContact.setEnabled(true);
        txtCContact.setEditable(true);
        txtCDeclaration.setEnabled(true);
        txtCDeclaration.setEditable(true);
        txtCEmailId.setEnabled(true);
        txtCEmailId.setEditable(true);
        txtCITN.setEnabled(true);
        txtCITN.setEditable(true);
        txtCName.setEnabled(true);
        txtCName.setEditable(true);
        txtCSTN.setEnabled(true);
        txtCSTN.setEditable(true);
        txtCTagLine.setEnabled(true);
        txtCTagLine.setEditable(true);
        txtCTermsConditions.setEnabled(true);
        txtCTermsConditions.setEditable(true);
        txtCGod.setEnabled(true);
        txtCGod.setEditable(true);
        txtCSignature.setEnabled(true);
        txtCSignature.setEditable(true);
        txtCstNewNumber.setEnabled(true);
        txtCstNewNumber.setEditable(true);
        txtLBTNumber.setEnabled(true);
        txtLBTNumber.setEditable(true);
        //txtCName.requestFocus();
    }//GEN-LAST:event_btnCompanyEditActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
//   BufferedInputStream is = null;

        control = 0;
        Connection con = DatabaseConnection1.GetConnection();
        try {
//        final String dir=System.getProperty("user.dir");
//        
//     Statement st = con.createStatement();
// 
//   File imgfile = new File(dir+"/images/printer.jpg");
//   //give the path to the file if the file
//   // is not in the same folder as the source file
// 
//   FileInputStream fin = new FileInputStream(imgfile);
// 
//   PreparedStatement pre = con.prepareStatement("insert into registration values(?)");
// 
//  
//   pre.setBinaryStream(1,fin,(int)imgfile.length());
//   pre.executeUpdate();
//   System.out.println("Successfully inserted the file into the database!");

            ResultSet rs;
            Statement stmt = con.createStatement();
            rs = stmt.executeQuery("select * from registration ");
            Image img = null;
            BufferedImage mImage1 = null;
            byte[] bytes = null;
            while (rs.next()) {
                Blob blob = rs.getBlob("image");
                InputStream in = blob.getBinaryStream();
                mImage1 = ImageIO.read(in);
                //byte[] imgdata=rs.getBytes("image");
                bytes = rs.getBytes("image");
                img = Toolkit.getDefaultToolkit().createImage(bytes);

                //  Image scaledImage=img.getScaledInstance(LogoPanelView.getWidth(), LogoPanelView.getHeight(), Image.SCALE_SMOOTH);  
                //   Image scaledImage=img.getScaledInstance(LogoPanelView.getWidth(), LogoPanelView.getHeight(), Image.SCALE_SMOOTH);
                ImageIcon icon = new ImageIcon(img);
                Image img1 = icon.getImage();
                Image newimg = img.getScaledInstance(111, 76, Image.SCALE_SMOOTH);
                ImageIcon newicon = new ImageIcon(newimg);
                LogoPanelView.setIcon(newicon);

                // lab1.setIcon(icon);
                // img = Toolkit.getDefaultToolkit().createImage(imgdata);
                // Image img1=new ImageIcon(imgdata).getImage();
                //  ImageIcon icon=new ImageIcon(img);
            }

            // img = Toolkit.getDefaultToolkit().createImage(bytes);
            //  Image scaledImage=mImage1.getScaledInstance(LogoPanelView.getWidth(), LogoPanelView.getHeight(), Image.SCALE_SMOOTH);
            //  ImageIcon scaledImageIcon=new ImageIcon(scaledImage);
            //ImageIcon icon=new ImageIcon(img);
            //Image mImage1=ImageIO.read();
            //Dimension size = new Dimension(img.getWidth(null), img.getHeight(null)); 
            //     Image image1=img.getScaledInstance(LogoPanelView.getWidth(), LogoPanelView.getHeight(), Image.SCALE_SMOOTH);

            //   Image scaledImage=mImage1.getScaledInstance(LogoPanelView.getWidth(), LogoPanelView.getHeight(), Image.SCALE_SMOOTH);  

            // LogoPanelView.setBorder(new TempClassForImage(img,LogoPanelView.getSize()));
            //    LogoPanelView.setIcon(scaledImageIcon);

            //	connection.close();
            //close the prepared statement
            // pre.close();
            //now close the connection
            con.close();
        } catch (Exception e) {
        }
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
//        FileInputStream fin = null;
//        try {
//            
//             final String dir = System.getProperty("user.dir");
//             
//             Connection conn=DatabaseConnection1.GetConnection();
//             Statement st=conn.createStatement();
//             File f1=new File(dir + "/images/Symbol.jpg");
//            fin = new FileInputStream(f1);
//             //DataInputStream dataIs = new DataInputStream(new FileInputStream(f1));
//      //       PreparedStatement pst = conn.prepareStatement("insert into registration(image) values(?)");
//             //pst.setInt(1,67);
//     //        pst.setBinaryStream(1,fin,fin.available());
//     //        pst.executeUpdate();
//             //int length=(int)f1.length();
//             byte [] b1=new byte[(int)f1.length()];
//             fin.read(b1);
//             fin.close();
//           //  st.executeUpdate("insert into registration(image) values('"+b1+"')");
//             System.out.println("Quesry Executed Successfully");
//             FileOutputStream fout=new FileOutputStream("d://printer12.jpg");
//             
//            
//             
//             fout.write(b1);
//             fout.close();
//         //    java.awt.Image img;
//             String q="select * from registration";
//             ResultSet rs= st.executeQuery(q);
//             Image img=null;
//             while(rs.next())
//             {
//              byte[] imgdata=rs.getBytes("image");
//               img = Toolkit.getDefaultToolkit().createImage(imgdata);
//             Image img1=new ImageIcon(imgdata).getImage();
//              ImageIcon icon=new ImageIcon(img);
//              
//             }  
//           LogoPanelView.setBorder(new TempClassForImage(img,LogoPanelView.getSize()));
//         
//          
//        } catch (IOException ex) {
//            Logger.getLogger(CreateCompany.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        /*catch (FileNotFoundException ex) {
//            Logger.getLogger(CreateCompany.class.getName()).log(Level.SEVERE, null, ex);
//        }*/
//        catch (SQLException ex) {
//            Logger.getLogger(CreateCompany.class.getName()).log(Level.SEVERE, null, ex);
//        } finally {
//            try {
//                fin.close();
//            } catch (IOException ex) {
//                Logger.getLogger(CreateCompany.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
        // ResultSet rs;

        btnCompanyEdit.setMnemonic(KeyEvent.VK_D);
        btnCompanySave.setMnemonic(KeyEvent.VK_S);
        btnCompanyExit.setMnemonic(KeyEvent.VK_X);

        try {
            String q = "";
            Connection conn;
            conn = DatabaseConnection1.GetConnection();
            conn.setAutoCommit(false);
            Statement st = conn.createStatement();

            q = "select * from tblCreateCompany";
            rs = st.executeQuery(q);
            // System.out.println("CI"+rs.next());

            String value = "" + rs.next();
            //  System.out.println("CI"+rs.getInt("CompanyIndex"));

            // System.out.println(""+value);
            if (value.equals("true")) {
                String name = rs.getString("Name");
                txtCName.setText(name);
                txtCName.setEnabled(false);
                String alias = rs.getString("Alias");
                txtCAlias.setText(alias);
                txtCAlias.setEnabled(false);
                String address = rs.getString("Address");
                txtCAddress.setText(address);
                txtCAddress.setEnabled(false);
                String contact = "" + rs.getString("ContactNo");
                txtCContact.setText(contact);
                txtCContact.setEnabled(false);
                String emailid = rs.getString("EmailId");
                txtCEmailId.setText(emailid);
                txtCEmailId.setEnabled(false);
                String income = "" + rs.getString("IncomeTaxNo");
                txtCITN.setText(income);
                txtCITN.setEnabled(false);
                String sales = "" + rs.getString("SaleTaxNo");
                txtCSTN.setText(sales);
                txtCSTN.setEnabled(false);
                String declaration = rs.getString("Declaration");
                txtCDeclaration.setText(declaration);
                txtCDeclaration.setEnabled(false);
                String tagline = rs.getString("TagLine");
                txtCTagLine.setText(tagline);
                txtCTagLine.setEnabled(false);
                String termsConditions = rs.getString("TermCnditions");
                txtCTermsConditions.setText(termsConditions);
                txtCTermsConditions.setEnabled(false);
                String nameOfGod = rs.getString("NameOfGod");
                txtCGod.setText(nameOfGod);
                txtCGod.setEnabled(false);
                String signAuthority = rs.getString("SignAuthority");
                txtCSignature.setText(signAuthority);
                txtCSignature.setEnabled(false);
                String cstNewNumber = rs.getString("VatTinNo");
                txtCstNewNumber.setText(cstNewNumber);
                txtCstNewNumber.setEnabled(false);
                String LBTNumber = rs.getString("LBTNo");
                txtLBTNumber.setText(LBTNumber);
                txtLBTNumber.setEnabled(false);

            }




        } catch (Exception e) {
            System.out.println("" + e);
        }

    }//GEN-LAST:event_formInternalFrameOpened

    private void btnCompanyExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompanyExitActionPerformed
        ResultSet rs1;
        try {
            String q = "";
            Connection conn;
            conn = DatabaseConnection1.GetConnection();
            conn.setAutoCommit(false);
            Statement st1 = conn.createStatement();
            // System.out.println("CI"+rs.next());
            q = "select * from tblCreateCompany";
            rs1 = st1.executeQuery(q);
            String value = "" + rs1.next();
            //  System.out.println("CI"+rs.getInt("CompanyIndex"));

            // System.out.println(""+value);
            if (value.equals("true")) {
                this.setClosed(true);
                //  JOptionPane.showMessageDialog(this, "Thank You For Verifying Company Details,Good Day");
            } else {
                JOptionPane.showMessageDialog(this, "Attempt To Perform Illegal Action System Is Quiting");
                System.exit(0);
            }


        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnCompanyExitActionPerformed

    private void btnCompanySaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompanySaveActionPerformed
        if (txtCName.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Enter Name Of Company");
            txtCName.requestFocus();
        } else {
            txtCName.transferFocus();
            int current = 0;
            Connection conn = null;
            try {


                conn = DatabaseConnection1.GetConnection();
                conn.setAutoCommit(false);
                Statement st = conn.createStatement();

                rs = st.executeQuery("select max(CompanyIndex) As id from tblcreatecompany");
                if (rs.next()) {
                    current = rs.getInt("id");
                }
                current = current + 1;
                //String sql="update tblCreateCompany set Name='"+txtCName.getText().trim()+"',Alias='"+txtCAlias.getText().trim()+"',Address='"+txtCAddress.getText().trim()+"',ContactNo='"+txtCContact.getText().trim()+"',EmailId='"+txtCEmailId.getText().trim()+"',IncomeTaxNo='"+txtCITN.getText().trim()+"',SaleTaxNo='"+txtCSTN.getText().trim()+"',Declaration='"+txtCDeclaration.getText().trim()+"',TagLine='"+txtCTagLine.getText().trim()+"',TermCnditions='"+txtCTermsConditions.getText().trim()+"',NameOfGod='"+txtCGod.getText().trim()+"',SignAuthority='"+txtCSignature.getText().trim()+"',VatTinNo='"+txtCstNewNumber.getText().trim()+"';";   
                String sql = "update tblCreateCompany set NameOfGod=?,Name=?,Alias=?,Address=?,ContactNo=?,EmailId=?,IncomeTaxNo=?,SaleTaxNo=?,Declaration=?,TagLine=?,TermCnditions=?,SignAuthority=?,VatTinNo=?,LBTNo=?;";
                PreparedStatement stat = conn.prepareStatement(sql);
                stat.setString(1, txtCGod.getText().trim());
                stat.setString(2, txtCName.getText().trim());
                stat.setString(3, txtCAlias.getText().trim());
                stat.setString(4, txtCAddress.getText().trim());
                stat.setString(5, txtCContact.getText().trim());
                stat.setString(6, txtCEmailId.getText().trim());
                stat.setString(7, txtCITN.getText().trim());
                stat.setString(8, txtCSTN.getText().trim());
                stat.setString(9, txtCDeclaration.getText().trim());
                stat.setString(10, txtCTagLine.getText().trim());
                stat.setString(11, txtCTermsConditions.getText().trim());
                stat.setString(12, txtCSignature.getText().trim());
                stat.setString(13, txtCstNewNumber.getText().trim());
                stat.setString(14, txtLBTNumber.getText().trim());

                stat.executeUpdate();
                System.out.println("fgsfsdfdfsdfdsfdsfsf" + sql);
                // st.executeUpdate(sql);    




                if (control == 1) {
                    BufferedImage mImage;
                    final String dir = System.getProperty("user.dir");
                    File imgfile = new File(source);
                    FileInputStream fin = new FileInputStream(imgfile);
                    PreparedStatement pre = conn.prepareStatement("insert into registration values(?)");
                    pre.setBinaryStream(1, fin, (int) imgfile.length());
                    pre.executeUpdate();
                    System.out.println("Successfully inserted the file into the database!");
                }

                JOptionPane.showMessageDialog(null, "Company Information Updated Successfully...");
                conn.commit();

            } catch (Exception e) {
                System.out.println("Exception On Save button Click : " + e);
            }

        }
        txtCAddress.setEditable(false);
        txtCAlias.setEditable(false);
        txtCContact.setEditable(false);
        txtCDeclaration.setEditable(false);
        txtCEmailId.setEditable(false);
        txtCITN.setEditable(false);
        txtCName.setEditable(false);
        txtCSTN.setEditable(false);
        txtCTagLine.setEditable(false);
        txtCTermsConditions.setEditable(false);
        txtCGod.setEditable(false);
        txtCSignature.setEditable(false);
        txtCstNewNumber.setEditable(false);
        txtLBTNumber.setEditable(false);
    }//GEN-LAST:event_btnCompanySaveActionPerformed

    private void txtCNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCNameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtCAlias.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtCGod.requestFocus();
        }
    }//GEN-LAST:event_txtCNameKeyPressed

    private void txtCAddressKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCAddressKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtCContact.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtCTagLine.requestFocus();
        }
    }//GEN-LAST:event_txtCAddressKeyPressed

    private void txtCContactKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCContactKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtCEmailId.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtCAddress.requestFocus();
        }
    }//GEN-LAST:event_txtCContactKeyPressed

    private void txtCEmailIdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCEmailIdKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtCITN.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtCContact.requestFocus();
        }
    }//GEN-LAST:event_txtCEmailIdKeyPressed

    private void txtCITNKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCITNKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtCSTN.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtCEmailId.requestFocus();
        }
    }//GEN-LAST:event_txtCITNKeyPressed

    private void txtCSTNKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCSTNKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtCstNewNumber.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtCITN.requestFocus();
        }
    }//GEN-LAST:event_txtCSTNKeyPressed

    private void txtCDeclarationKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCDeclarationKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtCTermsConditions.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtLBTNumber.requestFocus();
        }
    }//GEN-LAST:event_txtCDeclarationKeyPressed

    private void btnCompanyEditKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnCompanyEditKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnCompanyEditActionPerformed(null);
        } else if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            btnCompanySave.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtCSignature.requestFocus();
        }
    }//GEN-LAST:event_btnCompanyEditKeyPressed

    private void btnCompanySaveKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnCompanySaveKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnCompanySaveActionPerformed(null);
        } else if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            btnCompanyExit.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            btnCompanyEdit.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtCSignature.requestFocus();
        }
    }//GEN-LAST:event_btnCompanySaveKeyPressed

    private void btnCompanyExitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnCompanyExitKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnCompanyExitActionPerformed(null);
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtCSignature.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            btnCompanySave.requestFocus();
        }
    }//GEN-LAST:event_btnCompanyExitKeyPressed

    private void txtCAliasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCAliasKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtCTagLine.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtCName.requestFocus();
        }
    }//GEN-LAST:event_txtCAliasKeyPressed

    private void txtCTagLineKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCTagLineKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtCAddress.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtCAlias.requestFocus();
        }
    }//GEN-LAST:event_txtCTagLineKeyPressed

    private void txtCTermsConditionsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCTermsConditionsKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtCSignature.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtCDeclaration.requestFocus();
        }
    }//GEN-LAST:event_txtCTermsConditionsKeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        control = 1;
        int dialogButton1 = JOptionPane.YES_NO_OPTION;
        int dialogResult1 = JOptionPane.showConfirmDialog(this, "Your Current Logo Will Be Removed,Do You Want To Proceed ?", "Warning", dialogButton1);
        if (dialogResult1 == 0) {

            imageloading o = new imageloading();
            o.setVisible(true);
        } else {
            formInternalFrameActivated(null);
        }
        // path  = filechoose();
        //  JOptionPane.showMessageDialog(this, "Dear User,This Option is Temperary Out Of Service");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtCSignatureKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCSignatureKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnCompanySave.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtCTermsConditions.requestFocus();
        }
    }//GEN-LAST:event_txtCSignatureKeyPressed

    private void txtCstNewNumberKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCstNewNumberKeyPressed


        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtLBTNumber.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtCSTN.requestFocus();
        }
    }//GEN-LAST:event_txtCstNewNumberKeyPressed

    private void txtCGodKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCGodKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtCName.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            try {
                //MainClass2 m=new MainClass();
                // m.menuselection(6);
                //    JOptionPane.showMessageDialog(this, "Thank You For Verifying Details,Good Day");
                this.setClosed(true);

            } catch (Exception e) {
                System.out.println("" + e);
            }
        }
    }//GEN-LAST:event_txtCGodKeyPressed

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated

        control = 0;
        try {
            // TODO add your handling code here:
            this.setSelected(true);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(ViewEditCompany.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formInternalFrameActivated

    private void formInternalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameDeactivated
        // TODO add your handling code here:
        control = 1;
    }//GEN-LAST:event_formInternalFrameDeactivated

    private void txtCNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCNameFocusGained
        // TODO add your handling code here:
        txtCName.selectAll();
    }//GEN-LAST:event_txtCNameFocusGained

    private void txtCAliasFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCAliasFocusGained
        // TODO add your handling code here:
        txtCAlias.selectAll();
    }//GEN-LAST:event_txtCAliasFocusGained

    private void txtCTagLineFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCTagLineFocusGained
        // TODO add your handling code here:
        txtCTagLine.selectAll();
    }//GEN-LAST:event_txtCTagLineFocusGained

    private void txtCAddressFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCAddressFocusGained
        // TODO add your handling code here:
        txtCAddress.selectAll();
    }//GEN-LAST:event_txtCAddressFocusGained

    private void txtCEmailIdFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCEmailIdFocusGained
        // TODO add your handling code here:
        txtCEmailId.selectAll();
    }//GEN-LAST:event_txtCEmailIdFocusGained

    private void txtCDeclarationFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCDeclarationFocusGained
        // TODO add your handling code here:
        txtCDeclaration.selectAll();
    }//GEN-LAST:event_txtCDeclarationFocusGained

    private void txtCTermsConditionsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCTermsConditionsFocusGained
        // TODO add your handling code here:
        txtCTermsConditions.selectAll();
    }//GEN-LAST:event_txtCTermsConditionsFocusGained

    private void txtCSignatureFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCSignatureFocusGained
        // TODO add your handling code here:
        txtCSignature.selectAll();
    }//GEN-LAST:event_txtCSignatureFocusGained

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        // TODO add your handling code here:
        MainClass.setstaticvar();
    }//GEN-LAST:event_formInternalFrameClosed

    private void txtLBTNumberKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLBTNumberKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtCDeclaration.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtCstNewNumber.requestFocus();
        }
    }//GEN-LAST:event_txtLBTNumberKeyPressed

    private void txtLBTNumberFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLBTNumberFocusGained
        // TODO add your handling code here:
        txtLBTNumber.selectAll();
    }//GEN-LAST:event_txtLBTNumberFocusGained
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LogoPanelView;
    private javax.swing.JButton btnCompanyEdit;
    private javax.swing.JButton btnCompanyExit;
    private javax.swing.JButton btnCompanySave;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea txtCAddress;
    private javax.swing.JTextField txtCAlias;
    private javax.swing.JTextField txtCContact;
    private javax.swing.JTextArea txtCDeclaration;
    private javax.swing.JTextField txtCEmailId;
    private javax.swing.JTextField txtCGod;
    private javax.swing.JTextField txtCITN;
    private javax.swing.JTextField txtCName;
    private javax.swing.JTextField txtCSTN;
    private javax.swing.JTextField txtCSignature;
    private javax.swing.JTextArea txtCTagLine;
    private javax.swing.JTextArea txtCTermsConditions;
    private javax.swing.JTextField txtCstNewNumber;
    private javax.swing.JTextField txtLBTNumber;
    // End of variables declaration//GEN-END:variables

    public final class imageloading extends javax.swing.JInternalFrame {

        BufferedImage mImage;
        Image scaledImage = null;
        ImageIcon scaledImageIcon = null;
        String name, name1;

        public imageloading() {
            //JFrame frm=new JFrame("image loading test");
            source = filechoose();
            System.out.println("ViewEditCompany----->>imageloading -->>source: " + source);
            File inputFile = new File(source);
            try {
                mImage = ImageIO.read(inputFile);
            } catch (IOException ex) {
                //Logger.getLogger(index.class.getName()).log(Level.SEVERE, null, ex);
            }

            scaledImage = mImage.getScaledInstance(LogoPanelView.getWidth(), LogoPanelView.getHeight(), Image.SCALE_SMOOTH);
            scaledImageIcon = new ImageIcon(scaledImage);
            FileInputStream fin = null;
            try {

                final String dir = System.getProperty("user.dir");

                Connection conn = DatabaseConnection1.GetConnection();
                Statement st = conn.createStatement();

                //st.executeQuery("delete * from registration");

                File f1 = new File(source);//new File(dir + "/images/unnati_hinges_packing1_1.jpg");

                fin = new FileInputStream(f1);

                b1 = new byte[(int) f1.length()];
                fin.read(b1);
                fin.close();

                //  int ret = st.executeUpdate("insert into registration(image) values('"+b1+"')");
                // System.out.println("ViewEditCompany----->>imageloading -->>return: "+ ret);
            } catch (Exception e) {
                System.out.println("Exception for---->>Image--->" + e);
            }
//    int x=Integer.parseInt(""+LogoPanelView.getAlignmentX());
//    int y=Integer.parseInt(""+LogoPanelView.getAlignmentY());
//    
//    int h=mImage.getTileHeight();
//    int w=mImage.getTileWidth();

            //LogoPanelView.setBorder(new TempClassForImage(scaledImage,LogoPanelView.getSize()));
            LogoPanelView.setIcon(scaledImageIcon);
            // LogoPanelView.setBounds(x, y, w, h);
            LogoPanelView.show();


        }

        String filechoose() {
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new File("."));

            chooser.setFileFilter(new javax.swing.filechooser.FileFilter() {
                public boolean accept(File f) {
                    name = f.getName().toLowerCase();
                    return name.endsWith(".gif") || name.endsWith(".jpg")
                            || name.endsWith(".jpeg") || f.isDirectory();
                }

                public String getDescription() {
                    return "Image files";
                }
            });

            int r = chooser.showOpenDialog(this);



            if (r == JFileChooser.APPROVE_OPTION) {
                name1 = chooser.getSelectedFile().getAbsolutePath();
                StringBuffer sb = new StringBuffer();
                sb.append(name1);

                int l = sb.length();
                for (int i = 0; i < l; i++) {
                    if (sb.charAt(i) == '\\') {
                        sb.insert(i, "\\");
                        i++;
                    }
                }
            }

            return name1;
        }
    }
}
