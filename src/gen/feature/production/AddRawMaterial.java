package gen.feature.production;

import gen.database.connection.DatabaseConnection1;
import gen.mainclass.MainClass;
import java.awt.Color;
import java.awt.*;
import java.awt.Dimension;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.beans.PropertyVetoException;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

public class AddRawMaterial extends javax.swing.JInternalFrame {

    TemporaryClass t = new TemporaryClass();
    ArrayList<TemporaryClass> finisheditem = new ArrayList<TemporaryClass>();
    ArrayList<TemporaryClass> rawitem = new ArrayList<TemporaryClass>();
    static int temp = 1000;  //for storing index of selected row of table
    int i = 0, flag = 0;
    ResultSet rs1, rs2, rs3;
    String q = "", str = "";
    JTextField tf1, tf2;
    private final Vector<String> v1 = new Vector<String>();
    private final Vector<String> v2 = new Vector<String>();
    // ArrayList<String> GroupItems=new ArrayList<String>();
    //  ArrayList<String> GroupItems1=new ArrayList<String>();
    //  ArrayList<String> GroupItems2=new ArrayList<String>();

    public AddRawMaterial(String s) {
        setClosable(true);
        initComponents();
        this.setTitle(s);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelMain = new javax.swing.JPanel();
        panelRaw = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtQty = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableRaw = new javax.swing.JTable();
        btnAddRaw = new javax.swing.JButton();
        btnSubmit = new javax.swing.JButton();
        comboRaw = new javax.swing.JComboBox();
        btnBack = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        comboFinishingItem = new javax.swing.JComboBox();

        setFrameIcon(new javax.swing.ImageIcon("E:\\Sudeep\\customer Copy\\07-01-2013\\General Copy\\images\\Symbol.jpg")); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        panelRaw.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Raw Material"); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Quantity"); // NOI18N

        txtQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtQtyKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtQtyKeyTyped(evt);
            }
        });

        tableRaw.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        )
        {
            public boolean isCellEditable(int row, int col)
            {
                return false;
            }
        }

    );
    tableRaw.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            tableRawMouseClicked(evt);
        }
    });
    tableRaw.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyPressed(java.awt.event.KeyEvent evt) {
            tableRawKeyPressed(evt);
        }
    });
    jScrollPane2.setViewportView(tableRaw);

    btnAddRaw.setText("ADD"); // NOI18N
    btnAddRaw.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnAddRawActionPerformed(evt);
        }
    });

    btnSubmit.setText("Submit"); // NOI18N
    btnSubmit.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnSubmitActionPerformed(evt);
        }
    });

    comboRaw.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            comboRawFocusGained(evt);
        }
    });
    comboRaw.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyPressed(java.awt.event.KeyEvent evt) {
            comboRawKeyPressed(evt);
        }
    });

    btnBack.setText("Back"); // NOI18N
    btnBack.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnBackActionPerformed(evt);
        }
    });

    jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
    jLabel1.setText("Finishing Item"); // NOI18N

    comboFinishingItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            comboFinishingItemActionPerformed(evt);
        }
    });
    comboFinishingItem.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyPressed(java.awt.event.KeyEvent evt) {
            comboFinishingItemKeyPressed(evt);
        }
    });

    javax.swing.GroupLayout panelRawLayout = new javax.swing.GroupLayout(panelRaw);
    panelRaw.setLayout(panelRawLayout);
    panelRawLayout.setHorizontalGroup(
        panelRawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(panelRawLayout.createSequentialGroup()
            .addGroup(panelRawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelRawLayout.createSequentialGroup()
                    .addGap(128, 128, 128)
                    .addComponent(jLabel1)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(comboFinishingItem, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(panelRawLayout.createSequentialGroup()
                    .addGap(212, 212, 212)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(panelRawLayout.createSequentialGroup()
                    .addGap(53, 53, 53)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(panelRawLayout.createSequentialGroup()
                    .addGap(95, 95, 95)
                    .addGroup(panelRawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(panelRawLayout.createSequentialGroup()
                            .addComponent(comboRaw, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRawLayout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addGap(85, 85, 85)))
                    .addGroup(panelRawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelRawLayout.createSequentialGroup()
                            .addComponent(txtQty, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(35, 35, 35)
                            .addComponent(btnAddRaw))
                        .addComponent(jLabel3))))
            .addContainerGap(51, Short.MAX_VALUE))
    );
    panelRawLayout.setVerticalGroup(
        panelRawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRawLayout.createSequentialGroup()
            .addContainerGap(39, Short.MAX_VALUE)
            .addGroup(panelRawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(comboFinishingItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel1))
            .addGap(40, 40, 40)
            .addGroup(panelRawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel2)
                .addComponent(jLabel3))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(panelRawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(txtQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(comboRaw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnAddRaw))
            .addGap(18, 18, 18)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(panelRawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btnSubmit)
                .addComponent(btnBack))
            .addContainerGap())
    );

    javax.swing.GroupLayout panelMainLayout = new javax.swing.GroupLayout(panelMain);
    panelMain.setLayout(panelMainLayout);
    panelMainLayout.setHorizontalGroup(
        panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(panelMainLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(panelRaw, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
    );
    panelMainLayout.setVerticalGroup(
        panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(panelMainLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(panelRaw, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(panelMain, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(panelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboFinishingItemKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboFinishingItemKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (comboFinishingItem.getSelectedItem().equals("")) {
                comboFinishingItem.requestFocus();
            } else {
                comboRaw.requestFocus();
            }
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            btnBackActionPerformed(null);
        }
}//GEN-LAST:event_comboFinishingItemKeyPressed

    private void txtQtyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQtyKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (txtQty.getText().equals("")) {
                txtQty.requestFocus();
            } else {
                btnAddRawActionPerformed(null);
            }
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            comboRaw.requestFocus();
        }
}//GEN-LAST:event_txtQtyKeyPressed

    private void txtQtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQtyKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
}//GEN-LAST:event_txtQtyKeyTyped

    private void tableRawMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableRawMouseClicked
        if (tableRaw.getRowCount() > 0) {
            temp = tableRaw.getSelectedRow();
            comboRaw.setSelectedItem(tableRaw.getValueAt(temp, 1));
            txtQty.setText((String) tableRaw.getValueAt(temp, 2));
            btnAddRaw.setText("ALTER");
            comboRaw.requestFocus();
        }
}//GEN-LAST:event_tableRawMouseClicked

    private void tableRawKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableRawKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            i = tableRaw.getSelectedRow();
            if (tableRaw.getValueAt(i, 1) == null) {
                btnSubmitActionPerformed(null);
            } else {
                tableRawMouseClicked(null);
            }
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            comboRaw.requestFocus();
        }
}//GEN-LAST:event_tableRawKeyPressed

    private void btnAddRawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRawActionPerformed
        if (comboFinishingItem.getSelectedItem().equals("")) {
            comboFinishingItem.requestFocus();
        } else if (comboRaw.getSelectedItem().equals("")) {
            comboRaw.requestFocus();
        } else if (txtQty.equals("")) {
            txtQty.requestFocus();
        } else {
            if (temp == 1000) //Normal Addition
            {
                int row = tableRaw.getRowCount();
                DefaultTableModel tableModel = (DefaultTableModel) tableRaw.getModel();
                tableModel.setRowCount(row + 1);
                tableRaw.setValueAt(row + 1, row, 0);
                tableRaw.setValueAt(comboRaw.getSelectedItem(), row, 1);
                tableRaw.setValueAt(txtQty.getText(), row, 2);
                txtQty.setText("");
                comboRaw.requestFocus();
            } else //Editing previously entered data
            {
                tableRaw.setValueAt(comboRaw.getSelectedItem(), temp, 1);
                tableRaw.setValueAt(txtQty.getText(), temp, 2);
                txtQty.setText("");
                btnAddRaw.setText("ADD");
                comboRaw.requestFocus();
                temp = 1000;
            }
        }
}//GEN-LAST:event_btnAddRawActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        if (comboFinishingItem.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Please select Finishing Material");
            comboFinishingItem.requestFocus();
        } else if (tableRaw.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Raw Material is not selected");
            comboRaw.requestFocus();
        } else {
            long finished_item_id = 0;
            for (i = 0; i < finisheditem.size(); i++) {
                if (finisheditem.get(i).getFinish_item_name().equals(comboFinishingItem.getSelectedItem())) {
                    finished_item_id = finisheditem.get(i).getFinish_item_id();
                    //break;
                }
            }
            Connection conn = null;
            try {
                conn = DatabaseConnection1.GetConnection();
                PreparedStatement st;
                Statement st1 = conn.createStatement();
                i = 0;
                while (i < tableRaw.getRowCount()) {
                    if (tableRaw.getValueAt(i, 1) != null) {
                        long raw_item_id = 0;
                        for (int j = 0; j < rawitem.size(); j++) {
                            if (rawitem.get(j).getRaw_item_name().equals(tableRaw.getValueAt(i, 1))) {
                                raw_item_id = rawitem.get(j).getRaw_item_id();
                            }
                        }
                        q = "insert into tblProductionRawMaterial(FinishedItem,RawItem,qty,ind) values(?,?,?,?)";
                        st = conn.prepareStatement(q);
                        st.setString(1, "" + finished_item_id);
                        st.setString(2, "" + raw_item_id);
                        st.setString(3, "" + tableRaw.getValueAt(i, 2));
                        st.setString(4, "" + i);

                        st.executeUpdate();

                    }
                    i++;
                }
                int ind = comboFinishingItem.getSelectedIndex();
                comboFinishingItem.removeItemAt(ind);
                JOptionPane.showMessageDialog(this, "Raw Material is added!!");
                comboFinishingItem.setSelectedIndex(0);
                comboRaw.setSelectedIndex(0);
                txtQty.setText("");
                comboFinishingItem.requestFocus();
                DefaultTableModel tableModel = (DefaultTableModel) tableRaw.getModel();
                tableModel.setRowCount(0);
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    conn.close();
                } catch (SQLException ex) {
                    Logger.getLogger(AddRawMaterial.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
}//GEN-LAST:event_btnSubmitActionPerformed

    private void comboRawFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_comboRawFocusGained
        comboRaw.showPopup();
        DefaultTableModel tableModel = (DefaultTableModel) tableRaw.getModel();
        i = 0;
        while (i < tableRaw.getRowCount()) {
            if (tableRaw.getValueAt(i, 1) == null) {
                tableModel.setRowCount(tableRaw.getRowCount() - 1);
            }
            i++;
        }
}//GEN-LAST:event_comboRawFocusGained

    private void comboRawKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboRawKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (comboRaw.getSelectedItem().equals("")) {
                if (tableRaw.getRowCount() == 0) {
                    comboRaw.requestFocus();
                } else {
                    DefaultTableModel tableModel = (DefaultTableModel) tableRaw.getModel();
                    tableModel.setRowCount(tableRaw.getRowCount() + 1);
                    tableRaw.requestFocus();
                    tableRaw.changeSelection(0, 0, false, false);
                }

            } else {
                txtQty.requestFocus();
            }
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            comboFinishingItem.requestFocus();
        }
}//GEN-LAST:event_comboRawKeyPressed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        try {
            MainClass m = new MainClass();
            m.menuselection(5);
            this.setClosed(true);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(ProductionToday.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_btnBackActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        btnBack.setMnemonic(KeyEvent.VK_B);
        //btnOK.setMnemonic(KeyEvent.VK_O);
        btnSubmit.setMnemonic(KeyEvent.VK_S);
        btnAddRaw.setMnemonic(KeyEvent.VK_D);
        Connection conn = null;
        try {
            String col[] = {"Index", "Raw Item", "Quantity"};
            String data[][] = {{"", "", ""}};
            DefaultTableModel model = new DefaultTableModel(data, col);
            tableRaw.setModel(model);

            model.setColumnCount(3);
            JTableHeader header = tableRaw.getTableHeader();
            header.setBackground(Color.yellow);

            DefaultTableModel tableModel = (DefaultTableModel) tableRaw.getModel();
            tableModel.setRowCount(0);
            tableModel.setColumnCount(3);

            tableRaw.setRowSelectionAllowed(true);
            i = 0;
            while (i < finisheditem.size()) {
                finisheditem.remove(i);
            }
            i = 0;
            while (i < rawitem.size()) {
                rawitem.remove(i);
            }

            conn = DatabaseConnection1.GetConnection();
            Statement st = conn.createStatement();
            Statement st1 = conn.createStatement();

            long g_id = 0;    //find id of finished board group
            q = "select sg_id from tblstockgroup where sg_name='Finished Board'";
            rs1 = st.executeQuery(q);
            if (rs1.next()) {
                g_id = rs1.getLong("sg_id");
            }
            rs1.close();

            //Adding list of ledgers to Particulars
            q = "select si_id,si_name from tblstockitem where si_under=" + g_id + "";
            rs1 = st.executeQuery(q);
            i = 0;
            comboFinishingItem.removeAllItems();
            comboFinishingItem.addItem("");
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /*Code Snippet added by Sudeep on 12-01-2013 At:05.20PM*/
            /*      
            
             while (rs1.next())
             {
             TemporaryClass t1 = new TemporaryClass();
             t1.setFinish_item_id(Integer.parseInt(rs1.getString("si_id")));
             t1.setFinish_item_name(rs1.getString("si_name"));
             finisheditem.add(t1);
             q = "select FinishedItem from tblproductionrawmaterial where FinishedItem="+ Integer.parseInt(rs1.getString("si_id")) +"";
             rs2 = st1.executeQuery(q);
             if(!rs2.next())
             comboFinishingItem.addItem(rs1.getString("si_name"));
             comboFinishingItem.setEditable(true);
             tf1=(JTextField) comboFinishingItem.getEditor().getEditorComponent();
                
             v1.add(rs1.getString("si_name"));
                
             }
             Collections.sort(
             v1, 
             new Comparator<String>() 
             {
             public int compare(String lhs, String rhs) 
             {
             return lhs.compareToIgnoreCase(rhs);
             }
             }
             ); 
                
                
             //cmbGroupAlter_Under.addItem(GroupItems);
              
             for(int i=0;i<v1.size();i++)
             {
             comboFinishingItem.addItem(v1.get(i));
             }
                            
             tf1.addKeyListener(new KeyAdapter()
             {
             public void keyTyped(final KeyEvent e) 
             {
             EventQueue.invokeLater(new Runnable() 
             {
             public void run() 
             {
             String text = tf1.getText();
             if(text.length()==0) 
             {
             comboFinishingItem.hidePopup();
             setModel1(new DefaultComboBoxModel(v1), "");
             }
             else
             {
             DefaultComboBoxModel m = getSuggestedModel1(v1, text);
             if(m.getSize()==0 || hide_flag)
             {
             comboFinishingItem.hidePopup();
             hide_flag = false;
             }
             else
             {
             setModel1(m, text);
             comboFinishingItem.showPopup();
             }
             }
                        
                        
             String text1 = tf1.getText();
             int code = e.getKeyCode();
             if(code==KeyEvent.VK_ENTER)
             {
             System.out.println("Enter");
             if(!v1.contains(text)) 
             {
             v1.addElement(text);
             Collections.sort(v1);
             setModel1(getSuggestedModel1(v1, text), text);
             }
             hide_flag = true; 
             }
             else if(code==KeyEvent.VK_ESCAPE) 
             {
             hide_flag = true; 
             }
             else if(code==KeyEvent.VK_RIGHT) 
             {
             for(int i=0;i<v1.size();i++)
             {
             String str = v1.elementAt(i);
             if(str.startsWith(text))
             {
             comboFinishingItem.setSelectedIndex(-1);
             tf1.setText(str);
             return;
             }
             }
             }
                        
             }
               
             });
            
             }
              
             });*/
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////             
          /*    tf1.addKeyListener(new KeyAdapter()
             {
             public void keyPressed(final KeyEvent event) 
             {
             EventQueue.invokeLater(new Runnable() 
             {

             @Override
             public void run() {
                           
                            
             if(event.getKeyCode()==KeyEvent.VK_ENTER)
             {
             if(comboFinishingItem.getSelectedItem().equals(""))
             {
             JOptionPane.showMessageDialog(comboFinishingItem,"Please Select Finishing Item");
             }
             else
             {
             comboRaw.requestFocus();
             }
             }
             if(event.getKeyCode()==KeyEvent.VK_ESCAPE)
             {
             btnBackActionPerformed(null);
             }
             }
                  
                   
             });
             }
                
             });*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////            
            q = "select si_id,si_name from tblstockitem where si_under<>" + g_id + "";
            rs1 = st.executeQuery(q);
            i = 0;
            comboRaw.removeAllItems();
            comboRaw.addItem("");
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////            
           /*Code Snippet added by Sudeep on 12-01-2013 At:05.30PM*/


            while (rs1.next()) {
                TemporaryClass t1 = new TemporaryClass();
                t1.setRaw_item_id(Integer.parseInt(rs1.getString("si_id")));
                t1.setRaw_item_name(rs1.getString("si_name"));
                rawitem.add(t1);

                //    comboRaw.addItem(rs1.getString("si_name"));
                comboRaw.setEditable(true);
                tf2 = (JTextField) comboRaw.getEditor().getEditorComponent();

                v2.add(rs1.getString("si_name"));

            }

            Collections.sort(
                    v2,
                    new Comparator<String>() {
                        public int compare(String lhs, String rhs) {
                            return lhs.compareToIgnoreCase(rhs);
                        }
                    });


            //cmbGroupAlter_Under.addItem(GroupItems);

            for (int i = 0; i < v2.size(); i++) {
                comboRaw.addItem(v2.get(i));
            }

            tf2.addKeyListener(new KeyAdapter() {
                public void keyTyped(final KeyEvent e) {
                    EventQueue.invokeLater(new Runnable() {
                        public void run() {
                            String text = tf2.getText();
                            if (text.length() == 0) {
                                comboRaw.hidePopup();
                                setModel2(new DefaultComboBoxModel(v2), "");
                            } else {
                                DefaultComboBoxModel m = getSuggestedModel2(v2, text);
                                if (m.getSize() == 0 || hide_flag) {
                                    comboRaw.hidePopup();
                                    hide_flag = false;
                                } else {
                                    setModel2(m, text);
                                    comboRaw.showPopup();
                                }
                            }


                            String text1 = tf2.getText();
                            int code = e.getKeyCode();
                            if (code == KeyEvent.VK_ENTER) {
                                System.out.println("Enter");
                                if (!v2.contains(text)) {
                                    v2.addElement(text);
                                    Collections.sort(v2);
                                    setModel2(getSuggestedModel2(v2, text), text);
                                }
                                hide_flag = true;
                            } else if (code == KeyEvent.VK_ESCAPE) {
                                hide_flag = true;
                            } else if (code == KeyEvent.VK_RIGHT) {
                                for (int i = 0; i < v2.size(); i++) {
                                    String str = v2.elementAt(i);
                                    if (str.startsWith(text)) {
                                        comboRaw.setSelectedIndex(-1);
                                        tf2.setText(str);
                                        return;
                                    }
                                }
                            }

                        }
                    });

                }
            });
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            tf2.addKeyListener(new KeyAdapter() {
                public void keyPressed(final KeyEvent event) {
                    EventQueue.invokeLater(new Runnable() {
                        @Override
                        public void run() {


                            if (event.getKeyCode() == KeyEvent.VK_ENTER) {
                                if (comboRaw.getSelectedItem().equals("")) {
                                    JOptionPane.showMessageDialog(comboRaw, "Please Select Raw Material");
                                } else {
                                    txtQty.requestFocus();
                                }
                            }
                            if (event.getKeyCode() == KeyEvent.VK_ESCAPE) {
                                comboFinishingItem.requestFocus();
                            }
                        }
                    });
                }
            });

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////            
        } catch (SQLException ex) {
            Logger.getLogger(AddRawMaterial.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(AddRawMaterial.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_formInternalFrameOpened

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        MainClass.setstaticvar();
    }//GEN-LAST:event_formInternalFrameClosed

    private void comboFinishingItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboFinishingItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboFinishingItemActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddRaw;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JComboBox comboFinishingItem;
    private javax.swing.JComboBox comboRaw;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel panelMain;
    private javax.swing.JPanel panelRaw;
    private javax.swing.JTable tableRaw;
    private javax.swing.JTextField txtQty;
    // End of variables declaration//GEN-END:variables
    private boolean hide_flag = false;

    private void setModel1(DefaultComboBoxModel mdl, String str) {
        comboFinishingItem.setModel(mdl);
        comboFinishingItem.setSelectedIndex(-1);
        tf1.setText(str);
    }

    private static DefaultComboBoxModel getSuggestedModel1(java.util.List<String> list, String text) {
        DefaultComboBoxModel m1 = new DefaultComboBoxModel();
        for (String s : list) {
            //if(s.startsWith(text)) m.addElement(s);
            if (s.matches("(.*)" + text + "(.*)")) {
                m1.addElement(s);
                System.out.println("Yes" + s);
            }
        }
        return m1;
    }

    private void setModel2(DefaultComboBoxModel mdl, String str) {
        comboRaw.setModel(mdl);
        comboRaw.setSelectedIndex(-1);
        tf2.setText(str);
    }

    private static DefaultComboBoxModel getSuggestedModel2(java.util.List<String> list, String text) {
        DefaultComboBoxModel m2 = new DefaultComboBoxModel();
        for (String s : list) {
            //if(s.startsWith(text)) m.addElement(s);
            if (s.matches("(.*)" + text + "(.*)")) {
                m2.addElement(s);
                System.out.println("Yes" + s);
            }
        }
        return m2;
    }
}
