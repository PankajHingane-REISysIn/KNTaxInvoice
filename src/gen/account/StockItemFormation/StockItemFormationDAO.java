/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gen.account.StockItemFormation;

import gen.database.connection.DatabaseConnection1;
import gen.dto.Constants;
import gen.dto.Util;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author pc5
 */
public class StockItemFormationDAO {

    public static List<Integer> returningAutoGeneratedKeys;

    public static void upsertStockItem(List<gen.account.StockItemFormation.StockItemDTO> stockItemDTOs) throws Exception {
        if (stockItemDTOs != null && stockItemDTOs.size() > 0) {
            List<gen.account.StockItemFormation.StockItemDTO> stockItemDTOstoInsert = new ArrayList<gen.account.StockItemFormation.StockItemDTO>();
            List<gen.account.StockItemFormation.StockItemDTO> stockItemDTOstoUpdate = new ArrayList<gen.account.StockItemFormation.StockItemDTO>();

            for (gen.account.StockItemFormation.StockItemDTO stockItemDTO : stockItemDTOs) {
                if (stockItemDTO.getID() == 0) {
                    System.out.println("Into InsertDAO");
                    stockItemDTOstoInsert.add(stockItemDTO);
                } else {
                    System.out.println("Into UpdateDAO");
                    stockItemDTOstoUpdate.add(stockItemDTO);
                }
            }

            if (stockItemDTOstoInsert.size() > 0) {
                insertStockItem(stockItemDTOstoInsert);
            }

            if (stockItemDTOstoUpdate.size() > 0) {
                updateStockItem(stockItemDTOstoUpdate);
            }

        }
    }

    public static void insertStockItem(List<gen.account.StockItemFormation.StockItemDTO> stockItemDTOList) throws Exception {

        returningAutoGeneratedKeys = new ArrayList<Integer>();

        Connection connection = null;
        try {
            connection = DatabaseConnection1.GetConnection();
            Statement statement = connection.createStatement();
            String query1 = "INSERT INTO tblstockitem(si_name,si_under,si_unitOfMeasure,si_rate,si_categoryid,si_length,si_width,si_openingBalance,si_colorid,si_thickness,created_date,created_user,si_finishtypeid,si_typeid) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            PreparedStatement preparedStatement = connection.prepareStatement(query1, Statement.RETURN_GENERATED_KEYS);
            for (gen.account.StockItemFormation.StockItemDTO stockItemDTO : stockItemDTOList) {


                preparedStatement.setString(1, stockItemDTO.getName());
                preparedStatement.setInt(2, Integer.parseInt(stockItemDTO.getUnder()));
                if (stockItemDTO.getUnit() != null && !stockItemDTO.getUnit().equalsIgnoreCase("")) {
                    preparedStatement.setInt(3, Integer.parseInt(stockItemDTO.getUnit()));
                } else {
                    preparedStatement.setString(3, null);
                }
                preparedStatement.setDouble(4, Double.parseDouble(stockItemDTO.getRate().toString()));
                if (stockItemDTO.getStockItemCategoryDTO().getCategoryID() == 0) {
                    preparedStatement.setString(5, null);
                } else {
                    preparedStatement.setInt(5, stockItemDTO.getStockItemCategoryDTO().getCategoryID());
                }
                if (Double.parseDouble(stockItemDTO.getLength().toString()) == 0D) {
                    preparedStatement.setString(6, null);
                } else {
                    preparedStatement.setDouble(6, Double.parseDouble(stockItemDTO.getLength().toString()));
                }
                if (Double.parseDouble(stockItemDTO.getWidth().toString()) == 0D) {
                    preparedStatement.setString(7, null);
                } else {
                    preparedStatement.setDouble(7, Double.parseDouble(stockItemDTO.getWidth().toString()));
                }
                preparedStatement.setDouble(8, Double.parseDouble(stockItemDTO.getOpeningBal().toString()));
                System.out.println("stockItemDTO.getStockItemColorDTO().getColorID()---" + stockItemDTO.getStockItemColorDTO().getColorID());
                if (stockItemDTO.getStockItemColorDTO().getColorID() == 0) {
                    preparedStatement.setString(9, null);
                } else {
                    preparedStatement.setInt(9, stockItemDTO.getStockItemColorDTO().getColorID());
                }
                if (Double.parseDouble(stockItemDTO.getThkness().toString()) == 0D) {
                    preparedStatement.setString(10, null);
                } else {
                    preparedStatement.setDouble(10, Double.parseDouble(stockItemDTO.getThkness().toString()));
                }
                java.util.Date date = gen.dto.Constants.simpleDateFormatDatabase.parse(stockItemDTO.getStockitem_Date().trim());
                java.sql.Date sqlStartDate = new Date(date.getTime());
                preparedStatement.setDate(11, sqlStartDate);
                preparedStatement.setString(12, "1");
                if (stockItemDTO.getStockItemFinishTypeDTO().getFinishTypeID() == 0) {
                    preparedStatement.setString(13, null);
                } else {
                    preparedStatement.setInt(13, stockItemDTO.getStockItemFinishTypeDTO().getFinishTypeID());
                }
                if (stockItemDTO.getStockItemTypeDTO().getTypeID() == 0) {
                    preparedStatement.setString(14, null);
                } else {
                    preparedStatement.setInt(14, stockItemDTO.getStockItemTypeDTO().getTypeID());
                }

                preparedStatement.addBatch();
            }

            preparedStatement.executeBatch();

            ResultSet rs = preparedStatement.getGeneratedKeys();
            List<Integer> idList = new ArrayList<Integer>();
            while (rs.next()) {
                idList.add(rs.getInt(1));
                System.out.println("rs.getInt(1)--->>>>" + rs.getInt(1));
                returningAutoGeneratedKeys.add(rs.getInt(1));
            }
            int i = 0;
            for (StockItemDTO stockItemDTO : stockItemDTOList) {
                Integer fk = idList.get(i);

                String query2 = "";
                query2 = "insert into tblStockItemCurrentBalance(si_id,si_currentBalance,si_DebitOrCredit) values(" + fk + "," + stockItemDTO.getOpeningBal() + ",2)";  //2 for credit and 1 for debit
                statement.executeUpdate(query2);

                i++;
            }

            Constants.STOCK_ITEM_TIME_STAMP = Constants.STOCK_ITEM_TIME_STAMP + 1;
            connection.close();

        } catch (Exception ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            if (connection != null && !connection.isClosed()) {
                connection.close();
            }
            throw ex;
        }
    }

    public static void insertCategory(String category) throws Exception {
        try {
            Connection connection = DatabaseConnection1.GetConnection();
            String query = "INSERT INTO tblCategory(category_name)VALUES(?)";

            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.setString(1, category.toString());
            preparedStatement.executeUpdate();
            connection.close();
        } catch (Exception ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
    }

    public static void updateCategory(List<StockItemCategoryDTO> stockItemCategoryDTOs) throws Exception {
        try {
            Connection connection = DatabaseConnection1.GetConnection();
            String query = "UPDATE tblCategory set category_name = ? where category_id = ?";

            PreparedStatement preparedStatement = connection.prepareStatement(query);

            for (StockItemCategoryDTO stockItemCategoryDTO : stockItemCategoryDTOs) {
                preparedStatement.setString(1, stockItemCategoryDTO.getCategoryName());
                preparedStatement.setInt(2, stockItemCategoryDTO.getCategoryID());

                preparedStatement.addBatch();
            }
            preparedStatement.executeBatch();
            connection.close();
        } catch (Exception ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
    }

    public static List<StockItemCategoryDTO> getCategoryList() throws Exception {
        List<StockItemCategoryDTO> stockItemCategoryDTOList = new ArrayList<StockItemCategoryDTO>();
        try {
            Connection connection = DatabaseConnection1.GetConnection();
            String query = "SELECT * from tblCategory";

            PreparedStatement preparedStatement = connection.prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                StockItemCategoryDTO stockItemCategoryDTO = new StockItemCategoryDTO();
                stockItemCategoryDTO.setCategoryID(resultSet.getInt("category_id"));
                stockItemCategoryDTO.setCategoryName(resultSet.getString("category_name"));
                stockItemCategoryDTOList.add(stockItemCategoryDTO);
            }
            connection.close();
        } catch (Exception ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
        return stockItemCategoryDTOList;
    }

    public static boolean deleteCategory(List<StockItemCategoryDTO> categoryDTOList) throws Exception {
        Connection conn = null;
        try {

            conn = DatabaseConnection1.GetConnection();
            conn.setAutoCommit(false);

            ArrayList<Integer> receivedForDeletion = new ArrayList<Integer>();

            for (StockItemCategoryDTO stockItemCategoryDTO : categoryDTOList) {
                receivedForDeletion.add(stockItemCategoryDTO.getCategoryID());
            }

            String selectQuery = "select si_id,si_categoryid from tblstockitem where si_categoryid IN" + "(" + receivedForDeletion.toString().replace("[", "").replace("]", "") + ")";
            PreparedStatement preparedStatement = conn.prepareStatement(selectQuery);
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                receivedForDeletion.remove((Integer) resultSet.getInt("si_categoryid"));
            }

            if (receivedForDeletion.size() > 0) {
                String deleteCategory = "delete from tblCategory where category_id IN" + "(" + receivedForDeletion.toString().replace("[", "").replace("]", "") + ")";
                PreparedStatement preparedStatementD = conn.prepareStatement(deleteCategory);
                preparedStatementD.executeUpdate();
                conn.commit();
                conn.close();
            } else {
                return true;
            }

//            int select = 0;
//            for (StockItemCategoryDTO stockItemCategoryDTO : categoryDTOList) {
//                select = (stockItemCategoryDTO.getCategoryID());
//            }
//            conn = DatabaseConnection1.GetConnection();
//            conn.setAutoCommit(false);
//            Statement st = conn.createStatement();
//            ResultSet rs = st.executeQuery("select si_id from tblstockitem where si_categoryid=" + select + "");
//            if (rs.next()) {
//                return true;
//            } else {
//                st.executeUpdate("delete from tblCategory where category_id=" + select + "");
//            }
//            conn.commit();
//            conn.close();
        } catch (SQLException ex) {
            if (conn != null && !conn.isClosed()) {
                conn.close();
            }
            ex.printStackTrace();
            throw ex;
        }
        return false;
    }

    public static void insertLength(double length) throws Exception {
        try {
            Connection connection = DatabaseConnection1.GetConnection();
            String query = "INSERT INTO tbllength(length)VALUES(?)";

            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.setDouble(1, length);
            preparedStatement.executeUpdate();
            connection.close();
        } catch (Exception ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
    }

    public static List<StockItemDTO> getLengthList() throws Exception {
        List<StockItemDTO> stockItemLengthList = new ArrayList<StockItemDTO>();
        try {
            Connection connection = DatabaseConnection1.GetConnection();
            String query = "SELECT * from tbllength";

            PreparedStatement preparedStatement = connection.prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                StockItemDTO stockItemDTO = new StockItemDTO();
                stockItemDTO.setLength(resultSet.getDouble("length"));
                stockItemLengthList.add(stockItemDTO);
            }
            connection.close();
        } catch (Exception ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
        return stockItemLengthList;
    }

    public static void insertWidth(double width) throws Exception {
        try {
            Connection connection = DatabaseConnection1.GetConnection();
            String query = "INSERT INTO tblwidth(width)VALUES(?)";

            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.setDouble(1, width);
            preparedStatement.executeUpdate();
            connection.close();
        } catch (Exception ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
    }

    public static List<StockItemDTO> getWidthList() throws Exception {
        List<StockItemDTO> stockItemWidthList = new ArrayList<StockItemDTO>();
        try {
            Connection connection = DatabaseConnection1.GetConnection();
            String query = "SELECT * from tblwidth";

            PreparedStatement preparedStatement = connection.prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                StockItemDTO stockItemDTO = new StockItemDTO();
                stockItemDTO.setWidth(resultSet.getDouble("width"));
                stockItemWidthList.add(stockItemDTO);
            }
            connection.close();
        } catch (Exception ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
        return stockItemWidthList;
    }

    public static void insertThickness(double thickness) throws Exception {
        try {
            Connection connection = DatabaseConnection1.GetConnection();
            String query = "INSERT INTO tblthickness(thickness)VALUES(?)";

            System.out.println("Thickesss in DAO-->>>" + thickness);

            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.setDouble(1, thickness);
            preparedStatement.executeUpdate();
            connection.close();
        } catch (Exception ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
    }

    public static List<StockItemDTO> getThicknessList() throws Exception {
        List<StockItemDTO> stockItemThicknessList = new ArrayList<StockItemDTO>();
        try {
            Connection connection = DatabaseConnection1.GetConnection();
            String query = "SELECT * from tblthickness";

            PreparedStatement preparedStatement = connection.prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                StockItemDTO stockItemDTO = new StockItemDTO();
                stockItemDTO.setThkness(resultSet.getDouble("thickness"));
                System.out.println("Thickenessss GET in DAO-->>>" + resultSet.getDouble("thickness"));
                stockItemThicknessList.add(stockItemDTO);
            }
            connection.close();
        } catch (Exception ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
        return stockItemThicknessList;
    }

    public static void insertColor(String color) throws Exception {
        try {
            Connection connection = DatabaseConnection1.GetConnection();
            String query = "INSERT INTO tblcolor(color_name)VALUES(?)";

            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.setString(1, color.toString());
            preparedStatement.executeUpdate();
            connection.close();
        } catch (Exception ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
    }

    public static void updateColor(List<StockItemColorDTO> stockItemColorDTOs) throws Exception {
        try {
            Connection connection = DatabaseConnection1.GetConnection();
            String query = "UPDATE tblcolor set color_name = ? where color_id = ?";

            PreparedStatement preparedStatement = connection.prepareStatement(query);

            for (StockItemColorDTO stockItemColorDTO : stockItemColorDTOs) {
                preparedStatement.setString(1, stockItemColorDTO.getColorName());
                preparedStatement.setInt(2, stockItemColorDTO.getColorID());

                preparedStatement.addBatch();
            }
            preparedStatement.executeBatch();
            connection.close();
        } catch (Exception ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
    }

    public static List<StockItemColorDTO> getColorList() throws Exception {
        List<StockItemColorDTO> stockItemColorDTOList = new ArrayList<StockItemColorDTO>();
        try {
            Connection connection = DatabaseConnection1.GetConnection();
            String query = "SELECT * from tblcolor";

            PreparedStatement preparedStatement = connection.prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                StockItemColorDTO stockItemColorDTO = new StockItemColorDTO();
                stockItemColorDTO.setColorID(resultSet.getInt("color_id"));
                stockItemColorDTO.setColorName(resultSet.getString("color_name"));
                stockItemColorDTOList.add(stockItemColorDTO);
            }
            connection.close();
        } catch (Exception ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
        return stockItemColorDTOList;
    }

    public static boolean deleteColor(List<StockItemColorDTO> colorDTOList) throws Exception {
        Connection conn = null;
        try {

            conn = DatabaseConnection1.GetConnection();
            conn.setAutoCommit(false);

            ArrayList<Integer> receivedForDeletion = new ArrayList<Integer>();

            for (StockItemColorDTO stockItemColorDTO : colorDTOList) {
                receivedForDeletion.add(stockItemColorDTO.getColorID());
            }

            String selectColor = "select si_id,si_colorid from tblstockitem where si_colorid IN" + "(" + receivedForDeletion.toString().replace("[", "").replace("]", "") + ")";
            PreparedStatement preparedStatement = conn.prepareStatement(selectColor);
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                receivedForDeletion.remove((Integer) resultSet.getInt("si_colorid"));
            }

            if (receivedForDeletion.size() > 0) {
                String deleteColor = "delete from tblcolor where color_id IN" + "(" + receivedForDeletion.toString().replace("[", "").replace("]", "") + ")";
                PreparedStatement preparedStatementD = conn.prepareStatement(deleteColor);
                preparedStatementD.executeUpdate();
                conn.commit();
                conn.close();
            } else {
                return true;
            }

//            int select = 0;
//            for (StockItemColorDTO stockItemColorDTO : colorDTOList) {
//                select = (stockItemColorDTO.getColorID());
//            }
//            conn = DatabaseConnection1.GetConnection();
//            conn.setAutoCommit(false);
//            Statement st = conn.createStatement();
//            ResultSet rs = st.executeQuery("select si_id from tblstockitem where si_colorid=" + select + "");
//            if (rs.next()) {
//                return true;
//            } else {
//                st.executeUpdate("delete from tblcolor where color_id=" + select + "");
//            }
//            conn.commit();
//            conn.close();
        } catch (SQLException ex) {
            if (conn != null && !conn.isClosed()) {
                conn.close();
            }
            ex.printStackTrace();
            throw ex;
        }
        return false;
    }

    public static void insertFinishType(String finishType) throws Exception {
        try {
            Connection connection = DatabaseConnection1.GetConnection();
            String query = "INSERT INTO tblfinishtype(finishtype_name)VALUES(?)";

            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.setString(1, finishType.toString());
            preparedStatement.executeUpdate();
            connection.close();
        } catch (Exception ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
    }

    public static void updateFinishType(List<StockItemFinishTypeDTO> stockItemFinishTypeDTOs) throws Exception {
        try {
            Connection connection = DatabaseConnection1.GetConnection();
            String query = "UPDATE tblfinishtype set finishtype_name = ? where f_id = ?";

            PreparedStatement preparedStatement = connection.prepareStatement(query);

            for (StockItemFinishTypeDTO stockItemFinishTypeDTO : stockItemFinishTypeDTOs) {
                preparedStatement.setString(1, stockItemFinishTypeDTO.getFinishTypeName());
                preparedStatement.setInt(2, stockItemFinishTypeDTO.getFinishTypeID());

                preparedStatement.addBatch();
            }
            preparedStatement.executeBatch();
            connection.close();
        } catch (Exception ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
    }

    public static List<StockItemFinishTypeDTO> getFinishTypeList() throws Exception {
        List<StockItemFinishTypeDTO> stockItemFinishTypeDTOList = new ArrayList<StockItemFinishTypeDTO>();
        try {
            Connection connection = DatabaseConnection1.GetConnection();
            String query = "SELECT * from tblfinishtype";

            PreparedStatement preparedStatement = connection.prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                StockItemFinishTypeDTO stockItemFinishTypeDTO = new StockItemFinishTypeDTO();
                stockItemFinishTypeDTO.setFinishTypeID(resultSet.getInt("f_id"));
                stockItemFinishTypeDTO.setFinishTypeName(resultSet.getString("finishtype_name"));
                stockItemFinishTypeDTOList.add(stockItemFinishTypeDTO);
            }
            connection.close();
        } catch (Exception ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
        return stockItemFinishTypeDTOList;
    }

    public static boolean deleteFinishType(List<StockItemFinishTypeDTO> finishTypeDTOs) throws Exception {
        Connection conn = null;
        try {

            conn = DatabaseConnection1.GetConnection();
            conn.setAutoCommit(false);

            ArrayList<Integer> receivedForDeletion = new ArrayList<Integer>();

            for (StockItemFinishTypeDTO stockItemFinishTypeDTO : finishTypeDTOs) {
                receivedForDeletion.add(stockItemFinishTypeDTO.getFinishTypeID());
            }

            String selectColor = "select si_id,si_finishtypeid from tblstockitem where si_finishtypeid IN" + "(" + receivedForDeletion.toString().replace("[", "").replace("]", "") + ")";
            PreparedStatement preparedStatement = conn.prepareStatement(selectColor);
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                receivedForDeletion.remove((Integer) resultSet.getInt("si_finishtypeid"));
            }

            if (receivedForDeletion.size() > 0) {
                String deleteColor = "delete from tblfinishtype where f_id IN" + "(" + receivedForDeletion.toString().replace("[", "").replace("]", "") + ")";
                PreparedStatement preparedStatementD = conn.prepareStatement(deleteColor);
                preparedStatementD.executeUpdate();
                conn.commit();
                conn.close();
            } else {
                return true;
            }

//            int select = 0;
//            for (StockItemFinishTypeDTO stockItemFinishTypeDTO : finishTypeDTOs) {
//                select = (stockItemFinishTypeDTO.getFinishTypeID());
//            }
//            conn = DatabaseConnection1.GetConnection();
//            conn.setAutoCommit(false);
//            Statement st = conn.createStatement();
//            ResultSet rs = st.executeQuery("select si_id from tblstockitem where si_finishtypeid=" + select + "");
//            if (rs.next()) {
//                return true;
//            } else {
//                st.executeUpdate("delete from tblfinishtype where f_id=" + select + "");
//            }
//            conn.commit();
//            conn.close();
        } catch (SQLException ex) {
            if (conn != null && !conn.isClosed()) {
                conn.close();
            }
            ex.printStackTrace();
            throw ex;
        }
        return false;
    }

    public static void insertType(String type) throws Exception {
        try {
            Connection connection = DatabaseConnection1.GetConnection();
            String query = "INSERT INTO tbltype(typename)VALUES(?)";

            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.setString(1, type.toString());
            preparedStatement.executeUpdate();
            connection.close();
        } catch (Exception ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
    }

    public static void updateType(List<StockItemTypeDTO> stockItemTypeDTOs) throws Exception {
        try {
            Connection connection = DatabaseConnection1.GetConnection();
            String query = "UPDATE tbltype set typename = ? where typeid = ?";

            PreparedStatement preparedStatement = connection.prepareStatement(query);

            for (StockItemTypeDTO stockItemTypeDTO : stockItemTypeDTOs) {
                preparedStatement.setString(1, stockItemTypeDTO.getTypeName());
                preparedStatement.setInt(2, stockItemTypeDTO.getTypeID());

                preparedStatement.addBatch();
            }
            preparedStatement.executeBatch();
            connection.close();
        } catch (Exception ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
    }

    public static List<StockItemTypeDTO> getTypeList() throws Exception {
        List<StockItemTypeDTO> stockItemTypeDTOList = new ArrayList<StockItemTypeDTO>();
        try {
            Connection connection = DatabaseConnection1.GetConnection();
            String query = "SELECT * from tbltype";

            PreparedStatement preparedStatement = connection.prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                StockItemTypeDTO stockItemTypeDTO = new StockItemTypeDTO();
                stockItemTypeDTO.setTypeID(resultSet.getInt("typeid"));
                stockItemTypeDTO.setTypeName(resultSet.getString("typename"));
                stockItemTypeDTOList.add(stockItemTypeDTO);
            }
            connection.close();
        } catch (Exception ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
        return stockItemTypeDTOList;
    }

    public static boolean deleteType(List<StockItemTypeDTO> typeDTOs) throws Exception {
        Connection conn = null;
        try {

            conn = DatabaseConnection1.GetConnection();
            conn.setAutoCommit(false);

            ArrayList<Integer> receivedForDeletion = new ArrayList<Integer>();

            for (StockItemTypeDTO stockItemTypeDTO : typeDTOs) {
                receivedForDeletion.add(stockItemTypeDTO.getTypeID());
            }

            String selectColor = "select si_id,si_typeid from tblstockitem where si_typeid IN" + "(" + receivedForDeletion.toString().replace("[", "").replace("]", "") + ")";
            PreparedStatement preparedStatement = conn.prepareStatement(selectColor);
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                receivedForDeletion.remove((Integer) resultSet.getInt("si_typeid"));
            }

            if (receivedForDeletion.size() > 0) {
                String deleteColor = "delete from tbltype where typeid IN" + "(" + receivedForDeletion.toString().replace("[", "").replace("]", "") + ")";
                PreparedStatement preparedStatementD = conn.prepareStatement(deleteColor);
                preparedStatementD.executeUpdate();
                conn.commit();
                conn.close();
            } else {
                return true;
            }

//            int select = 0;
//            for (StockItemTypeDTO stockItemTypeDTO : typeDTOs) {
//                select = (stockItemTypeDTO.getTypeID());
//            }
//            conn = DatabaseConnection1.GetConnection();
//            conn.setAutoCommit(false);
//            Statement st = conn.createStatement();
//            ResultSet rs = st.executeQuery("select si_id from tblstockitem where si_typeid=" + select + "");
//            if (rs.next()) {
//                return true;
//            } else {
//                st.executeUpdate("delete from tbltype where typeid=" + select + "");
//            }
//            conn.commit();
//            conn.close();
        } catch (SQLException ex) {
            if (conn != null && !conn.isClosed()) {
                conn.close();
            }
            ex.printStackTrace();
            throw ex;
        }
        return false;
    }

    public static void updateStockItem(List<StockItemDTO> stockItemDTOList) throws Exception {
        Connection conn = null;
        try {
            conn = DatabaseConnection1.GetConnection();
//            String query = "update tblstockitem set si_categoryid = ?,si_length = ?, si_width = ?, si_openingBalance = ?, si_colorid = ?, si_thickness = ?, modified_date=?,modified_user=?,applicable_From_date=? ,si_finishtypeid where si_id = ?";
            String query = "update tblstockitem set si_name = ?,si_under = ?,si_unitOfMeasure = ?,si_rate = ?,si_categoryid = ?,si_length = ?, si_width = ?, si_openingBalance = ?, si_colorid = ?, si_thickness = ?, modified_date=?,modified_user=?,si_finishtypeid = ?,si_typeid=? where si_id = ?";
            PreparedStatement ps = conn.prepareStatement(query);
            for (StockItemDTO stockItemDTO : stockItemDTOList) {
                ps.setString(1, stockItemDTO.getName());
                ps.setInt(2, Integer.parseInt(stockItemDTO.getUnder()));
                //ps.setInt(3, Integer.parseInt(stockItemDTO.getUnit()));
                if (stockItemDTO.getUnit() != null && !stockItemDTO.getUnit().equalsIgnoreCase("")) {
                    ps.setInt(3, Integer.parseInt(stockItemDTO.getUnit()));
                } else {
                    ps.setString(3, null);
                }
                ps.setDouble(4, Double.parseDouble(stockItemDTO.getRate().toString()));
                if (stockItemDTO.getStockItemCategoryDTO().getCategoryID() == 0) {
                    ps.setString(5, null);
                } else {
                    ps.setInt(5, stockItemDTO.getStockItemCategoryDTO().getCategoryID());
                }

                if (Double.parseDouble(stockItemDTO.getLength().toString()) == 0D) {
                    ps.setString(6, null);
                } else {
                    ps.setDouble(6, stockItemDTO.getLength());
                }

                if (Double.parseDouble(stockItemDTO.getWidth().toString()) == 0D) {
                    ps.setString(7, null);
                } else {
                    ps.setDouble(7, stockItemDTO.getWidth());
                }

                ps.setDouble(8, Double.parseDouble(stockItemDTO.getOpeningBal().toString()));

                if (stockItemDTO.getStockItemColorDTO().getColorID() == 0D) {
                    ps.setString(9, null);
                } else {
                    ps.setInt(9, stockItemDTO.getStockItemColorDTO().getColorID());
                }

                if (Double.parseDouble(stockItemDTO.getThkness().toString()) == 0D) {
                    ps.setString(10, null);
                } else {
                    ps.setDouble(10, stockItemDTO.getThkness());
                }

                java.util.Date date = gen.dto.Constants.simpleDateFormatDatabase.parse(stockItemDTO.getStockitem_Date().trim());
                java.sql.Date sqlStartDate = new Date(date.getTime());
                ps.setDate(11, sqlStartDate);
                ps.setString(12, "1");
                //java.util.Date date1 = gen.dto.Constants.simpleDateFormatDatabaseWithDash.parse(gen.dto.Constants.CURRENT_COMPANY_CREATED_DATE);
//                java.util.Date date1 = gen.dto.Constants.simpleDateFormatDatabase.parse(stockItemDTO.getStockitem_Date().trim());
//                java.sql.Date sqlStartDate1 = new Date(date1.getTime());
//                ps.setDate(9, sqlStartDate1);
                System.out.println("IIIIII     " + stockItemDTO.getID());

                if (stockItemDTO.getStockItemFinishTypeDTO().getFinishTypeID() == 0) {
                    ps.setString(13, null);
                } else {
                    ps.setLong(13, stockItemDTO.getStockItemFinishTypeDTO().getFinishTypeID());
                }

                if (stockItemDTO.getStockItemTypeDTO().getTypeID() == 0) {
                    ps.setString(14, null);
                } else {
                    ps.setLong(14, stockItemDTO.getStockItemTypeDTO().getTypeID());
                }

                ps.setLong(15, stockItemDTO.getID());


                ps.addBatch();
            }
            ps.executeBatch();

            ps.close();
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            if (conn != null && !conn.isClosed()) {
                conn.close();
            }
            throw ex;
        }
    }

    public static boolean deleteStockItem(List<StockItemDTO> stockItemDTOList) throws Exception {
        Connection conn = null;
        try {
            Long select = 0L;
            for (StockItemDTO stockItemDTO : stockItemDTOList) {
                select = (stockItemDTO.getID());
            }
            conn = DatabaseConnection1.GetConnection();
            conn.setAutoCommit(false);
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("select invtrans_id from tblinventorytransactionitems where invtrans_itemId = " + select + "");
            if (rs.next()) {
                return true;
            } else {
                st.executeUpdate("delete from tblstockitemcurrentbalance where si_id=" + select + "");

                st.executeUpdate("delete from tblstockitemopblupdaterecord where si_id=" + select + "");
                st.executeUpdate("delete from tblstockitemrate where stkid=" + select + "");
                st.executeUpdate("delete from tblstockitem where si_id=" + select + "");
                conn.commit();
            }
            conn.close();
        } catch (SQLException ex) {
            if (conn != null && !conn.isClosed()) {
                conn.close();
            }
            throw ex;
        }
        return false;
    }
    
    public static List<StockItemDTO> getStockItemList(Set<String> idSet) throws Exception {
        return getStockItemList(idSet, "Id");
    }

    public static List<StockItemDTO> getStockItemList(Set<String> idSet, String type) throws Exception {
        String stockItemNameList = "";
        String condition = "";
        List<StockItemDTO> list = new ArrayList<StockItemDTO>();
        try {
            Connection connection = DatabaseConnection1.GetConnection();

            if (!Util.isEmpty(idSet)) {
                
                if(type.equalsIgnoreCase("Id")) {
                    for (String group : idSet) {
                        stockItemNameList = group + "," + stockItemNameList;
                    }
                    String selectedStockItem = stockItemNameList.substring(0, stockItemNameList.length() - 1);
                    condition = " where si_id in(" + selectedStockItem + ")";
                } else {
                    for (String group : idSet) {
                        stockItemNameList = "'"+group + "'," + stockItemNameList;
                    }
                    String selectedStockItem = stockItemNameList.substring(0, stockItemNameList.length() - 1);
                    condition = " where si_name in(" + selectedStockItem + ")";
                }
            }

            String query = "SELECT tblstockitem.si_id,tblstockitem.si_name,tblstockitem.si_under,tblstockitem.si_unitOfMeasure,tblstockitem.si_name,tblstockitem.si_length,tblstockitem.si_width,tblstockitem.si_thickness,tblstockitem.si_rate,tblstockitem.si_openingBalance,tblstockitem.si_categoryid,tblstockitem.si_colorid,tblstockitem.si_finishtypeid,tblstockitem.si_typeid,tblstockitem.created_date,tblstockitem.modified_date"
                    + " FROM tblstockitem"
                    + " LEFT JOIN tblCategory"
                    + " ON tblstockitem.si_categoryid = tblCategory.category_id"
                    + " LEFT JOIN tblcolor"
                    + " ON tblstockitem.si_colorid = tblcolor.color_id"
                    + " LEFT JOIN tblfinishtype"
                    + " ON tblstockitem.si_finishtypeid = tblfinishtype.f_id"
                    + " LEFT JOIN tbltype"
                    + " ON tblstockitem.si_typeid = tbltype.typeid"
                    + condition;

            System.out.println("query--->>>" + query);

            PreparedStatement preparedStatement = connection.prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                StockItemDTO stockItemDTO = new StockItemDTO();

                stockItemDTO.setName(resultSet.getString("si_name"));

                StockItemCategoryDTO stockItemCategoryDTO = new StockItemCategoryDTO();
                System.out.println("resultSet.getString(si_categoryid)-->>>" + resultSet.getString("si_categoryid"));
                if (resultSet.getString("si_categoryid") != null) {
                    stockItemCategoryDTO.setCategoryID(resultSet.getInt("si_categoryid"));
                }

                StockItemColorDTO stockItemColorDTO = new StockItemColorDTO();
                stockItemColorDTO.setColorID(resultSet.getInt("si_colorid"));

                StockItemFinishTypeDTO stockItemFinishTypeDTO = new StockItemFinishTypeDTO();
                stockItemFinishTypeDTO.setFinishTypeID(resultSet.getInt("si_finishtypeid"));

                StockItemTypeDTO stockItemTypeDTO = new StockItemTypeDTO();
                stockItemTypeDTO.setTypeID(resultSet.getInt("si_typeid"));

                System.out.println("Gettingggg type-->>" + stockItemTypeDTO.getTypeID());

                stockItemDTO.setID(Long.parseLong(resultSet.getString("si_id")));
                stockItemDTO.setUnder("" + resultSet.getInt("si_under"));
                stockItemDTO.setUnit("" + resultSet.getInt("si_unitOfMeasure"));
                stockItemDTO.setStockItemCategoryDTO(stockItemCategoryDTO);
                stockItemDTO.setLength(resultSet.getDouble("si_length"));
                stockItemDTO.setWidth(resultSet.getDouble("si_width"));
                stockItemDTO.setRate(resultSet.getDouble("si_rate"));
                stockItemDTO.setOpeningBal(resultSet.getDouble("si_openingBalance"));
                stockItemDTO.setStockItemColorDTO(stockItemColorDTO);
                stockItemDTO.setThkness(resultSet.getDouble("si_thickness"));
                stockItemDTO.setStockItemFinishTypeDTO(stockItemFinishTypeDTO);
                stockItemDTO.setStockItemTypeDTO(stockItemTypeDTO);

                SimpleDateFormat f = new SimpleDateFormat("yyyy/MM/dd");
//                Calendar currentDate = Calendar.getInstance();
                try{
                String dateNow = f.format(resultSet.getDate("created_date"));

                stockItemDTO.setStockitem_Date(dateNow);
                }catch(Exception ex){
                    
                }
                list.add(stockItemDTO);
            }

        } catch (Exception ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
        return list;
    }

    public static Map<String, String> loadCategoryIDToNameMap() throws Exception {
        Map<String, String> categoryIDToNameMap = new HashMap<String, String>();
        try {
            Connection connection = DatabaseConnection1.GetConnection();

            String query = "SELECT category_id,category_name from tblCategory";

            PreparedStatement preparedStatement = connection.prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                categoryIDToNameMap.put("" + resultSet.getInt("category_id"), resultSet.getString("category_name"));
            }


        } catch (Exception ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
        return categoryIDToNameMap;
    }

    public static Map<String, String> loadCategoryNameToIDMap() throws Exception {
        Map<String, String> categoryNameToIDMap = new HashMap<String, String>();
        try {
            Connection connection = DatabaseConnection1.GetConnection();

            String query = "SELECT category_name,category_id from tblCategory";

            PreparedStatement preparedStatement = connection.prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                categoryNameToIDMap.put(resultSet.getString("category_name"), "" + resultSet.getInt("category_id"));
            }


        } catch (SQLException ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
        return categoryNameToIDMap;
    }

    public static Map<String, String> loadColorIDToNameMap() throws Exception {
        Map<String, String> colorIDToNameMap = new HashMap<String, String>();
        try {
            Connection connection = DatabaseConnection1.GetConnection();

            String query = "SELECT color_id,color_name from tblcolor";

            PreparedStatement preparedStatement = connection.prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                colorIDToNameMap.put("" + resultSet.getInt("color_id"), resultSet.getString("color_name"));
            }

        } catch (Exception ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
        return colorIDToNameMap;
    }

    public static Map<String, String> loadColorNameToIDMap() throws Exception {
        Map<String, String> colorNameToIDMap = new HashMap<String, String>();
        try {
            Connection connection = DatabaseConnection1.GetConnection();

            String query = "SELECT color_id,color_name from tblcolor";

            PreparedStatement preparedStatement = connection.prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                colorNameToIDMap.put(resultSet.getString("color_name"), "" + resultSet.getInt("color_id"));
            }

        } catch (Exception ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
        return colorNameToIDMap;
    }

    public static Map<String, String> loadFinishTypeIDToNameMap() throws Exception {
        Map<String, String> finishTypeIDToNameMap = new HashMap<String, String>();
        try {
            Connection connection = DatabaseConnection1.GetConnection();

            String query = "SELECT f_id,finishtype_name from tblfinishtype";

            PreparedStatement preparedStatement = connection.prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                finishTypeIDToNameMap.put("" + resultSet.getInt("f_id"), resultSet.getString("finishtype_name"));
            }

        } catch (Exception ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
        return finishTypeIDToNameMap;
    }

    public static Map<String, String> loadFinishTypeNameToIDMap() throws Exception {
        Map<String, String> finishTypeNameToIDMap = new HashMap<String, String>();
        try {
            Connection connection = DatabaseConnection1.GetConnection();

            String query = "SELECT f_id,finishtype_name from tblfinishtype";

            PreparedStatement preparedStatement = connection.prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                finishTypeNameToIDMap.put(resultSet.getString("finishtype_name"), "" + resultSet.getInt("f_id"));
            }

        } catch (Exception ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
        return finishTypeNameToIDMap;
    }

    public static Map<String, String> loadTypeIDToNameMap() throws Exception {
        Map<String, String> typeIDToNameMap = new HashMap<String, String>();
        try {
            Connection connection = DatabaseConnection1.GetConnection();

            String query = "SELECT typeid,typename from tbltype";

            PreparedStatement preparedStatement = connection.prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                typeIDToNameMap.put("" + resultSet.getInt("typeid"), resultSet.getString("typename"));
            }

        } catch (Exception ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
        return typeIDToNameMap;
    }

    public static Map<String, String> loadTypeNameToIDMap() throws Exception {
        Map<String, String> typeNameToIDMap = new HashMap<String, String>();
        try {
            Connection connection = DatabaseConnection1.GetConnection();

            String query = "SELECT typeid,typename from tbltype";

            PreparedStatement preparedStatement = connection.prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                typeNameToIDMap.put(resultSet.getString("typename"), "" + resultSet.getInt("typeid"));
            }

        } catch (Exception ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
        return typeNameToIDMap;
    }

    public static String getFinishedStockGroupID() throws Exception {

        String finishedStockGroupID = "";
        try {
            Connection connection = DatabaseConnection1.GetConnection();

            String query = "SELECT sg_id from tblstockgroup where sg_name = 'FinishedGroup'";

            PreparedStatement preparedStatement = connection.prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                finishedStockGroupID = "" + resultSet.getInt("sg_id");
            }
        } catch (Exception ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }

        return finishedStockGroupID;
    }

    public static List<StockItemDTO> exportAllStockItems() throws Exception {
        String stockItemNameList = "";
        String condition = "";
        List<StockItemDTO> list = new ArrayList<StockItemDTO>();
        try {
            Connection connection = DatabaseConnection1.GetConnection();

//            if (!Util.isEmpty(idSet)) {
//
//                for (String group : idSet) {
//                    stockItemNameList = group + "," + stockItemNameList;
//                }
//                String selectedStockItem = stockItemNameList.substring(0, stockItemNameList.length() - 1);
//                condition = " where si_id in(" + selectedStockItem + ")";
//
//            }

            String query = "SELECT tblstockitem.si_id,tblstockitem.si_under,tblstockitem.si_name,tblstockitem.si_length,tblstockitem.si_width,tblstockitem.si_thickness,tblstockitem.si_openingBalance,tblstockitem.si_categoryid,tblstockitem.si_colorid,tblstockitem.si_finishtypeid,tblstockitem.si_typeid,tblstockitem.created_date,tblstockitem.modified_date"
                    + " FROM tblstockitem"
                    + " LEFT JOIN tblCategory"
                    + " ON tblstockitem.si_categoryid = tblCategory.category_id"
                    + " LEFT JOIN tblcolor"
                    + " ON tblstockitem.si_colorid = tblcolor.color_id"
                    + " LEFT JOIN tblfinishtype"
                    + " ON tblstockitem.si_finishtypeid = tblfinishtype.f_id"
                    + " LEFT JOIN tbltype"
                    + " ON tblstockitem.si_typeid = tbltype.typeid";
            //+ condition;

            System.out.println("query--->>>" + query);

            PreparedStatement preparedStatement = connection.prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                StockItemDTO stockItemDTO = new StockItemDTO();

                stockItemDTO.setName(resultSet.getString("si_name"));

                StockItemCategoryDTO stockItemCategoryDTO = new StockItemCategoryDTO();
                System.out.println("resultSet.getString(si_categoryid)-->>>" + resultSet.getString("si_categoryid"));
                if (resultSet.getString("si_categoryid") != null) {
                    stockItemCategoryDTO.setCategoryID(resultSet.getInt("si_categoryid"));
                }

                StockItemColorDTO stockItemColorDTO = new StockItemColorDTO();
                stockItemColorDTO.setColorID(resultSet.getInt("si_colorid"));

                StockItemFinishTypeDTO stockItemFinishTypeDTO = new StockItemFinishTypeDTO();
                stockItemFinishTypeDTO.setFinishTypeID(resultSet.getInt("si_finishtypeid"));

                StockItemTypeDTO stockItemTypeDTO = new StockItemTypeDTO();
                stockItemTypeDTO.setTypeID(resultSet.getInt("si_typeid"));

                System.out.println("Gettingggg type-->>" + stockItemTypeDTO.getTypeID());

                stockItemDTO.setID(Long.parseLong(resultSet.getString("si_id")));
                stockItemDTO.setUnder("" + resultSet.getInt("si_under"));
                stockItemDTO.setStockItemCategoryDTO(stockItemCategoryDTO);
                stockItemDTO.setLength(resultSet.getDouble("si_length"));
                stockItemDTO.setWidth(resultSet.getDouble("si_width"));
                stockItemDTO.setOpeningBal(resultSet.getDouble("si_openingBalance"));
                stockItemDTO.setStockItemColorDTO(stockItemColorDTO);
                stockItemDTO.setThkness(resultSet.getDouble("si_thickness"));
                stockItemDTO.setStockItemFinishTypeDTO(stockItemFinishTypeDTO);
                stockItemDTO.setStockItemTypeDTO(stockItemTypeDTO);

                SimpleDateFormat f = new SimpleDateFormat("yyyy/MM/dd");
//                Calendar currentDate = Calendar.getInstance();
                String dateNow = f.format(resultSet.getDate("created_date"));

                stockItemDTO.setStockitem_Date(dateNow);

                list.add(stockItemDTO);
            }

        } catch (Exception ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
        return list;
    }

    public static Map<String, String> loadStockGroupNameToIDMap() throws SQLException {
        Connection con = null;
        Map<String, String> stockGroupNameToIDMapping = new HashMap<String, String>();
        String query = "select sg_id,sg_name from tblstockgroup where sg_name not in ('Primary')";
        try {
            con = DatabaseConnection1.GetConnection();
            PreparedStatement preparedStmt = con.prepareStatement(query);
            ResultSet resultSet = preparedStmt.executeQuery();
            while (resultSet.next()) {
                stockGroupNameToIDMapping.put(resultSet.getString("sg_name"), String.valueOf(resultSet.getInt("sg_id")));
            }
        } catch (SQLException ex) {
            if (con != null && !con.isClosed()) {
                con.close();
            }
            throw ex;
        }
        return stockGroupNameToIDMapping;
    }

    public static Map<String, String> loadUnitOfMeasureNameToIDMap() throws SQLException {
        Connection con = null;
        Map<String, String> unitOfMeasureNameToIDMapping = new HashMap<String, String>();
        try {

            String query = "select uom_formalName,uom_id from tblunitofmeasure";
            con = DatabaseConnection1.GetConnection();
            PreparedStatement preparedStmt = con.prepareStatement(query);
            ResultSet resultSet = preparedStmt.executeQuery();
            while (resultSet.next()) {
                unitOfMeasureNameToIDMapping.put(String.valueOf(resultSet.getString("uom_formalName")), String.valueOf(resultSet.getInt("uom_id")));
            }
        } catch (SQLException ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);

            if (con != null && !con.isClosed()) {
                con.close();
            }
            throw ex;
        }
        return unitOfMeasureNameToIDMapping;
    }

    public static Map<String, String> loadUnitOfMeasureIDToNameMap() throws SQLException {
        Connection con = null;
        Map<String, String> unitOfMeasureIDToNameMapping = new HashMap<String, String>();
        try {
            String query = "select uom_formalName,uom_id from tblunitofmeasure";
            con = DatabaseConnection1.GetConnection();
            PreparedStatement preparedStmt = con.prepareStatement(query);
            ResultSet resultSet = preparedStmt.executeQuery();
            while (resultSet.next()) {
                unitOfMeasureIDToNameMapping.put(String.valueOf(resultSet.getInt("uom_id")), resultSet.getString("uom_formalName"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);

            if (con != null && !con.isClosed()) {
                con.close();
            }
            throw ex;
        }
        return unitOfMeasureIDToNameMapping;
    }

    public static Map<String, String> loadStockGroupIDToNameMap() throws SQLException {
        Connection con = null;
        Map<String, String> stockGroupIDToNameMapping = new HashMap<String, String>();
        String query = "select sg_id,sg_name from tblstockgroup where sg_name not in ('Primary')";
        try {
            con = DatabaseConnection1.GetConnection();
            PreparedStatement preparedStmt = con.prepareStatement(query);
            ResultSet resultSet = preparedStmt.executeQuery();
            while (resultSet.next()) {
                stockGroupIDToNameMapping.put(String.valueOf(resultSet.getInt("sg_id")), resultSet.getString("sg_name"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            if (con != null && !con.isClosed()) {
                con.close();
            }
            throw ex;
        }
        return stockGroupIDToNameMapping;
    }

    public static List<StockItemDTO> getStockItemList_Order_By(LinkedList<LinkedHashMap<String, String>> idSet, LinkedHashMap<String, String> map_Order) throws Exception {
        String stockItemNameList = "";
        String condition = "";
        List<StockItemDTO> list = new ArrayList<StockItemDTO>();
        try {
            Connection connection = DatabaseConnection1.GetConnection();

            if (idSet != null && idSet.size() > 0) {
                LinkedList<String> order_List = new LinkedList<String>();

                for (LinkedHashMap<String, String> e : idSet) {
                    for (String str : e.keySet()) {
                        order_List.add(str);
                        condition = " where ";
                    }

                }


                for (String str : order_List) {
                    System.out.println("Str ------------- key ------- " + str);
                    if (str.equalsIgnoreCase(gen.account.stockitem.SetOpeningBalanceForm.key_Check_Box_Category)) {
                        System.out.println("condition " + condition);
                        System.out.println("condition      " + condition.trim().equalsIgnoreCase("where"));
                        if (condition.trim().equalsIgnoreCase("where")) {
                            condition = condition + " UPPER(tblCategory.category_name) like  UPPER('" + map_Order.get(gen.account.stockitem.SetOpeningBalanceForm.key_Check_Box_Category) + "%')";
                        } else {
                            System.out.println("------------");
                            condition = " and " + condition + " UPPER(tblCategory.category_name)  like   UPPER('" + map_Order.get(gen.account.stockitem.SetOpeningBalanceForm.key_Check_Box_Category) + "%')";
                        }

                    } else if (str.equalsIgnoreCase(gen.account.stockitem.SetOpeningBalanceForm.key_Check_Box_Length)) {

                        if (condition.trim().equalsIgnoreCase("where")) {
                            condition = condition + " tblstockitem.si_length like '" + map_Order.get(gen.account.stockitem.SetOpeningBalanceForm.key_Check_Box_Length) + "%'";
                        } else {
                            condition = condition + " and " + " tblstockitem.si_length like '" + map_Order.get(gen.account.stockitem.SetOpeningBalanceForm.key_Check_Box_Length) + "%'";
                        }

                    } else if (str.equalsIgnoreCase(gen.account.stockitem.SetOpeningBalanceForm.key_Check_Box_Width)) {
                        if (condition.trim().equalsIgnoreCase("where")) {
                            condition = condition + "  tblstockitem.si_width like '" + map_Order.get(gen.account.stockitem.SetOpeningBalanceForm.key_Check_Box_Width) + "%'";
                        } else {
                            condition = condition + " and " + " tblstockitem.si_width like '" + map_Order.get(gen.account.stockitem.SetOpeningBalanceForm.key_Check_Box_Width) + "%'";
                        }

                    } else if (str.equalsIgnoreCase(gen.account.stockitem.SetOpeningBalanceForm.key_Check_Box_Thickness)) {
                        if (condition.trim().equalsIgnoreCase("where")) {
                            condition = condition + " tblstockitem.si_thickness like '" + map_Order.get(gen.account.stockitem.SetOpeningBalanceForm.key_Check_Box_Thickness) + "%'";
                        } else {
                            condition = condition + " and " + " tblstockitem.si_thickness like '" + map_Order.get(gen.account.stockitem.SetOpeningBalanceForm.key_Check_Box_Thickness) + "%'";
                        }

                    } else if (str.equalsIgnoreCase(gen.account.stockitem.SetOpeningBalanceForm.key_Check_Box_Color)) {
                        if (condition.trim().equalsIgnoreCase("where")) {
                            condition = condition + " UPPER(tblcolor.color_name) like UPPER('" + map_Order.get(gen.account.stockitem.SetOpeningBalanceForm.key_Check_Box_Color) + "%')";
                        } else {
                            condition = condition + " and " + " UPPER(tblcolor.color_name) like  UPPER('" + map_Order.get(gen.account.stockitem.SetOpeningBalanceForm.key_Check_Box_Color) + "%')";
                        }

                    } else if (str.equalsIgnoreCase(gen.account.stockitem.SetOpeningBalanceForm.key_Check_Box_FinishType)) {
                        if (condition.trim().equalsIgnoreCase("where")) {
                            condition = condition + " UPPER(tblfinishtype.finishtype_name) like  UPPER('" + map_Order.get(gen.account.stockitem.SetOpeningBalanceForm.key_Check_Box_FinishType) + "%')";
                        } else {
                            condition = condition + " and " + "  UPPER(tblfinishtype.finishtype_name) like  UPPER('" + map_Order.get(gen.account.stockitem.SetOpeningBalanceForm.key_Check_Box_FinishType) + "%')";
                        }

                    } else if (str.equalsIgnoreCase(gen.account.stockitem.SetOpeningBalanceForm.key_Check_Box_Board_Type)) {
                        if (condition.trim().equalsIgnoreCase("where")) {
                            condition = condition + "  UPPER(tbltype.typename)  like  UPPER('" + map_Order.get(gen.account.stockitem.SetOpeningBalanceForm.key_Check_Box_Board_Type) + "%')";
                        } else {
                            condition = condition + " and " + "  UPPER(tbltype.typename)  like   UPPER('" + map_Order.get(gen.account.stockitem.SetOpeningBalanceForm.key_Check_Box_Board_Type) + "%')";
                        }

                    }
                }

                if (order_List.size() > 0) {
                    condition = condition;
                }


                int condition_length = condition.length() + 10;
                for (String str : order_List) {
                    System.out.println("condition_length   --------       " + condition_length);
                    System.out.println("condition.length()   --------       " + condition.length());

                    if (str.equalsIgnoreCase(gen.account.stockitem.SetOpeningBalanceForm.key_Check_Box_Category)) {
                        if (condition.trim().contains(" Order By ") && condition.length() > condition_length) {
                            condition = condition + " , " + " tblCategory.category_name ";
                        } else {
                            System.out.println("------------");
                            condition = condition + " Order By " + " tblCategory.category_name ";
                        }

                    } else if (str.equalsIgnoreCase(gen.account.stockitem.SetOpeningBalanceForm.key_Check_Box_Length)) {

                        if (condition.trim().contains(" Order By ") && condition.length() > condition_length) {
                            condition = condition + " , " + " tblstockitem.si_length ";
                        } else {
                            condition = condition + " Order By " + " tblstockitem.si_length ";
                        }

                    } else if (str.equalsIgnoreCase(gen.account.stockitem.SetOpeningBalanceForm.key_Check_Box_Width)) {
                        if (condition.trim().contains(" Order By ") && condition.length() > condition_length) {
                            condition = condition + " , " + " tblstockitem.si_width ";
                        } else {
                            condition = condition + " Order By " + " tblstockitem.si_width ";
                        }


                    } else if (str.equalsIgnoreCase(gen.account.stockitem.SetOpeningBalanceForm.key_Check_Box_Thickness)) {
                        if (condition.trim().contains(" Order By ") && condition.length() > condition_length) {
                            condition = condition + " , " + " tblstockitem.si_thickness ";
                        } else {
                            condition = condition + " Order By " + " tblstockitem.si_thickness ";
                        }


                    } else if (str.equalsIgnoreCase(gen.account.stockitem.SetOpeningBalanceForm.key_Check_Box_Color)) {
                        if (condition.trim().contains(" Order By ") && condition.length() > condition_length) {
                            condition = condition + " , " + " tblcolor.color_name ";
                        } else {
                            condition = condition + " Order By " + " tblcolor.color_name ";
                        }


                    } else if (str.equalsIgnoreCase(gen.account.stockitem.SetOpeningBalanceForm.key_Check_Box_FinishType)) {
                        if (condition.trim().contains(" Order By ") && condition.length() > condition_length) {
                            condition = condition + " , " + " tblfinishtype.finishtype_name ";
                        } else {
                            condition = condition + " Order By " + " tblfinishtype.finishtype_name ";
                        }


                    } else if (str.equalsIgnoreCase(gen.account.stockitem.SetOpeningBalanceForm.key_Check_Box_Board_Type)) {
                        if (condition.trim().contains(" Order By ") && condition.length() > condition_length) {
                            condition = condition + " , " + " tbltype.typename ";
                        } else {
                            condition = condition + " Order By " + " tbltype.typename ";
                        }

                    }
                }

            }

            String query = "SELECT tblstockitem.si_id,tblstockitem.si_under,tblstockitem.si_name , tblstockitem.si_unitOfMeasure as UOM ,tblstockitem.si_length,tblstockitem.si_width,tblstockitem.si_thickness,tblstockitem.si_openingBalance,tblstockitem.si_categoryid, tblCategory.category_name,tblstockitem.si_colorid,tblcolor.color_name,tblstockitem.si_finishtypeid,tblfinishtype.finishtype_name,tblstockitem.si_typeid,tbltype.typename,tblstockitem.created_date,tblstockitem.modified_date"
                    + " FROM tblstockitem"
                    + " LEFT JOIN tblCategory"
                    + " ON tblstockitem.si_categoryid = tblCategory.category_id"
                    + " LEFT JOIN tblcolor"
                    + " ON tblstockitem.si_colorid = tblcolor.color_id"
                    + " LEFT JOIN tblfinishtype"
                    + " ON tblstockitem.si_finishtypeid = tblfinishtype.f_id"
                    + " LEFT JOIN tbltype"
                    + " ON tblstockitem.si_typeid = tbltype.typeid"
                    + condition;

            System.out.println("query--->>>" + query);

            PreparedStatement preparedStatement = connection.prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                StockItemDTO stockItemDTO = new StockItemDTO();

                stockItemDTO.setName(resultSet.getString("si_name"));

                StockItemCategoryDTO stockItemCategoryDTO = new StockItemCategoryDTO();
                System.out.println("resultSet.getString(si_categoryid)-->>>" + resultSet.getString("si_categoryid"));
                if (resultSet.getString("si_categoryid") != null && resultSet.getString("category_name") != null) {
                    stockItemCategoryDTO.setCategoryID(resultSet.getInt("si_categoryid"));
                    stockItemCategoryDTO.setCategoryName(resultSet.getString("category_name"));
                }

                StockItemColorDTO stockItemColorDTO = new StockItemColorDTO();
                stockItemColorDTO.setColorID(resultSet.getInt("si_colorid"));
                stockItemColorDTO.setColorName(resultSet.getString("color_name"));

                StockItemFinishTypeDTO stockItemFinishTypeDTO = new StockItemFinishTypeDTO();
                stockItemFinishTypeDTO.setFinishTypeID(resultSet.getInt("si_finishtypeid"));
                stockItemFinishTypeDTO.setFinishTypeName(resultSet.getString("finishtype_name"));

                StockItemTypeDTO stockItemTypeDTO = new StockItemTypeDTO();
                stockItemTypeDTO.setTypeID(resultSet.getInt("si_typeid"));
                stockItemTypeDTO.setTypeName(resultSet.getString("typename"));

                System.out.println("resultSet.getString(si_categoryid)-->>>" + resultSet.getString("category_name"));

                System.out.println("Gettingggg type-->>" + stockItemTypeDTO.getTypeID());

                stockItemDTO.setID(Long.parseLong(resultSet.getString("si_id")));
                stockItemDTO.setUnder("" + resultSet.getInt("si_under"));
                stockItemDTO.setUnit("" + resultSet.getInt("UOM"));

                stockItemDTO.setStockItemCategoryDTO(stockItemCategoryDTO);
                stockItemDTO.setLength(resultSet.getDouble("si_length"));
                stockItemDTO.setWidth(resultSet.getDouble("si_width"));
                stockItemDTO.setOpeningBal(resultSet.getDouble("si_openingBalance"));
                stockItemDTO.setStockItemColorDTO(stockItemColorDTO);
                stockItemDTO.setThkness(resultSet.getDouble("si_thickness"));
                stockItemDTO.setStockItemFinishTypeDTO(stockItemFinishTypeDTO);
                stockItemDTO.setStockItemTypeDTO(stockItemTypeDTO);

                SimpleDateFormat f = new SimpleDateFormat("yyyy/MM/dd");
//                Calendar currentDate = Calendar.getInstance();
                String dateNow = f.format(resultSet.getDate("created_date"));

                stockItemDTO.setStockitem_Date(dateNow);

                list.add(stockItemDTO);
            }

        } catch (Exception ex) {
            Logger.getLogger(StockItemFormationDAO.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
        return list;
    }
}
