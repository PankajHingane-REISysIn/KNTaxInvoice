package gen.other.backup;

import gen.database.connection.DatabaseConnection1;
import gen.mainclass.MainClass;
import java.awt.event.KeyEvent;
import java.beans.PropertyVetoException;
import java.io.File;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.UnknownHostException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

//import javax.mail.Message;
//import javax.mail.MessagingException;
//import javax.mail.PasswordAuthentication;
//import javax.mail.Transport;
import org.apache.commons.io.FilenameUtils;

/**
 *
 * @author ABC
 */
public class Backup extends javax.swing.JInternalFrame {

    /**
     * Creates new form Backup
     */
    ResultSet rs, rs1, rs2;
    String q = "";

    public Backup(String s) {
        setClosable(true);
        initComponents();
        this.setTitle(s);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        labelemailBackupdate = new javax.swing.JLabel();
        labelemailbackuptime = new javax.swing.JLabel();
        labeldrivebackupdate = new javax.swing.JLabel();
        labeldrivebackuptime = new javax.swing.JLabel();
        btnEmail = new javax.swing.JButton();
        btnDrive = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        checkEmail = new javax.swing.JCheckBox();
        checkDrive = new javax.swing.JCheckBox();
        btnSave = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        optAlways = new javax.swing.JRadioButton();
        optNever = new javax.swing.JRadioButton();
        optAsk = new javax.swing.JRadioButton();
        txtPath = new javax.swing.JTextField();

        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Kasturi-logo-1.png"))); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel1.setText("Last Email Back Up");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel2.setText("Last Drive Back Up");

        labelemailBackupdate.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        labelemailBackupdate.setText("date");

        labelemailbackuptime.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        labelemailbackuptime.setText("Time");

        labeldrivebackupdate.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        labeldrivebackupdate.setText("date");

        labeldrivebackuptime.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        labeldrivebackuptime.setText("time");

        btnEmail.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnEmail.setText("New Email Backup");
        btnEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmailActionPerformed(evt);
            }
        });
        btnEmail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnEmailKeyPressed(evt);
            }
        });

        btnDrive.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnDrive.setText("New Drive Backup");
        btnDrive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDriveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelemailBackupdate, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labeldrivebackuptime)
                            .addComponent(labelemailbackuptime)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(labeldrivebackupdate)
                        .addGap(150, 150, 150)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(btnEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(btnDrive, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(81, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(labelemailBackupdate, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelemailbackuptime))
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labeldrivebackupdate)
                    .addComponent(jLabel2)
                    .addComponent(labeldrivebackuptime))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEmail)
                    .addComponent(btnDrive))
                .addGap(25, 25, 25)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel3.setText("Backup Setting");

        checkEmail.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        checkEmail.setText("Email Backup On");
        checkEmail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                checkEmailKeyPressed(evt);
            }
        });

        checkDrive.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        checkDrive.setText("Drive Backup On");
        checkDrive.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                checkDriveStateChanged(evt);
            }
        });
        checkDrive.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                checkDriveFocusLost(evt);
            }
        });
        checkDrive.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                checkDriveKeyPressed(evt);
            }
        });

        btnSave.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Backup On Exit"));
        jPanel3.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N

        optAlways.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        optAlways.setText("Always");
        optAlways.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                optAlwaysStateChanged(evt);
            }
        });
        optAlways.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                optAlwaysKeyPressed(evt);
            }
        });

        optNever.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        optNever.setText("Never");
        optNever.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                optNeverStateChanged(evt);
            }
        });
        optNever.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                optNeverKeyPressed(evt);
            }
        });

        optAsk.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        optAsk.setText("Ask");
        optAsk.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                optAskStateChanged(evt);
            }
        });
        optAsk.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                optAskKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(optAlways)
                .addGap(8, 8, 8)
                .addComponent(optNever)
                .addGap(18, 18, 18)
                .addComponent(optAsk)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(optAlways)
                    .addComponent(optNever)
                    .addComponent(optAsk))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        txtPath.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(jLabel3))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(checkEmail)
                                .addGap(47, 47, 47)
                                .addComponent(checkDrive))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(143, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSave)
                .addGap(73, 73, 73)
                .addComponent(btnBack)
                .addGap(158, 158, 158))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkEmail)
                    .addComponent(checkDrive))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnBack))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(53, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        String emaildate = "";
        String drivedate = "";
        String emailtime = "";
        String drivetime = "";
        int flag = 1;
        txtPath.setEnabled(false);

        labelemailBackupdate.setText("");
        labeldrivebackupdate.setText("");
        labelemailbackuptime.setText("");
        labeldrivebackuptime.setText("");
        btnEmail.setMnemonic(KeyEvent.VK_E);
        btnBack.setMnemonic(KeyEvent.VK_B);
        btnSave.setMnemonic(KeyEvent.VK_V);
        btnDrive.setMnemonic(KeyEvent.VK_D);
        Connection conn = null;
        try {
            conn = DatabaseConnection1.GetConnection();
            Statement st = conn.createStatement();
            rs = st.executeQuery("select * from tblbackup");

            if (rs.next()) {
                SimpleDateFormat f = new SimpleDateFormat("dd/MM/yyyy");
                SimpleDateFormat f1 = new SimpleDateFormat("HH:mm:ss");
                if (rs.getDate("email_backup_date") != null) {
                    emaildate = f.format(rs.getDate("email_backup_date"));
                } else {
                    emaildate = "";
                }

                if (rs.getDate("drive_backup_date") != null) {
                    drivedate = f.format(rs.getDate("drive_backup_date"));
                } else {
                    drivedate = "";
                }
                if (rs.getTime("email_backup_time") != null) {
                    emailtime = f1.format(rs.getTime("email_backup_time"));
                } else {
                    emailtime = "";
                }
                if (rs.getTime("drive_backup_time") != null) {
                    drivetime = f1.format(rs.getTime("drive_backup_time"));
                } else {
                    drivetime = "";
                }
                labelemailBackupdate.setText(emaildate);    //shows last email date
                labeldrivebackupdate.setText(drivedate);    //shows last drive date
                labelemailbackuptime.setText(emailtime);    //shows last email time
                labeldrivebackuptime.setText(drivetime);    //shows last drive time
            } else {
                labelemailBackupdate.setText("Email Backup has not be taken");  // first time you take backup
                labeldrivebackupdate.setText("Drive Backup has not be taken");
                labelemailbackuptime.setText("");
                labeldrivebackuptime.setText("");
            }



        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        conn = null;
        try {
            conn = DatabaseConnection1.GetConnection();
            Statement st = conn.createStatement();
            rs1 = st.executeQuery("select * from tblcurrentlogin");    //find current user
            if (rs1.next()) {
                rs2 = st.executeQuery("select * from  tblbackupsetting where username='" + rs1.getString("username") + "'");
                if (rs2.next()) {
                    if (rs2.getInt("email_backup") == 1) {
                        checkEmail.setSelected(true);
                    }
                    if (rs2.getInt("drive_backup") == 1) {
                        checkDrive.setSelected(true);
                        txtPath.setVisible(true);
                        txtPath.setEnabled(false);
                        String dir1 = rs2.getString("drive_backup_path");
                        txtPath.setText(FilenameUtils.separatorsToWindows(dir1));
                        //txtPath.setText(rs2.getString("drive_backup_path"));
                    }


                    if (rs2.getInt("backup_on_exit") == 1) {
                        //System.out.println(rs2.getInt("backup_on_exit"));
                        optAlways.setSelected(true);
                        optNever.setSelected(false);
                        optAsk.setSelected(false);


                    } else if (rs2.getInt("backup_on_exit") == 2) {
                        //System.out.println(rs2.getInt("backup_on_exit"));
                        optNever.setSelected(true);
                        optAsk.setSelected(false);
                        optAlways.setSelected(false);
                    } else if (rs2.getInt("backup_on_exit") == 3) {
                        optAsk.setSelected(true);
                        optAlways.setSelected(false);
                        optNever.setSelected(false);
                    }


                } else {
                    checkEmail.setSelected(false);
                    checkDrive.setSelected(false);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_formInternalFrameOpened

    private void checkEmailKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_checkEmailKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            checkDrive.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            btnBackActionPerformed(null);
        }
}//GEN-LAST:event_checkEmailKeyPressed

    private void checkDriveKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_checkDriveKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (checkDrive.isSelected()) {
                JFileChooser selectfile = new JFileChooser();
                selectfile.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                selectfile.showOpenDialog(this);
                if (selectfile != null) {
                    txtPath.setText(selectfile.getSelectedFile().toString());
                    txtPath.setEnabled(false);
                    String dir1 = txtPath.getText();
                    if (dir1 == null) {
                        //do nothing
                        checkDrive.setSelected(false);
                    } else {
                        //txtPath.setText(FilenameUtils.separatorsToUnix(dir1));
                        txtPath.setText(dir1);
                    }
                } else {
                    checkDrive.setSelected(false);
                }
            }
            optAlways.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            checkEmail.requestFocus();
        }
}//GEN-LAST:event_checkDriveKeyPressed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        Connection conn = null;
        try {
            conn = DatabaseConnection1.GetConnection();
            conn.setAutoCommit(false);
            Statement st = conn.createStatement();
            q = "select * from tblbackupsetting";
            rs = st.executeQuery(q);
            int c1 = 0, c2 = 0, c3 = 0;
            if (checkEmail.isSelected()) {
                c1 = 1;
            } else {
                c1 = 0;
            }

            if (checkDrive.isSelected()) {
                c2 = 1;

            } else {
                c2 = 0;
            }
            if (optAlways.isSelected()) {
                c3 = 1;
            } else if (optNever.isSelected()) {
                c3 = 2;
            } else {
                c3 = 3;
            }
            String p = FilenameUtils.separatorsToUnix(txtPath.getText());
            if (rs.next()) {
                System.out.println("" + txtPath.getText());
                q = "update tblbackupsetting set email_backup=" + c1 + ",drive_backup=" + c2 + ",backup_on_exit=" + c3 + ",drive_backup_path='" + p + "'";
            } else {
                q = "insert into tblbackupsetting(email_backup,drive_backup,backup_on_exit,drive_backup_path) values(" + c1 + "," + c2 + "," + c3 + ",'" + p + "')";
            }
            st.executeUpdate(q);
            conn.commit();
            JOptionPane.showMessageDialog(this, "Settings Saved");
            btnBackActionPerformed(evt);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
}//GEN-LAST:event_btnSaveActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        try {
            MainClass m = new MainClass();
            m.menuselection(5);
            this.setClosed(true);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(this.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_btnBackActionPerformed

    private void btnDriveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDriveActionPerformed

        int flag = 1;
        drivebackup(flag);     //Function for to take Drive backup

    }//GEN-LAST:event_btnDriveActionPerformed

    private void btnEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmailActionPerformed
        int flag = 1;

        sendmail(flag);       //Function for to take Email backup
    }//GEN-LAST:event_btnEmailActionPerformed

    private void btnEmailKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnEmailKeyPressed
    }//GEN-LAST:event_btnEmailKeyPressed

    private void optAlwaysStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_optAlwaysStateChanged
        if (optAlways.isSelected()) {
            optNever.setSelected(false);
            optAsk.setSelected(false);
            //btnSave.setEnabled(true);
        }
//        if (optNever.isSelected() == false && optAsk.isSelected() == false) {
//            optAlways.setSelected(true);
//        }
    }//GEN-LAST:event_optAlwaysStateChanged

    private void optNeverStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_optNeverStateChanged
        if (optNever.isSelected()) {
            optAlways.setSelected(false);
            optAsk.setSelected(false);
            // btnSave.setEnabled(true);
        }
//        if (optAlways.isSelected() == false && optAsk.isSelected() == false) {
//            optNever.setSelected(true);
//        }
    }//GEN-LAST:event_optNeverStateChanged

    private void optAskStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_optAskStateChanged
        if (optAsk.isSelected()) {
            optNever.setSelected(false);
            optAlways.setSelected(false);
            //   btnSave.setEnabled(true);
        }
//        if (optNever.isSelected() == false && optAlways.isSelected() == false) {
//            optAsk.setSelected(true);
//        }
    }//GEN-LAST:event_optAskStateChanged

    private void checkDriveStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_checkDriveStateChanged
    }//GEN-LAST:event_checkDriveStateChanged

    private void checkDriveFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_checkDriveFocusLost
    }//GEN-LAST:event_checkDriveFocusLost

    private void optAlwaysKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_optAlwaysKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            optNever.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            checkDrive.requestFocus();
        }
    }//GEN-LAST:event_optAlwaysKeyPressed

    private void optNeverKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_optNeverKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            optAsk.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            optAlways.requestFocus();
        }
    }//GEN-LAST:event_optNeverKeyPressed

    private void optAskKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_optAskKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnSaveActionPerformed(null);
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            optNever.requestFocus();
        }
    }//GEN-LAST:event_optAskKeyPressed

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        MainClass.setstaticvar();
    }//GEN-LAST:event_formInternalFrameClosed

    /*
     * function isinternetEachable is used for chacking internet connection is
     * available or not. It returns true if connection available and returns false if connection not available.
     */
    public static boolean isInternetReachable() {
        try {
            //make a URL to a known source
            URL url = new URL("http://www.google.com");   //host

            //open a connection to that source
            HttpURLConnection urlConnect = (HttpURLConnection) url.openConnection();

            //trying to retrieve data from the source. If there
            //is no connection, this line will fail
            Object objData = urlConnect.getContent();

        } catch (UnknownHostException e) {

            return false;
        } catch (IOException e) {

            return false;
        }
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDrive;
    public javax.swing.JButton btnEmail;
    private javax.swing.JButton btnSave;
    private javax.swing.JCheckBox checkDrive;
    private javax.swing.JCheckBox checkEmail;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel labeldrivebackupdate;
    private javax.swing.JLabel labeldrivebackuptime;
    private javax.swing.JLabel labelemailBackupdate;
    private javax.swing.JLabel labelemailbackuptime;
    private javax.swing.JRadioButton optAlways;
    private javax.swing.JRadioButton optAsk;
    private javax.swing.JRadioButton optNever;
    private javax.swing.JTextField txtPath;
    // End of variables declaration//GEN-END:variables

    /*
     * Function for to send an e-mail, if flag==1 then email backup otherwise drivebackup
     */
    public void sendmail(int flag) {
        boolean availabel;
        String dir = System.getProperty("user.dir");
        String query;
        String dbName = "aj";                    //Database name
        String dbUser = "root";                // Database user name
        String dbPass = "admin";               //Database Password
        String executeCmd = "";
        ResultSet rs1, rs2;

        Calendar currentDate = Calendar.getInstance();
        SimpleDateFormat f4 = new SimpleDateFormat("dd-MM-yyyy");
        SimpleDateFormat f5 = new SimpleDateFormat("HH.mm.ss");

        String dat1 = f4.format(currentDate.getTime());
        String tim1 = f5.format(currentDate.getTime());
        String filename1 = dat1 + "_" + tim1;
        System.out.println("date and time" + filename1);

        availabel = isInternetReachable();            //check internet Connection available or not
        if (availabel == true) {                     //if available

            try {

                // executeCmd = "C:\\Program Files\\MySQL\\MySQL Server 5.5\\bin\\mysqldump -u " + dbUser + " -p" + dbPass + " " + dbName + " -r " + dir + "/backup.sql";
                executeCmd = "C:\\Program Files\\MySQL\\MySQL Server 5.5\\bin\\mysqldump --xml -u " + dbUser + " -p" + dbPass + " " + dbName + " -r " + dir + "/" + filename1 + ".xml";        //export back up file
                System.out.println("ece" + executeCmd);
                Process runtimeProcess = Runtime.getRuntime().exec(executeCmd);    //execute command
                int processComplete = runtimeProcess.waitFor();
                if (processComplete == 0) //if command executed successfully
                {
                    // System.out.println("Backup taken successfully");
                    String cmd = "C:\\Program Files\\MySQL\\MySQL Server 5.5\\bin\\mysqldump.exe exit";    //exit mysql
                    Runtime rt1 = Runtime.getRuntime();
                    Process proc1 = rt1.exec(cmd);



                    Connection conn = DatabaseConnection1.GetConnection();
                    Statement st = conn.createStatement();
                    Statement st1 = conn.createStatement();
                    rs1 = st.executeQuery("select username from tblcurrentlogin");    //check current user
                    if (rs1.next()) {
                        rs2 = st1.executeQuery("select email_id,email_pass from tbllogin where username='" + rs1.getString("username") + "'");
                        if (rs2.next()) {
                            String email = rs2.getString("email_id");  //get email_id of user
                            String pass = rs2.getString("email_pass"); //get password of email_id
                            SendMail sm = new SendMail(email, pass, filename1);   //call SendMail constructor for sending mail
                        }
                    }




                    rs = st.executeQuery("select * from tblbackup");
                    //Calendar currentDate = Calendar.getInstance();
                    SimpleDateFormat f2 = new SimpleDateFormat("yyyy/MM/dd");
                    SimpleDateFormat f3 = new SimpleDateFormat("HH:mm:ss");

                    String dat = f2.format(currentDate.getTime());
                    String tim = f3.format(currentDate.getTime());

                    //f2.format(dat);
                    if (rs.next()) {

                        query = "update tblbackup set email_backup_date='" + dat + "',email_backup_time='" + tim + "'";  //update backup date and time
                        st.executeUpdate(query);
                        if (flag == 1) {
                            SimpleDateFormat f = new SimpleDateFormat("dd/MM/yyyy");
                            String emaildate = f.format(currentDate.getTime());

                            labelemailBackupdate.setText(emaildate);
                            labelemailbackuptime.setText(tim);
                        }
                    } else {
                        query = "insert into tblbackup(drive_backup_date,drive_backup_time) values('" + dat + "','" + tim + "')";
                        st.executeUpdate(query);
                        if (flag == 1) {
                            SimpleDateFormat f = new SimpleDateFormat("dd/MM/yyyy");
                            labelemailBackupdate.setText("Email Backup has not be taken");
                            labeldrivebackupdate.setText("Drive Backup has not be taken");
                            labelemailbackuptime.setText("");
                            labeldrivebackuptime.setText("");
                            String emaildate = f.format(currentDate.getTime());
                            labelemailBackupdate.setText(emaildate);
                            labelemailbackuptime.setText(tim);
                        }

                    }

                    JOptionPane.showMessageDialog(null, "Backup taken successfully and Email Sent Successfully");
                    String file1 = dir + "/" + filename1 + ".xml";
                    File f = new File(file1);
                    f.delete();                          //delete backup file after sending a mail.
                    System.out.println("file is deleted successfully");

                } else // if command not executed successfully then could not take backup 
                {
                    System.out.println("Could not take mysql backup");
                }

            } catch (Exception e) {
                e.printStackTrace();
            }


        } else {               //if internet connection not available
            JOptionPane.showMessageDialog(null, "Internet Connection not available");
            //System.out.println("Connection not avalible");
        }


    }
    /*
     * drivebackup() function is used for to take backup od database and store a file on drive.
     */

    public void drivebackup(int flag) {
        String dir = System.getProperty("user.dir");
        String query;
        String dbName = "aj";             //database name
        String dbUser = "root";           //database user
        String dbPass = "admin";          //databasepassword
        String executeCmd = "";
        JFileChooser selectfile = new JFileChooser();          //file chooser for select a file
        Calendar currentDate = Calendar.getInstance();
        SimpleDateFormat f4 = new SimpleDateFormat("dd-MM-yyyy");
        SimpleDateFormat f5 = new SimpleDateFormat("HH.mm.ss");

        String dat1 = f4.format(currentDate.getTime());
        String tim1 = f5.format(currentDate.getTime());
        String filename1 = dat1 + "_" + tim1;
        System.out.println("date and time" + filename1);

        selectfile.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);       //select only folder
        int status = selectfile.showOpenDialog(this);       // you can select a folder
        if (status == JFileChooser.APPROVE_OPTION) //if you select folder
        {


            txtPath.setText(selectfile.getSelectedFile().toString());  //copy path of selected file
            txtPath.setEnabled(false);
            String dir1 = txtPath.getText();
            dir1 = FilenameUtils.separatorsToUnix(dir1);   //convert windows file path to unix because \ not work in java we need /

            try {

                // executeCmd = "C:\\Program Files\\MySQL\\MySQL Server 5.5\\bin\\mysqldump -u " + dbUser + " -p" + dbPass + " " + dbName + " -r " + dir1 + "/backup.sql";
                executeCmd = "C:\\Program Files\\MySQL\\MySQL Server 5.5\\bin\\mysqldump --xml -u " + dbUser + " -p" + dbPass + " " + dbName + " -r " + dir1 + "/" + filename1 + ".xml";   //export database
                Process runtimeProcess = Runtime.getRuntime().exec(executeCmd);          //execute command
                int processComplete = runtimeProcess.waitFor();
                if (processComplete == 0) {              // if command executed successfully it returns 0
                    //System.out.println("Backup taken successfully");

                    String cmd = "C:\\Program Files\\MySQL\\MySQL Server 5.5\\bin\\mysqldump.exe exit";   //exit mysql
                    Runtime rt1 = Runtime.getRuntime();
                    Process proc1 = rt1.exec(cmd);

                    Connection conn = DatabaseConnection1.GetConnection();
                    Statement st = conn.createStatement();
                    rs = st.executeQuery("select * from tblbackup");

                    SimpleDateFormat f2 = new SimpleDateFormat("yyyy/MM/dd");
                    SimpleDateFormat f3 = new SimpleDateFormat("HH:mm:ss");

                    String dat = f2.format(currentDate.getTime());
                    String tim = f3.format(currentDate.getTime());
                    //f2.format(dat);
                    if (rs.next()) {

                        query = "update tblbackup set drive_backup_date='" + dat + "',drive_backup_time='" + tim + "'"; //update date and time of backup
                        st.executeUpdate(query);

                        if (flag == 1) {
                            SimpleDateFormat f = new SimpleDateFormat("dd/MM/yyyy");
                            String drivedate = f.format(currentDate.getTime());

                            labeldrivebackupdate.setText(drivedate);  //show last backup time and date
                            labeldrivebackuptime.setText(tim);
                        }

                    } else {


                        query = "insert into tblbackup(drive_backup_date,drive_backup_time) values('" + dat + "','" + tim + "')";
                        st.executeUpdate(query);

                        if (flag == 1) {
                            SimpleDateFormat f = new SimpleDateFormat("dd/MM/yyyy");
                            labelemailBackupdate.setText("Email Backup has not be taken");
                            labeldrivebackupdate.setText("Drive Backup has not be taken");
                            labelemailbackuptime.setText("");
                            labeldrivebackuptime.setText("");
                            String drivedate = f.format(currentDate.getTime());
                            labeldrivebackupdate.setText(drivedate);
                            labeldrivebackuptime.setText(tim);
                        }

                    }

                    JOptionPane.showMessageDialog(null, "Backup taken successfully");
                } else {       //if command not executed successfully then could not take backup
                    System.out.println("Could not take mysql backup");
                }

            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (status == JFileChooser.CANCEL_OPTION) {   //if you not select folder and click on cancel button
            JOptionPane.showMessageDialog(null, "Operation canceled");

        }

    }
}
