/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gen.other.DatabaseSpiliting;

import gen.account.ledger.LedgerAlterFromDetails;
import gen.dto.Constants;
import gen.dto.Util;
import gen.mainclass.MainClass;
import gen.other.CompanySettings.CompanySettingsDAO;
import gen.other.CompanySettings.CompanySettingsDTO;
import gen.other.DatabaseBackupRestore.Company_InformationDTO;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseMotionListener;
import java.beans.PropertyVetoException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author admin
 */
public class DatabaseSpilting extends javax.swing.JInternalFrame {

    // JTextField tfUnderField;
    // List for Total Company
    List<CompanySettingsDTO> company_ListDTO_Database_Splitng = new ArrayList<CompanySettingsDTO>();
    private boolean hide_flag_Database_Splitng = false;
    // Vector Company_List
    // Vector<String> vectorCompanyList = new Vector<String>();
    private JTextField tfDatePicker_Database_Splitng = null;
    DefaultTableModel tablemodelCompany_Database_Splitng;
    private String selected_Company_Name_Database_Splitng = "";
    private String selected_Company_id_Database_Splitng = "";

    /**
     * Creates new form DatabaseSpilting_old
     */
    public DatabaseSpilting(String title) {
        try {
            initComponents();
            initialise_Database_Spliting();
            // setClosable(true);
            //   initcomponent();
            this.setTitle(title);
            // this.setClosed(true);

        } catch (Exception ex) {
            Logger.getLogger(DatabaseSpilting_old.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Panel_Database_Splitng = new javax.swing.JPanel();
        fromJDateChooser_Database_Splitng = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableCompanyList_Database_Splitng = new javax.swing.JTable();
        btnDataSpliting_Database_Splitng = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(500, 500));

        Panel_Database_Splitng.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tableCompanyList_Database_Splitng.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        tableCompanyList_Database_Splitng.getTableHeader().setResizingAllowed(false);
        tableCompanyList_Database_Splitng.getTableHeader().setReorderingAllowed(false);
        tableCompanyList_Database_Splitng.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableCompanyList_Database_SplitngMouseClicked(evt);
            }
        });
        tableCompanyList_Database_Splitng.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableCompanyList_Database_SplitngKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tableCompanyList_Database_Splitng);

        org.openide.awt.Mnemonics.setLocalizedText(btnDataSpliting_Database_Splitng, org.openide.util.NbBundle.getMessage(DatabaseSpilting.class, "DatabaseSpilting.btnDataSpliting_Database_Splitng.text")); // NOI18N
        btnDataSpliting_Database_Splitng.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDataSpliting_Database_SplitngMouseClicked(evt);
            }
        });
        btnDataSpliting_Database_Splitng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDataSpliting_Database_SplitngActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Panel_Database_SplitngLayout = new javax.swing.GroupLayout(Panel_Database_Splitng);
        Panel_Database_Splitng.setLayout(Panel_Database_SplitngLayout);
        Panel_Database_SplitngLayout.setHorizontalGroup(
            Panel_Database_SplitngLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_Database_SplitngLayout.createSequentialGroup()
                .addGroup(Panel_Database_SplitngLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Panel_Database_SplitngLayout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 582, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(Panel_Database_SplitngLayout.createSequentialGroup()
                        .addGap(263, 263, 263)
                        .addComponent(fromJDateChooser_Database_Splitng, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(Panel_Database_SplitngLayout.createSequentialGroup()
                        .addGap(281, 281, 281)
                        .addComponent(btnDataSpliting_Database_Splitng, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(114, Short.MAX_VALUE))
        );
        Panel_Database_SplitngLayout.setVerticalGroup(
            Panel_Database_SplitngLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_Database_SplitngLayout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addComponent(fromJDateChooser_Database_Splitng, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDataSpliting_Database_Splitng)
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(Panel_Database_Splitng, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Panel_Database_Splitng, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(59, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tableCompanyList_Database_SplitngMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableCompanyList_Database_SplitngMouseClicked
        // TODO add your handling code here:

        int selectedCompany_index = tableCompanyList_Database_Splitng.getSelectedRow();
        selected_Company_Name_Database_Splitng = "" + tableCompanyList_Database_Splitng.getValueAt(selectedCompany_index, 0).toString().trim();
        selected_Company_id_Database_Splitng = "" + tableCompanyList_Database_Splitng.getValueAt(selectedCompany_index, 1).toString().trim();

        System.out.println("selectedCompany ------------------------ " + selected_Company_Name_Database_Splitng);
        System.out.println("company_id         ----------------------" + selected_Company_id_Database_Splitng);

    }//GEN-LAST:event_tableCompanyList_Database_SplitngMouseClicked

    private void tableCompanyList_Database_SplitngKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableCompanyList_Database_SplitngKeyPressed
        // TODO add your handling code here:

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            tableCompanyList_Database_SplitngMouseClicked(null);
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            tfDatePicker_Database_Splitng.requestFocus();
            tableCompanyList_Database_Splitng.clearSelection();
        }
    }//GEN-LAST:event_tableCompanyList_Database_SplitngKeyPressed

    private void btnDataSpliting_Database_SplitngActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDataSpliting_Database_SplitngActionPerformed
        // TODO add your handling code here:

        if (validation_Database_Splitng()) {
            String fromDateOpenStr = "";
            if (fromJDateChooser_Database_Splitng.getDate() != null) {
                try {
                    fromDateOpenStr = Constants.simpleDateFormatDatabaseWithDash.format(fromJDateChooser_Database_Splitng.getDate());
                    Calendar c = Calendar.getInstance();
                    c.setTime(Constants.simpleDateFormatDatabaseWithDash.parse(Constants.simpleDateFormatDatabaseWithDash.format(fromJDateChooser_Database_Splitng.getDate())));
                    // number of days to add for calculation opening_Balances
                    c.add(Calendar.DATE, 1);
                    fromDateOpenStr = Constants.simpleDateFormatDatabaseWithDash.format(c.getTime());
                } catch (ParseException ex) {
                    ex.printStackTrace();
                    Logger.getLogger(DatabaseSpilting_old.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            List<String> new_CreateCompanyList = new ArrayList<String>();
            List<Company_InformationDTO> new_databaseCreateList = new ArrayList<Company_InformationDTO>();

            String new_Company_Create = "";

            // StringTokenizer used to remove '-' from Date
            StringTokenizer add_InDatabase_Name = new StringTokenizer(tfDatePicker_Database_Splitng.getText().toString().trim(), "-");
            String date = "";
            String month = "";
            String year = "";
            int count = 0;
            while (add_InDatabase_Name.hasMoreTokens() && count < 3) {
                if (count == 0) {
                    date = add_InDatabase_Name.nextToken();
                } else if (count == 1) {
                    month = add_InDatabase_Name.nextToken();
                } else if (count == 2) {
                    year = add_InDatabase_Name.nextToken();
                }
                count++;
            }

            // make a string to add in Name to Company
            String add_Date_InComapnyName = date + month + year;


//	    int check_Company_Name_count = 0;
//	    for (CompanySettingsDTO companyListDTO : company_ListDTO_Database_Splitng) {
//		if (companyListDTO.getCompany_name().contentEquals(tfUnderField.getText().toString().trim() + add_Date_InComapnyName)) {
//		    // set check_Name_conter = 1 if company is already present
//		    check_Company_Name_count = 1;
//		}
//	    }

            // if check_Name_conter = 0 means company is not already present
//	    if (check_Company_Name_count == 0) {
            try {

                // ADDD date in Name of New Company
                new_Company_Create = selected_Company_Name_Database_Splitng + " from " + add_Date_InComapnyName;

                // Database Name of OLD Company
                String dataBase_OlD_Company = "";
                String company_ID_OlD_Company = "";

                // get the first Word from the company_name to add in database with id
                String[] result = selected_Company_Name_Database_Splitng.split(" ", 2);
                String first_Word = "";
                String rest_Words = "";
                // use st that ArrayIndex of bound problem shuld not occcur if only 1 word is present
                for (int i = 0; i < result.length; i++) {
                    if (i == 0) {
                        first_Word = result[0];
                    } else if (i == 1) {
                        rest_Words = result[1];
                    }
                }
                System.out.println("First: " + first_Word);
                System.out.println("Rest: " + rest_Words);



                for (CompanySettingsDTO company_settings : company_ListDTO_Database_Splitng) {
                    // take Back UP of Database of selected Company List
                    if (selected_Company_Name_Database_Splitng.toString().trim().equals(company_settings.getCompany_name()) && selected_Company_id_Database_Splitng.toString().trim().equals(company_settings.getCompany_id().toString().trim())) {
                        // take Back UP of Database of selected Company having databse NMAe company_settings.getCompany_DatabaseName() and company_settings.getCompany_id()
                        backupDB_Database_Splitng(company_settings.getCompany_DatabaseName(), "root", "adm", "D:\\databasecheck/" + first_Word + company_settings.getCompany_id() + ".sql");
                        dataBase_OlD_Company = company_settings.getCompany_DatabaseName();
                        company_ID_OlD_Company = company_settings.getCompany_id().toString().trim();
                    }
                }

                // add New company Name in new_CreateCompanyList
                new_CreateCompanyList.add(new_Company_Create);

                // find id to ADD in Database Name of New Created Company
                String add_ID_To_NewCompany = gen.other.CompanySettings.CompanySettingsDAO.get_Max_Company_ID();

                // get the first Word from the New_company_name to add in database with id
                String[] result1 = new_Company_Create.split(" ", 2);
                String first_Word1 = "";
                String rest_Words1 = "";
                // use st that ArrayIndex of bound problem shuld not occcur if only 1 word is present
                for (int i = 0; i < result1.length; i++) {
                    if (i == 0) {
                        first_Word1 = result1[0];
                    } else if (i == 1) {
                        rest_Words1 = result1[1];
                    }
                }

                String new_Company_Database = first_Word1 + add_ID_To_NewCompany;
                Company_InformationDTO company_InformationDTO = new Company_InformationDTO();
                // add New company Database Name in company_InformationDTO
                company_InformationDTO.setCompany_Database_Name(new_Company_Database);
                new_databaseCreateList.add(company_InformationDTO);
                // Create New Database for Newly created Company
                gen.other.DatabaseSpiliting.DatabaseSplitingDAO.createNewDatabase(new_databaseCreateList);

                //	String pass_Database_Name = tfUnderField.getText().toString().trim()  +"$"+ add_date;
                // flag to check if restore Database correct or not 
                // if exception occur then flag = false
                Boolean flag = restoreDB_Database_Splitng(new_Company_Database, "root", "adm", "D:\\databasecheck/" + first_Word + company_ID_OlD_Company + ".sql");

                System.out.println("Newl y Created Company ------------------------------");
                // if flag true then add all information in Company_inormation table
                if (flag) {
                    List<CompanySettingsDTO> companySettings_InformationDTOList = new ArrayList<CompanySettingsDTO>();
                    gen.other.DatabaseSpiliting.DatabaseSplitingDAO.insert_NewlyCreated_Company(new_CreateCompanyList, new_Company_Database, selected_Company_Name_Database_Splitng, selected_Company_id_Database_Splitng.toString(), companySettings_InformationDTOList);
                } else {
                    JOptionPane.showMessageDialog(null, "Error in the Datbse Restore");
                }

                System.out.println("Delete path-------------------------");
                // delete the .SQL file 
                Path path = Paths.get("D:\\databasecheck/" + first_Word + company_ID_OlD_Company + ".sql");
                Files.delete(path);

                // delete record from table according to Date
                gen.other.DatabaseSpiliting.DatabaseSplitingDAO.delete_Records(new_Company_Database, fromDateOpenStr);

                initialise_Database_Spliting();

                try {
                    this.setSelected(true);
                    MainClass mainClass = new MainClass();
                    mainClass.menuselection(1);
                    this.setClosed(true);
                } catch (java.beans.PropertyVetoException e) {
                    e.printStackTrace();
                }
                call_Selection_Companies_Database_Splitng();
            } catch (Exception ex) {
                Logger.getLogger(DatabaseSpilting_old.class.getName()).log(Level.SEVERE, null, ex);
            }
            gen.other.DatabaseSpiliting.DatabaseSplitingDAO.delete_Records(null, fromDateOpenStr);

//	    }
        }
    }//GEN-LAST:event_btnDataSpliting_Database_SplitngActionPerformed

    private void btnDataSpliting_Database_SplitngMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDataSpliting_Database_SplitngMouseClicked
        // TODO add your handling code here:
//	if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
//	    btnDataSplitingActionPerformed(null);
//	} else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
//	    tfDatePicker.requestFocus();
//	}
    }//GEN-LAST:event_btnDataSpliting_Database_SplitngMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Panel_Database_Splitng;
    private javax.swing.JButton btnDataSpliting_Database_Splitng;
    private com.toedter.calendar.JDateChooser fromJDateChooser_Database_Splitng;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableCompanyList_Database_Splitng;
    // End of variables declaration//GEN-END:variables

    private void initialise_Database_Spliting() {
        // initialise componenet 
        intilisecomponent_Database_Splitng();
        bindData2GUT_Database_Splitng();
        setnemonic_Database_Splitng();
    }

    // set nemonic
    private void setnemonic_Database_Splitng() {
        btnDataSpliting_Database_Splitng.setMnemonic(KeyEvent.VK_S);
    }

    // initialise componenet 
    private void intilisecomponent_Database_Splitng() {

        tablemodelCompany_Database_Splitng = (DefaultTableModel) tableCompanyList_Database_Splitng.getModel();
        tablemodelCompany_Database_Splitng.setRowCount(0);
        tablemodelCompany_Database_Splitng.setColumnCount(2);


        fromJDateChooser_Database_Splitng.setDateFormatString("dd-MM-yyyy");
        Calendar currentDate = Calendar.getInstance();
        fromJDateChooser_Database_Splitng.setDate(currentDate.getTime());

//	jComboBoxUnder.setEditable(true);
//	tfUnderField = (JTextField) jComboBoxUnder.getEditor().getEditorComponent();
//	tfUnderField.addKeyListener(new KeyAdapter() {
//	    @Override
//	    public void keyTyped(final KeyEvent e) {
//		EventQueue.invokeLater(new Runnable() {
//		    @Override
//		    public void run() {
//			String text = tfUnderField.getText();
//			if (text.length() == 0) {
//			    jComboBoxUnder.hidePopup();
//			   // setGroupLedgerModel(new DefaultComboBoxModel(vectorCompanyList), "");
//			} else {
//			   // DefaultComboBoxModel m = Util.getSuggestedModel(vectorCompanyList, text);
////			    if (m.getSize() == 0 || hide_flag) {
////				jComboBoxUnder.hidePopup();
////				hide_flag = false;
////			    } else {
////				//setAccountLedgetModel(m, text);
////				setGroupLedgerModel(m, text);
////				jComboBoxUnder.showPopup();
////			    }
//			}
//		    }
//		});
//	    }
//	});
//	tfUnderField.addKeyListener(new KeyAdapter() {
//	    @Override
//	    public void keyPressed(final KeyEvent event) {
//		EventQueue.invokeLater(new Runnable() {
//		    @Override
//		    public void run() {
//			if (event.getKeyCode() == KeyEvent.VK_ENTER) {
//			    //setFocus(event);
//			    tfDatePicker.requestFocus();
//			}
//		    }
//		});
//	    }
//	});
//
//	tfUnderField = (JTextField) jComboBoxUnder.getEditor().getEditorComponent();
//	tfUnderField.addFocusListener(new FocusListener() {
//	    @Override
//	    public void focusGained(FocusEvent e) {
//		//throw new UnsupportedOperationException("Not supported yet.");
//		//currentFocusValue = 2;
//		String text = tfUnderField.getText();
//		if (text.length() == 0) {
//		    jComboBoxUnder.hidePopup();
//		   // setGroupLedgerModel(new DefaultComboBoxModel(vectorCompanyList), "");
//		} else {
//		   // DefaultComboBoxModel m = Util.getSuggestedModel(vectorCompanyList, text);
////		    if (m.getSize() == 0 || hide_flag) {
////			jComboBoxUnder.hidePopup();
////			hide_flag = false;
////		    } else {
////			setGroupLedgerModel(m, text);
////			//setAccountLedgetModel(m, text);
////			jComboBoxUnder.showPopup();
////		    }
//		}
//		tfUnderField.selectAll();
//	    }
//
//	    @Override
//	    public void focusLost(FocusEvent e) {
//		// throw new UnsupportedOperationException("Not supported yet.");
//	    }
//	});

        fromJDateChooser_Database_Splitng.setDateFormatString(Constants.DATE_FORMAT_STRING);
        tfDatePicker_Database_Splitng = (JTextField) fromJDateChooser_Database_Splitng.getComponent(1);

        tfDatePicker_Database_Splitng.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                int code = e.getKeyCode();
                if (code == KeyEvent.VK_ENTER) {
                    btnDataSpliting_Database_Splitng.requestFocus();
                }
                if (code == KeyEvent.VK_ESCAPE) {
                    // tfUnderField.requestFocus();
                }
            }
        });

        tfDatePicker_Database_Splitng.addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyTyped(java.awt.event.KeyEvent evt) {
                try {
                    Util.filterCharacter(evt, tfDatePicker_Database_Splitng);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(DatabaseSpilting.this, ex.getMessage());
                }
            }
        });

        tfDatePicker_Database_Splitng.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                // throw new UnsupportedOperationException("Not supported yet.");
                tfDatePicker_Database_Splitng.selectAll();
            }

            @Override
            public void focusLost(FocusEvent e) {
                // throw new UnsupportedOperationException("Not supported yet.");
            }
        });

    }

    // BindToDataToGui
    private void bindData2GUT_Database_Splitng() {
        try {
            bindDataToTableCompany_Database_Splitng();
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseSpilting_old.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // set all Companies to vector
    private void bindDataToTableCompany_Database_Splitng() throws SQLException {
        company_ListDTO_Database_Splitng.clear();
        // set all_company_List to  company_ListDTO_Database_Splitng
        company_ListDTO_Database_Splitng = CompanySettingsDAO.getComapany_List("", "");
        //vectorCompanyList.clear();
        tablemodelCompany_Database_Splitng.setRowCount(0);
        for (CompanySettingsDTO companySettingsDTO : company_ListDTO_Database_Splitng) {
            int row = tablemodelCompany_Database_Splitng.getRowCount() + 1;
            tablemodelCompany_Database_Splitng.setRowCount(row);
            //  Do not add Database
            tableCompanyList_Database_Splitng.setValueAt(companySettingsDTO.getCompany_name(), row - 1, 0);
            tableCompanyList_Database_Splitng.setValueAt(companySettingsDTO.getCompany_id(), row - 1, 1);

        }
        setColumnWidth_Database_Splitng(tableCompanyList_Database_Splitng);

    }

    // Take BackUp
    public static boolean backupDB_Database_Splitng(String dbName, String dbUserName, String dbPassword, String path) {
        Process runtimeProcess;

        String executeCmd = "D:/MetalCopies/10-10-2013uploadcopy/server-Copy(2)/bin/mysqldump -u " + dbUserName + " -p" + dbPassword + " " + dbName + " -r " + path;

        try {
            runtimeProcess = Runtime.getRuntime().exec(executeCmd);
            int processComplete = runtimeProcess.waitFor();

            if (processComplete == 0) {
                System.out.println("Backup created successfully");
                return true;
            } else {
                System.out.println("Could not create the backup");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return false;
    }

    // Restore  DataBase
    public static boolean restoreDB_Database_Splitng(String dbName, String dbUserName, String dbPassword, String source) {
        Boolean flag = false;
        String[] executeCmd = new String[]{"D:/MetalCopies/10-10-2013uploadcopy/server-Copy(2)/bin/mysql", "--user=" + dbUserName, "--password=" + dbPassword, dbName, "-e", "source " + source};
        Process runtimeProcess;
        try {

            runtimeProcess = Runtime.getRuntime().exec(executeCmd);
            int processComplete = runtimeProcess.waitFor();

            if (processComplete == 0) {
                System.out.println("Backup restored successfully");
                flag = true;
            } else {
                System.out.println("Could not restore the backup");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        return flag;
    }

    //validation   
    private Boolean validation_Database_Splitng() {
        Boolean flag = true;

        //validation for company_Name present or not  
        if (selected_Company_Name_Database_Splitng.toString().trim().equals("") || selected_Company_Name_Database_Splitng.toString().trim() == null) {
            //validation for Company Name is valid or not  
            tfDatePicker_Database_Splitng.requestFocus();
            flag = false;
            JOptionPane.showMessageDialog(null, "Select Exits Company");
        }
        if (fromJDateChooser_Database_Splitng.getDate() == null) {
            //validation for date is valid or not  
            tfDatePicker_Database_Splitng.requestFocus();
            flag = false;
            JOptionPane.showMessageDialog(null, "Invalid Date Selection");
        }
        return flag;
    }

    // call Company Selection form after Database spliting is completed
    private void call_Selection_Companies_Database_Splitng() {
        gen.other.CompanySettings.CompanysSettings company_selection = new gen.other.CompanySettings.CompanysSettings("Company Selection");
        try {
            company_selection.setVisible(true);
            company_selection.setSelected(true);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(LedgerAlterFromDetails.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.getParent().add(company_selection);
        this.getParent().setVisible(true);
        Dimension desktopSize = this.getParent().getSize();
        Dimension jInternalFrameSize = company_selection.getSize();
        company_selection.setLocation((desktopSize.width - jInternalFrameSize.width) / 2,
                (desktopSize.height - jInternalFrameSize.height) / 2);
        try {
            company_selection.setSelected(true);
        } catch (java.beans.PropertyVetoException e) {
        }
        BasicInternalFrameUI basicInternalFrameUI = (BasicInternalFrameUI) company_selection.getUI();
        Component north = basicInternalFrameUI.getNorthPane();
        MouseMotionListener[] actions =
                (MouseMotionListener[]) north.getListeners(MouseMotionListener.class);

        for (int i = 0; i < actions.length; i++) {
            north.removeMouseMotionListener(actions[i]);
        }
    }

    private void setColumnWidth_Database_Splitng(JTable passedTable) {
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(JLabel.LEFT);

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);

        passedTable.getColumnModel().getColumn(0).setCellRenderer(rightRenderer);
        passedTable.getColumnModel().getColumn(0).setPreferredWidth(0);
        passedTable.getColumnModel().getColumn(0).setMinWidth(500);
        passedTable.getColumnModel().getColumn(0).setMaxWidth(500);

        passedTable.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        passedTable.getColumnModel().getColumn(1).setPreferredWidth(0);
        passedTable.getColumnModel().getColumn(1).setMinWidth(80);
        passedTable.getColumnModel().getColumn(1).setMaxWidth(80);
    }
//    public static void main(String... agr) {
//	DatabaseSpilting a = new DatabaseSpilting("sadsd");
//	a.setSize(800, 800);
//	a.setVisible(true);
//    }
}
