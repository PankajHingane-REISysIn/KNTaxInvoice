/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gen.other.login;

import AdSuMuDiNetworks.TestEmailSender;
import AdSuMuDiNetworks.TestSMS;
import AdSuMuDiNetworks.TestSMSDTO;
import gen.database.connection.DatabaseConnection1;
import gen.other.AdSuMuDiSettingsOLD.AdSuMuDiSettingsDAO;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author pc5
 */
public class NetworkSettings extends javax.swing.JInternalFrame {

    /**
     * Creates new form NetworkSettings
     */
    String choice = "";
    String SMSchoice = "";
    String EMailchoice = "";
    String stockItemName = "";
    String stockItemQuantity = "";
    String stockItemAmount = "";
    //String enableSMSSending = "";
    //String disableSMSSending = "";
    //String enableSMSSendingWithAsk = "";
    Map<String, String> map_Field_With_ID = new HashMap<String, String>();
    Map<String, String> map_checkBoxValue = new HashMap<String, String>();

    public NetworkSettings(String string) {
        initComponents();
        this.setTitle(string);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jCheckBoxStockItemName = new javax.swing.JCheckBox();
        jCheckBoxQuantity = new javax.swing.JCheckBox();
        jCheckBoxAmount = new javax.swing.JCheckBox();
        jButtonParticularOK = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jCheckBoxEnableSMSSend = new javax.swing.JCheckBox();
        jCheckBoxDisableSMSSend = new javax.swing.JCheckBox();
        jCheckBoxEnableSMSSendWithAsk = new javax.swing.JCheckBox();
        jButtonEnableDisableOK = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jCheckBoxEnableEMail = new javax.swing.JCheckBox();
        jCheckBoxDisableEMail = new javax.swing.JCheckBox();
        jButtonEMailOK = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldSender = new javax.swing.JTextField();
        jPasswordFieldPassword = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        jButtonExit = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldPaginationValue = new javax.swing.JTextField();
        jButtonApply = new javax.swing.JButton();

        setTitle(org.openide.util.NbBundle.getMessage(NetworkSettings.class, "NetworkSettings.title")); // NOI18N
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Kasturi-logo-1.png"))); // NOI18N
        setPreferredSize(new java.awt.Dimension(585, 575));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jPanel2.setPreferredSize(new java.awt.Dimension(220, 220));

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxStockItemName, org.openide.util.NbBundle.getMessage(NetworkSettings.class, "NetworkSettings.jCheckBoxStockItemName.text")); // NOI18N
        jCheckBoxStockItemName.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxStockItemNameItemStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxQuantity, org.openide.util.NbBundle.getMessage(NetworkSettings.class, "NetworkSettings.jCheckBoxQuantity.text")); // NOI18N
        jCheckBoxQuantity.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxQuantityItemStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxAmount, org.openide.util.NbBundle.getMessage(NetworkSettings.class, "NetworkSettings.jCheckBoxAmount.text")); // NOI18N
        jCheckBoxAmount.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxAmountItemStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButtonParticularOK, org.openide.util.NbBundle.getMessage(NetworkSettings.class, "NetworkSettings.jButtonParticularOK.text")); // NOI18N
        jButtonParticularOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonParticularOKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jCheckBoxAmount, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxQuantity, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxStockItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(jButtonParticularOK)))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jCheckBoxStockItemName)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxQuantity)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxAmount)
                .addGap(18, 18, 18)
                .addComponent(jButtonParticularOK)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(NetworkSettings.class, "NetworkSettings.jLabel3.text")); // NOI18N

        jPanel1.setPreferredSize(new java.awt.Dimension(220, 220));

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxEnableSMSSend, org.openide.util.NbBundle.getMessage(NetworkSettings.class, "NetworkSettings.jCheckBoxEnableSMSSend.text")); // NOI18N
        jCheckBoxEnableSMSSend.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBoxEnableSMSSendMouseClicked(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxDisableSMSSend, org.openide.util.NbBundle.getMessage(NetworkSettings.class, "NetworkSettings.jCheckBoxDisableSMSSend.text")); // NOI18N
        jCheckBoxDisableSMSSend.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBoxDisableSMSSendMouseClicked(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxEnableSMSSendWithAsk, org.openide.util.NbBundle.getMessage(NetworkSettings.class, "NetworkSettings.jCheckBoxEnableSMSSendWithAsk.text")); // NOI18N
        jCheckBoxEnableSMSSendWithAsk.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBoxEnableSMSSendWithAskMouseClicked(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButtonEnableDisableOK, org.openide.util.NbBundle.getMessage(NetworkSettings.class, "NetworkSettings.jButtonEnableDisableOK.text")); // NOI18N
        jButtonEnableDisableOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEnableDisableOKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jCheckBoxEnableSMSSendWithAsk, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxDisableSMSSend, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                    .addComponent(jCheckBoxEnableSMSSend, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(31, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonEnableDisableOK)
                .addGap(84, 84, 84))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jCheckBoxEnableSMSSend)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxDisableSMSSend)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxEnableSMSSendWithAsk)
                .addGap(18, 18, 18)
                .addComponent(jButtonEnableDisableOK)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxEnableEMail, org.openide.util.NbBundle.getMessage(NetworkSettings.class, "NetworkSettings.jCheckBoxEnableEMail.text")); // NOI18N
        jCheckBoxEnableEMail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBoxEnableEMailMouseClicked(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxDisableEMail, org.openide.util.NbBundle.getMessage(NetworkSettings.class, "NetworkSettings.jCheckBoxDisableEMail.text")); // NOI18N
        jCheckBoxDisableEMail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBoxDisableEMailMouseClicked(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButtonEMailOK, org.openide.util.NbBundle.getMessage(NetworkSettings.class, "NetworkSettings.jButtonEMailOK.text")); // NOI18N
        jButtonEMailOK.setDoubleBuffered(true);
        jButtonEMailOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEMailOKActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(NetworkSettings.class, "NetworkSettings.jLabel2.text")); // NOI18N

        jTextFieldSender.setText(org.openide.util.NbBundle.getMessage(NetworkSettings.class, "NetworkSettings.jTextFieldSender.text")); // NOI18N

        jPasswordFieldPassword.setText(org.openide.util.NbBundle.getMessage(NetworkSettings.class, "NetworkSettings.jPasswordFieldPassword.text")); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxEnableEMail)
                    .addComponent(jCheckBoxDisableEMail))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldSender, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                    .addComponent(jPasswordFieldPassword))
                .addGap(30, 30, 30))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(107, 107, 107))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(202, 202, 202)
                .addComponent(jButtonEMailOK)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldSender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxEnableEMail))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPasswordFieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxDisableEMail))
                .addGap(18, 18, 18)
                .addComponent(jButtonEMailOK)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(NetworkSettings.class, "NetworkSettings.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButtonExit, org.openide.util.NbBundle.getMessage(NetworkSettings.class, "NetworkSettings.jButtonExit.text")); // NOI18N
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(NetworkSettings.class, "NetworkSettings.jLabel4.text")); // NOI18N

        jTextFieldPaginationValue.setText(org.openide.util.NbBundle.getMessage(NetworkSettings.class, "NetworkSettings.jTextFieldPaginationValue.text")); // NOI18N
        jTextFieldPaginationValue.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldPaginationValueKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(65, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldPaginationValue, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(55, 55, 55))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextFieldPaginationValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(jButtonApply, org.openide.util.NbBundle.getMessage(NetworkSettings.class, "NetworkSettings.jButtonApply.text")); // NOI18N
        jButtonApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonApplyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(236, 236, 236)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(237, 237, 237)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(198, 198, 198)
                        .addComponent(jButtonApply, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(77, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonExit)
                    .addComponent(jButtonApply))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonParticularOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonParticularOKActionPerformed
        // TODO add your handling code here:
        FileWriter writer = null;
        try {
            //String fileName = "C:\\Users\\pc5\\Desktop\\Sudeep IMP FILES\\SystemProperties\\System.properties";
            final String dir = System.getProperty("user.dir");
            String fileName = dir + "\\others\\DataSMSSettings.properties";
            String line = null;
            String oldText = "";
            String oldText1 = "";
            String oldText2 = "";
            String stringValueOfStkItem = "";
            String stringValueOfQuantity = "";
            String stringValueOfAmount = "";

            FileReader fileReader = new FileReader(fileName);

            BufferedReader bufferedReader = new BufferedReader(fileReader);

            while ((line = bufferedReader.readLine()) != null) {
                System.out.println(line);
                if (line.startsWith("S")) {
                    stringValueOfStkItem = line.substring(16, 17);
                    System.out.println("stringValueOfStkItem-->>" + stringValueOfStkItem);
                    oldText += line + "\r\n";
                }
                if (line.startsWith("Q")) {
                    stringValueOfQuantity = line.substring(11, 12);
                    System.out.println("stringValueOfQuantity-->>" + stringValueOfQuantity);
                    oldText1 += line + "\r\n";
                }
                if (line.startsWith("A")) {
                    stringValueOfAmount = line.substring(9, 10);
                    System.out.println("stringValueOfAmount-->>" + stringValueOfAmount);
                    oldText2 += line + "\r\n";
                }
            }
            bufferedReader.close();

            String newText = "";
            if (stockItemName.equalsIgnoreCase("1")) {

                newText = oldText.replaceAll(stringValueOfStkItem, stockItemName);

            } else {

                newText = oldText.replaceAll(stringValueOfStkItem, "0");

            }

            String newText1 = "";
            if (stockItemQuantity.equalsIgnoreCase("1")) {

                newText1 = oldText1.replaceAll(stringValueOfQuantity, stockItemQuantity);

            } else {

                newText1 = oldText1.replaceAll(stringValueOfQuantity, "0");

            }

            String newText2 = "";
            if (stockItemAmount.equalsIgnoreCase("1")) {

                newText2 = oldText2.replaceAll(stringValueOfAmount, stockItemAmount);

            } else {

                newText2 = oldText2.replaceAll(stringValueOfAmount, "0");

            }

            //writer = new FileWriter("C:\\Users\\pc5\\Desktop\\Sudeep IMP FILES\\SystemProperties\\System.properties");
            writer = new FileWriter(fileName);
            writer.write(newText);
            writer.write(newText1);
            writer.write(newText2);
            writer.close();
            JOptionPane.showMessageDialog(this, "Data Sending SMS settings saved");
        } catch (IOException ex) {
            Logger.getLogger(ApplicationsSettings.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                writer.close();
            } catch (IOException ex) {
                Logger.getLogger(ApplicationsSettings.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButtonParticularOKActionPerformed

    private void jButtonEnableDisableOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEnableDisableOKActionPerformed
        // TODO add your handling code here:
        FileWriter writer = null;
        try {
            final String dir = System.getProperty("user.dir");
            String fileName = dir + "\\others\\NetworkSMSSettings.properties";
            String line = null;
            String oldText = "";
            String stringValueOfSMS = "";

            FileReader fileReader = new FileReader(fileName);

            BufferedReader bufferedReader = new BufferedReader(fileReader);

            while ((line = bufferedReader.readLine()) != null) {
                System.out.println(line);
                stringValueOfSMS = line.substring(14, 15);
                System.out.println("SubString-->>" + stringValueOfSMS);
                oldText += line + "\r\n";
            }
            bufferedReader.close();

            String newtext = "";
            if (SMSchoice.equalsIgnoreCase("1")) {
                newtext = oldText.replaceAll(stringValueOfSMS, SMSchoice);
            } else if (SMSchoice.equalsIgnoreCase("2")) {
                newtext = oldText.replaceAll(stringValueOfSMS, SMSchoice);
            } else if (SMSchoice.equalsIgnoreCase("3")) {
                newtext = oldText.replaceAll(stringValueOfSMS, SMSchoice);
            }
            writer = new FileWriter(fileName);
            writer.write(newtext);
            writer.close();
            JOptionPane.showMessageDialog(this, "SMS Network Settings Saved Successfully");
        } catch (IOException ex) {
            Logger.getLogger(ApplicationsSettings.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                writer.close();
            } catch (IOException ex) {
                Logger.getLogger(ApplicationsSettings.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButtonEnableDisableOKActionPerformed

    private void jCheckBoxEnableSMSSendMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBoxEnableSMSSendMouseClicked
        // TODO add your handling code here:
        if (jCheckBoxEnableSMSSend.isSelected()) {

            jCheckBoxDisableSMSSend.setSelected(false);
            jCheckBoxEnableSMSSendWithAsk.setSelected(false);

            SMSchoice = "1";

        }
    }//GEN-LAST:event_jCheckBoxEnableSMSSendMouseClicked

    private void jCheckBoxDisableSMSSendMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBoxDisableSMSSendMouseClicked
        // TODO add your handling code here:
        if (jCheckBoxDisableSMSSend.isSelected()) {

            jCheckBoxEnableSMSSend.setSelected(false);
            jCheckBoxEnableSMSSendWithAsk.setSelected(false);

            SMSchoice = "2";

        }
    }//GEN-LAST:event_jCheckBoxDisableSMSSendMouseClicked

    private void jCheckBoxEnableSMSSendWithAskMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBoxEnableSMSSendWithAskMouseClicked
        // TODO add your handling code here:
        if (jCheckBoxEnableSMSSendWithAsk.isSelected()) {

            jCheckBoxEnableSMSSend.setSelected(false);
            jCheckBoxDisableSMSSend.setSelected(false);

            SMSchoice = "3";

        }
    }//GEN-LAST:event_jCheckBoxEnableSMSSendWithAskMouseClicked

    private void jButtonEMailOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEMailOKActionPerformed
        // TODO add your handling code here:
        FileWriter writer = null;
        try {
            final String dir = System.getProperty("user.dir");
            String fileName = dir + "\\others\\NetworkEMailSettings.properties";
            String line = null;
            String oldText = "";
            String stringValueOfEMail = "";

            FileReader fileReader = new FileReader(fileName);

            BufferedReader bufferedReader = new BufferedReader(fileReader);

            int lineCounter = 1;
            while ((line = bufferedReader.readLine()) != null) {
                if (lineCounter == 1) {
                    System.out.println(line);
                    stringValueOfEMail = line.substring(16, 17);
                    System.out.println("SubString-->>" + stringValueOfEMail);
                    oldText += line + "\r\n";
                }
                lineCounter++;
            }
            bufferedReader.close();

            String newtext = "";
            if (EMailchoice.equalsIgnoreCase("1")) {
                newtext = oldText.replaceAll(stringValueOfEMail, EMailchoice);
            } else {
                newtext = oldText.replaceAll(stringValueOfEMail, "2");
            }
            if (EMailchoice.equalsIgnoreCase("2")) {
                newtext = oldText.replaceAll(stringValueOfEMail, EMailchoice);
            } else {
                newtext = oldText.replaceAll(stringValueOfEMail, "1");
            }
            writer = new FileWriter(fileName);
            writer.write(newtext);
            writer.close();
            //JOptionPane.showMessageDialog(this, "E-Mail Network Settings Saved Successfully");
        } catch (IOException ex) {
            Logger.getLogger(ApplicationsSettings.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                writer.close();
            } catch (IOException ex) {
                Logger.getLogger(ApplicationsSettings.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        FileWriter writerNew = null;
        try {
            final String dir = System.getProperty("user.dir");
            String fileName = dir + "\\others\\NetworkEMailSender.properties";
            String line = null;
            String oldText = "";
            String stringValueOfEMail = "";

            FileReader fileReader = new FileReader(fileName);

            BufferedReader bufferedReader = new BufferedReader(fileReader);

            int lineCounter = 1;
            while ((line = bufferedReader.readLine()) != null) {
                if (lineCounter == 1) {
                    System.out.println(line);
                    oldText += line + "\r\n";
                }
                lineCounter++;
            }
            bufferedReader.close();

            String newtext = "";
            newtext = oldText.replaceAll(oldText, jTextFieldSender.getText());
            writerNew = new FileWriter(fileName);
            writerNew.write(newtext);
            writerNew.close();
            //JOptionPane.showMessageDialog(this, "E-Mail Network Settings Saved Successfully");
        } catch (IOException ex) {
            Logger.getLogger(ApplicationsSettings.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                writerNew.close();
            } catch (IOException ex) {
                Logger.getLogger(ApplicationsSettings.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        FileWriter writerNewPWD = null;
        try {
            final String dir = System.getProperty("user.dir");
            String fileName = dir + "\\others\\NetworkEMailPWD.properties";
            String line = null;
            String oldText = "";
            String stringValueOfEMailPWD = "";

            FileReader fileReader = new FileReader(fileName);

            BufferedReader bufferedReader = new BufferedReader(fileReader);

            int lineCounter = 1;
            while ((line = bufferedReader.readLine()) != null) {
                if (lineCounter == 1) {
                    System.out.println(line);
                    oldText += line + "\r\n";
                }
                lineCounter++;
            }
            bufferedReader.close();

            String newtext = "";
            newtext = oldText.replaceAll(oldText, jPasswordFieldPassword.getText());
            writerNewPWD = new FileWriter(fileName);
            writerNewPWD.write(newtext);
            writerNewPWD.close();
            //JOptionPane.showMessageDialog(this, "E-Mail Network Settings Saved Successfully");
        } catch (IOException ex) {
            Logger.getLogger(ApplicationsSettings.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                writerNewPWD.close();
            } catch (IOException ex) {
                Logger.getLogger(ApplicationsSettings.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        JOptionPane.showMessageDialog(this, "E-Mail Network Settings Saved Successfully");
    }//GEN-LAST:event_jButtonEMailOKActionPerformed

    private void jCheckBoxEnableEMailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBoxEnableEMailMouseClicked
        // TODO add your handling code here:
        jCheckBoxDisableEMail.setSelected(false);
        EMailchoice = "1";
    }//GEN-LAST:event_jCheckBoxEnableEMailMouseClicked

    private void jCheckBoxDisableEMailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBoxDisableEMailMouseClicked
        // TODO add your handling code here:
        jCheckBoxEnableEMail.setSelected(false);
        EMailchoice = "2";
    }//GEN-LAST:event_jCheckBoxDisableEMailMouseClicked

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButtonExitActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        try {
            // TODO add your handling code here:
            set_Value_CheckBox();

            TestSMSDTO testSMSDTO = TestSMS.getSavedSettings();
            String chSMS = TestSMS.loadNetworkSMSSettings();
            String chEmail = TestEmailSender.loadNetworkEMailSettings();

            if (testSMSDTO.getName().equalsIgnoreCase("1")) {

                jCheckBoxStockItemName.setSelected(true);

            }
            if (testSMSDTO.getQuantity().equalsIgnoreCase("1")) {

                jCheckBoxQuantity.setSelected(true);

            }
            if (testSMSDTO.getAmount().equalsIgnoreCase("1")) {

                jCheckBoxAmount.setSelected(true);

            }
            if (chSMS.equalsIgnoreCase("1")) {

                jCheckBoxEnableSMSSend.setSelected(true);

            }
            if (chSMS.equalsIgnoreCase("2")) {

                jCheckBoxDisableSMSSend.setSelected(true);

            }
            if (chSMS.equalsIgnoreCase("3")) {

                jCheckBoxEnableSMSSendWithAsk.setSelected(true);

            }
            if (chEmail.equalsIgnoreCase("1")) {

                jCheckBoxEnableEMail.setSelected(true);

            }
            if (chEmail.equalsIgnoreCase("2")) {

                jCheckBoxDisableEMail.setSelected(true);

            }
            String dir = System.getProperty("user.dir");
            String readLine = "";
            FileReader fileRead = new FileReader(dir + "\\others\\NetworkEMailSender.properties");
            BufferedReader bufferedRead = new BufferedReader(fileRead);

            String readEMail = "";
            int lineCounting = 1;
            while ((readLine = bufferedRead.readLine()) != null) {
                System.out.println("Reading NetworkEMailSettings readLine-->>>" + readLine);
                if (lineCounting == 1) {
                    readEMail = readLine;
                    System.out.println("readEMail---->>" + readEMail);
                }
                lineCounting++;
            }
            bufferedRead.close();
            jTextFieldSender.setText(readEMail);

            FileReader fileReadNew = new FileReader(dir + "\\others\\NetworkEMailPWD.properties");
            BufferedReader bufferedReadNew = new BufferedReader(fileReadNew);

            String readEMailPassword = "";
            int lineCountingCheck = 1;
            while ((readLine = bufferedReadNew.readLine()) != null) {
                System.out.println("Reading NetworkEMailSettings readLine-->>>" + readLine);
                if (lineCountingCheck == 1) {
                    readEMailPassword = readLine;
                    System.out.println("readEMailPassword---->>" + readEMailPassword);
                }
                lineCountingCheck++;
            }
            bufferedReadNew.close();
            jPasswordFieldPassword.setText(readEMailPassword);

        } catch (FileNotFoundException ex) {
            Logger.getLogger(NetworkSettings.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NetworkSettings.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formInternalFrameOpened

    private void jCheckBoxStockItemNameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxStockItemNameItemStateChanged
        // TODO add your handling code here:
        if (jCheckBoxStockItemName.isSelected()) {

            stockItemName = "1";

        } else {

            stockItemName = "0";

        }
    }//GEN-LAST:event_jCheckBoxStockItemNameItemStateChanged

    private void jCheckBoxQuantityItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxQuantityItemStateChanged
        // TODO add your handling code here:
        if (jCheckBoxQuantity.isSelected()) {

            stockItemQuantity = "1";

        } else {

            stockItemQuantity = "0";

        }
    }//GEN-LAST:event_jCheckBoxQuantityItemStateChanged

    private void jCheckBoxAmountItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxAmountItemStateChanged
        // TODO add your handling code here:
        if (jCheckBoxAmount.isSelected()) {

            stockItemAmount = "1";

        } else {

            stockItemAmount = "0";

        }
    }//GEN-LAST:event_jCheckBoxAmountItemStateChanged

    private void jTextFieldPaginationValueKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPaginationValueKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
        int flag = 0;
        String f = jTextFieldPaginationValue.getText().trim();
        int i = 0;
        while (i < f.length()) {
            if (f.charAt(i) == '.') {
                flag = 1;
                break;
            }
            i++;
        }
        if (flag == 1 && c == '.') {
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldPaginationValueKeyTyped

    private void jButtonApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonApplyActionPerformed
        try {
            map_Field_With_ID.clear();
//        if (checkBoxReceiptnoEditable.isSelected()) {
//            map_Field_With_ID.put(gen.other.AdSuMuDiSettings.AdSuMuDiConstant.RECEIPT_SETTINGS, 1);
//        } else {
//            map_Field_With_ID.put(gen.other.AdSuMuDiSettings.AdSuMuDiConstant.RECEIPT_SETTINGS, 0);
//        }
//
//        if (checkBoxAutoInrementVoucherNumber.isSelected()) {
//            map_Field_With_ID.put(gen.other.AdSuMuDiSettings.AdSuMuDiConstant.VOUCHER_NUMBER_SETTING, 1);
//        } else {
//            map_Field_With_ID.put(gen.other.AdSuMuDiSettings.AdSuMuDiConstant.VOUCHER_NUMBER_SETTING, 0);
//        }
            String pagination_Value = "";
            if (jTextFieldPaginationValue.getText().toString().trim().equals("") || Double.parseDouble(jTextFieldPaginationValue.getText().toString().trim()) == 0D) {
//	    pagination_Value = "50";
                JOptionPane.showMessageDialog(this, "Enter Pagination value greater than 0");
                jTextFieldPaginationValue.setText("");
                jTextFieldPaginationValue.requestFocus();
            } else {
                pagination_Value = jTextFieldPaginationValue.getText().toString().trim();
                map_Field_With_ID.put(gen.other.AdSuMuDiSettingsOLD.AdSuMuDiConstant.PAGINATION, pagination_Value);
                AdSuMuDiSettingsDAO.insert_Receipt_Settings(map_Field_With_ID);
                gen.other.AdSuMuDiSettingsOLD.AdSuMuDiConstant.getValuesFromTable();
                JOptionPane.showMessageDialog(this, "Setting SuccessFully Submitted");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
//        set_Value_CheckBox();
    }//GEN-LAST:event_jButtonApplyActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonApply;
    private javax.swing.JButton jButtonEMailOK;
    private javax.swing.JButton jButtonEnableDisableOK;
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonParticularOK;
    private javax.swing.JCheckBox jCheckBoxAmount;
    private javax.swing.JCheckBox jCheckBoxDisableEMail;
    private javax.swing.JCheckBox jCheckBoxDisableSMSSend;
    private javax.swing.JCheckBox jCheckBoxEnableEMail;
    private javax.swing.JCheckBox jCheckBoxEnableSMSSend;
    private javax.swing.JCheckBox jCheckBoxEnableSMSSendWithAsk;
    private javax.swing.JCheckBox jCheckBoxQuantity;
    private javax.swing.JCheckBox jCheckBoxStockItemName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPasswordField jPasswordFieldPassword;
    private javax.swing.JTextField jTextFieldPaginationValue;
    private javax.swing.JTextField jTextFieldSender;
    // End of variables declaration//GEN-END:variables

    private void set_Value_CheckBox() {
        map_checkBoxValue.clear();
        map_checkBoxValue = gen.other.AdSuMuDiSettingsOLD.AdSuMuDiSettingsDAO.getting_CheckBoxValue();
//        if (map_checkBoxValue.get(gen.other.AdSuMuDiSettings.AdSuMuDiConstant.RECEIPT_SETTINGS) == 1) {
//            checkBoxReceiptnoEditable.setSelected(true);
//        } else {
//            checkBoxReceiptnoUNEditable.setSelected(true);
//        }
//        if (map_checkBoxValue.get(gen.other.AdSuMuDiSettings.AdSuMuDiConstant.VOUCHER_NUMBER_SETTING) == 1) {
//            checkBoxAutoInrementVoucherNumber.setSelected(true);
//        } else {
//            checkBoxUserSpecifiedVoucherNumber.setSelected(true);
//        }
        jTextFieldPaginationValue.setText(map_checkBoxValue.get(gen.other.AdSuMuDiSettingsOLD.AdSuMuDiConstant.PAGINATION));

    }
}
