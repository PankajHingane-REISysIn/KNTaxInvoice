/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gen.other.login.User;

import AdSuMuDiProductRegistration.PurchaseLicenceDTO;
import gen.dto.Util;
import gen.mainclass.FeaturesDTO;
import gen.mainclass.UserSettingDTO;
import gen.other.CompanySettings.CompanySettingsDAO;
import gen.other.CompanySettings.CompanySettingsDTO;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.beans.PropertyVetoException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author admin
 */
public class CreateUser extends javax.swing.JInternalFrame {

    DefaultTableModel tablemodel_Company_Available_User_Settings, tablemodel_Company_Selected_User_Settings, tablemodel_User_Details_Settings, tablemodel_AvailableRole_User_Settings, tablemodel_SelectedRole_User_Settings;
    private List<gen.other.CompanySettings.CompanySettingsDTO> companySettingsDTOList_User_Settings = new ArrayList<gen.other.CompanySettings.CompanySettingsDTO>();
    private List<gen.mainclass.UserSettingDTO> user_SettingsDTOList_User_Settings = new ArrayList<gen.mainclass.UserSettingDTO>();
    private boolean hide_flag_User_Settings = false;
    Map<String, String> mapRoleandID = new HashMap<String, String>();
    Vector<String> roleVector = new Vector<String>();
    Boolean flag_For_Component_enable_Disable_User_Settings = true;
    private UserSettingDTO userSettingDTO_Class_Level = new UserSettingDTO();
    private String user_Cliked_For_Update = "";
    private String user_ID_Delete = "";

    /**
     * Creates new form CreateUser
     */
    public CreateUser() {
        initComponents();
        setClosable(true);
        setTitle("Create User");
        intialise_User_Settings();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        createUserPanel1 = new javax.swing.JPanel();
        jLabel58 = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();
        jLabel60 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        txtUser_Name1 = new javax.swing.JTextField();
        txtUser_Password1 = new javax.swing.JPasswordField();
        txtUser_ConfirmPassword1 = new javax.swing.JPasswordField();
        jLabel62 = new javax.swing.JLabel();
        NUButtonCreateUser1 = new javax.swing.JButton();
        NUButtonBack1 = new javax.swing.JButton();
        jLabel63 = new javax.swing.JLabel();
        radio_User_Type_Admin_1 = new javax.swing.JRadioButton();
        radio_User_Type_NormalUser1 = new javax.swing.JRadioButton();
        jLabel64 = new javax.swing.JLabel();
        txtUser_EmailId1 = new javax.swing.JTextField();
        jLabel65 = new javax.swing.JLabel();
        txtUser_Email_Password1 = new javax.swing.JPasswordField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblUser_Available_Company = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane18 = new javax.swing.JScrollPane();
        tblUser_Selected_Company = new javax.swing.JTable();
        jScrollPane19 = new javax.swing.JScrollPane();
        tblUser_Details_for_Admin = new javax.swing.JTable();
        btnNewUser1 = new javax.swing.JButton();
        jScrollPane17 = new javax.swing.JScrollPane();
        tblavailableRole = new javax.swing.JTable();
        jScrollPane20 = new javax.swing.JScrollPane();
        tblselectedRole = new javax.swing.JTable();
        btnDelete = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblApplication_ID = new javax.swing.JLabel();
        lblMobile_Key = new javax.swing.JLabel();
        lblMobile_User_1 = new javax.swing.JLabel();
        lblMobile_User_2 = new javax.swing.JLabel();

        setClosable(true);
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Kasturi-logo-1.png"))); // NOI18N

        createUserPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        createUserPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                createUserPanel1MouseClicked(evt);
            }
        });
        createUserPanel1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                createUserPanel1FocusLost(evt);
            }
        });

        jLabel58.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel58, org.openide.util.NbBundle.getMessage(CreateUser.class, "CreateUser.jLabel58.text")); // NOI18N

        jLabel59.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel59, org.openide.util.NbBundle.getMessage(CreateUser.class, "CreateUser.jLabel59.text")); // NOI18N
        jLabel59.setToolTipText(org.openide.util.NbBundle.getMessage(CreateUser.class, "CreateUser.jLabel59.toolTipText")); // NOI18N

        jLabel60.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel60, org.openide.util.NbBundle.getMessage(CreateUser.class, "CreateUser.jLabel60.text")); // NOI18N

        jLabel61.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel61, org.openide.util.NbBundle.getMessage(CreateUser.class, "CreateUser.jLabel61.text")); // NOI18N

        txtUser_Name1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtUser_Name1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtUser_Name1FocusGained(evt);
            }
        });
        txtUser_Name1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUser_Name1KeyPressed(evt);
            }
        });

        txtUser_Password1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtUser_Password1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtUser_Password1FocusGained(evt);
            }
        });
        txtUser_Password1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUser_Password1KeyPressed(evt);
            }
        });

        txtUser_ConfirmPassword1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtUser_ConfirmPassword1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtUser_ConfirmPassword1FocusGained(evt);
            }
        });
        txtUser_ConfirmPassword1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUser_ConfirmPassword1KeyPressed(evt);
            }
        });

        jLabel62.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel62, org.openide.util.NbBundle.getMessage(CreateUser.class, "CreateUser.jLabel62.text")); // NOI18N

        NUButtonCreateUser1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(NUButtonCreateUser1, org.openide.util.NbBundle.getMessage(CreateUser.class, "CreateUser.NUButtonCreateUser1.text")); // NOI18N
        NUButtonCreateUser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NUButtonCreateUser1ActionPerformed(evt);
            }
        });

        NUButtonBack1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(NUButtonBack1, org.openide.util.NbBundle.getMessage(CreateUser.class, "CreateUser.NUButtonBack1.text")); // NOI18N
        NUButtonBack1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NUButtonBack1ActionPerformed(evt);
            }
        });

        jLabel63.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel63, org.openide.util.NbBundle.getMessage(CreateUser.class, "CreateUser.jLabel63.text")); // NOI18N

        radio_User_Type_Admin_1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(radio_User_Type_Admin_1, org.openide.util.NbBundle.getMessage(CreateUser.class, "CreateUser.radio_User_Type_Admin_1.text")); // NOI18N
        radio_User_Type_Admin_1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                radio_User_Type_Admin_1StateChanged(evt);
            }
        });
        radio_User_Type_Admin_1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                radio_User_Type_Admin_1KeyPressed(evt);
            }
        });

        radio_User_Type_NormalUser1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(radio_User_Type_NormalUser1, org.openide.util.NbBundle.getMessage(CreateUser.class, "CreateUser.radio_User_Type_NormalUser1.text")); // NOI18N
        radio_User_Type_NormalUser1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                radio_User_Type_NormalUser1StateChanged(evt);
            }
        });
        radio_User_Type_NormalUser1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                radio_User_Type_NormalUser1KeyPressed(evt);
            }
        });

        jLabel64.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel64, org.openide.util.NbBundle.getMessage(CreateUser.class, "CreateUser.jLabel64.text")); // NOI18N

        txtUser_EmailId1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtUser_EmailId1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtUser_EmailId1FocusGained(evt);
            }
        });
        txtUser_EmailId1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUser_EmailId1KeyPressed(evt);
            }
        });

        jLabel65.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel65, org.openide.util.NbBundle.getMessage(CreateUser.class, "CreateUser.jLabel65.text")); // NOI18N

        txtUser_Email_Password1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtUser_Email_Password1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUser_Email_Password1KeyPressed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(CreateUser.class, "CreateUser.jLabel7.text")); // NOI18N

        tblUser_Available_Company.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblUser_Available_Company.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblUser_Available_CompanyMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tblUser_Available_Company);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(CreateUser.class, "CreateUser.jLabel8.text")); // NOI18N

        tblUser_Selected_Company.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblUser_Selected_Company.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblUser_Selected_CompanyMouseClicked(evt);
            }
        });
        jScrollPane18.setViewportView(tblUser_Selected_Company);

        tblUser_Details_for_Admin.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblUser_Details_for_Admin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblUser_Details_for_AdminMouseClicked(evt);
            }
        });
        jScrollPane19.setViewportView(tblUser_Details_for_Admin);

        btnNewUser1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnNewUser1, org.openide.util.NbBundle.getMessage(CreateUser.class, "CreateUser.btnNewUser1.text")); // NOI18N
        btnNewUser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewUser1ActionPerformed(evt);
            }
        });

        tblavailableRole.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Available"
            }
        ));
        tblavailableRole.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblavailableRoleMouseClicked(evt);
            }
        });
        jScrollPane17.setViewportView(tblavailableRole);

        tblselectedRole.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Selected Role"
            }
        ));
        tblselectedRole.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblselectedRoleMouseClicked(evt);
            }
        });
        jScrollPane20.setViewportView(tblselectedRole);

        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnDelete, org.openide.util.NbBundle.getMessage(CreateUser.class, "CreateUser.btnDelete.text")); // NOI18N
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(CreateUser.class, "CreateUser.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(CreateUser.class, "CreateUser.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(CreateUser.class, "CreateUser.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(CreateUser.class, "CreateUser.jLabel4.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lblApplication_ID, org.openide.util.NbBundle.getMessage(CreateUser.class, "CreateUser.lblApplication_ID.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lblMobile_Key, org.openide.util.NbBundle.getMessage(CreateUser.class, "CreateUser.lblMobile_Key.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lblMobile_User_1, org.openide.util.NbBundle.getMessage(CreateUser.class, "CreateUser.lblMobile_User_1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lblMobile_User_2, org.openide.util.NbBundle.getMessage(CreateUser.class, "CreateUser.lblMobile_User_2.text")); // NOI18N

        javax.swing.GroupLayout createUserPanel1Layout = new javax.swing.GroupLayout(createUserPanel1);
        createUserPanel1.setLayout(createUserPanel1Layout);
        createUserPanel1Layout.setHorizontalGroup(
            createUserPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createUserPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(createUserPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(createUserPanel1Layout.createSequentialGroup()
                        .addGroup(createUserPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel61)
                            .addComponent(jLabel64))
                        .addGap(48, 48, 48)
                        .addGroup(createUserPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtUser_EmailId1)
                            .addComponent(txtUser_ConfirmPassword1)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, createUserPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(createUserPanel1Layout.createSequentialGroup()
                            .addGroup(createUserPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel59)
                                .addComponent(jLabel60))
                            .addGap(91, 91, 91)
                            .addGroup(createUserPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtUser_Password1, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                                .addComponent(txtUser_Name1)))
                        .addComponent(jLabel63))
                    .addGroup(createUserPanel1Layout.createSequentialGroup()
                        .addGroup(createUserPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel65)
                            .addComponent(jLabel62)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(createUserPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtUser_Email_Password1)
                            .addGroup(createUserPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane20, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(createUserPanel1Layout.createSequentialGroup()
                                .addGroup(createUserPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(createUserPanel1Layout.createSequentialGroup()
                                        .addComponent(radio_User_Type_Admin_1)
                                        .addGap(62, 62, 62)
                                        .addComponent(radio_User_Type_NormalUser1))
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addGroup(createUserPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(createUserPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(createUserPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblMobile_Key, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                    .addComponent(lblApplication_ID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblMobile_User_1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblMobile_User_2, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE))
                .addGap(584, 584, 584))
            .addGroup(createUserPanel1Layout.createSequentialGroup()
                .addGroup(createUserPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(createUserPanel1Layout.createSequentialGroup()
                        .addGap(428, 428, 428)
                        .addComponent(jLabel58, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(createUserPanel1Layout.createSequentialGroup()
                        .addGap(195, 195, 195)
                        .addComponent(NUButtonBack1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(NUButtonCreateUser1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNewUser1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        createUserPanel1Layout.setVerticalGroup(
            createUserPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createUserPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel58)
                .addGroup(createUserPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(createUserPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(createUserPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(createUserPanel1Layout.createSequentialGroup()
                                .addGroup(createUserPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel59)
                                    .addComponent(txtUser_Name1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(createUserPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel60)
                                    .addComponent(txtUser_Password1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(createUserPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtUser_ConfirmPassword1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel61))
                                .addGap(18, 18, 18)
                                .addGroup(createUserPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtUser_EmailId1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel64))
                                .addGap(18, 18, 18)
                                .addGroup(createUserPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtUser_Email_Password1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel65))
                                .addGap(24, 24, 24)
                                .addGroup(createUserPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel62)
                                    .addComponent(jScrollPane17, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                                    .addComponent(jScrollPane20, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                                .addGroup(createUserPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel63)
                                    .addComponent(radio_User_Type_Admin_1)
                                    .addComponent(radio_User_Type_NormalUser1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(createUserPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(createUserPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(createUserPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, 441, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(createUserPanel1Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(createUserPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(lblApplication_ID))
                        .addGap(24, 24, 24)
                        .addGroup(createUserPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(lblMobile_Key))
                        .addGap(18, 18, 18)
                        .addGroup(createUserPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(lblMobile_User_1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(createUserPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(lblMobile_User_2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(createUserPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NUButtonBack1)
                    .addComponent(NUButtonCreateUser1)
                    .addComponent(btnNewUser1)
                    .addComponent(btnDelete))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(createUserPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(createUserPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 60, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtUser_Name1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUser_Name1FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUser_Name1FocusGained

    private void txtUser_Name1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUser_Name1KeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtUser_Password1.requestFocus();
        }
    }//GEN-LAST:event_txtUser_Name1KeyPressed

    private void txtUser_Password1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUser_Password1FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUser_Password1FocusGained

    private void txtUser_Password1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUser_Password1KeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtUser_ConfirmPassword1.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtUser_Name1.requestFocus();
        }
    }//GEN-LAST:event_txtUser_Password1KeyPressed

    private void txtUser_ConfirmPassword1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUser_ConfirmPassword1FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUser_ConfirmPassword1FocusGained

    private void txtUser_ConfirmPassword1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUser_ConfirmPassword1KeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtUser_EmailId1.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtUser_Password1.requestFocus();
        }
    }//GEN-LAST:event_txtUser_ConfirmPassword1KeyPressed

    private void NUButtonCreateUser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NUButtonCreateUser1ActionPerformed
        // TODO add your handling code here:

        /// Add user information in tbluserdetails table

        if (Validation_For_User_Creation()) {
            userSettingDTO_Class_Level = bindGUItoDTO();
            System.out.println("userSettingDTO_Class_Level =========================== " + userSettingDTO_Class_Level.getUser_id());
            List<UserSettingDTO> userSettingDTOList = new ArrayList<UserSettingDTO>();
            userSettingDTOList.add(userSettingDTO_Class_Level);

            // insert into table user id to company in table tblusertocompany
            List<CompanySettingsDTO> companySettingsDTOList13454 = new ArrayList<CompanySettingsDTO>();

            for (int i = 0; i < tblUser_Selected_Company.getRowCount(); i++) {
                CompanySettingsDTO companySettingsDTO1 = new CompanySettingsDTO();
                companySettingsDTO1.setCompany_name(tblUser_Selected_Company.getValueAt(i, 0).toString().trim());
                companySettingsDTO1.setCompany_id(Long.parseLong(tblUser_Selected_Company.getValueAt(i, 1).toString().trim()));
                companySettingsDTOList13454.add(companySettingsDTO1);
            }
            if (flag_For_Component_enable_Disable_User_Settings) {
                System.out.println("Insert ====================================================");
                gen.mainclass.UserSettingDAO.insertUserSetting(userSettingDTOList);
                gen.mainclass.UserSettingDAO.insertUserRoles(userSettingDTOList);
                gen.mainclass.UserSettingDAO.insertUsertoCompany(companySettingsDTOList13454, "");
            } else {
                System.out.println("UPDATE ====================================================");
                gen.mainclass.UserSettingDAO.updateUserSetting_By_Admin(userSettingDTOList);
                gen.mainclass.UserSettingDAO.insertUsertoCompany(companySettingsDTOList13454, userSettingDTO_Class_Level.getUser_id());
                gen.mainclass.UserSettingDAO.insertUserRoles(userSettingDTOList);
            }
            user_ID_Delete = "";
            JOptionPane.showMessageDialog(CreateUser.this, "User Information Submitted");
            intialise_User_Settings();
        }
    }//GEN-LAST:event_NUButtonCreateUser1ActionPerformed

    private void NUButtonBack1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NUButtonBack1ActionPerformed
        try {
            // TODO add your handling code here:

            this.setClosed(true);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(CreateUser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_NUButtonBack1ActionPerformed

    private void radio_User_Type_Admin_1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_radio_User_Type_Admin_1StateChanged
        // TODO add your handling code here:
        if (radio_User_Type_Admin_1.isSelected()) {
            radio_User_Type_NormalUser1.setSelected(false);
        }
        if (radio_User_Type_NormalUser1.isSelected() == false) {
            radio_User_Type_Admin_1.setSelected(true);
        }
    }//GEN-LAST:event_radio_User_Type_Admin_1StateChanged

    private void radio_User_Type_Admin_1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_radio_User_Type_Admin_1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_radio_User_Type_Admin_1KeyPressed

    private void radio_User_Type_NormalUser1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_radio_User_Type_NormalUser1StateChanged
        // TODO add your handling code here:
        if (radio_User_Type_NormalUser1.isSelected()) {
            radio_User_Type_Admin_1.setSelected(false);
        }
        if (radio_User_Type_Admin_1.isSelected() == false) {
            radio_User_Type_NormalUser1.setSelected(true);
        }
    }//GEN-LAST:event_radio_User_Type_NormalUser1StateChanged

    private void radio_User_Type_NormalUser1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_radio_User_Type_NormalUser1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_radio_User_Type_NormalUser1KeyPressed

    private void txtUser_EmailId1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUser_EmailId1FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUser_EmailId1FocusGained

    private void txtUser_EmailId1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUser_EmailId1KeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtUser_Email_Password1.requestFocus();
        }
    }//GEN-LAST:event_txtUser_EmailId1KeyPressed

    private void txtUser_Email_Password1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUser_Email_Password1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUser_Email_Password1KeyPressed

    private void tblUser_Available_CompanyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblUser_Available_CompanyMouseClicked
        // TODO add your handling code here:

        int selectedCompany_index = tblUser_Available_Company.getSelectedRow();
        // selected company_Name
        String selectedCompany_Name = tblUser_Available_Company.getValueAt(selectedCompany_index, 0).toString();
        // selected company_ID
        String selectedCompany_ID = tblUser_Available_Company.getValueAt(selectedCompany_index, 1).toString();

        // check if table selected company is already present or not
        // if not then ADD
        Boolean flag_Row_present_Or_Not = true;
        if (tblUser_Selected_Company.getRowCount() > 0) {
            for (int i = 0; i < tblUser_Selected_Company.getRowCount(); i++) {
                if (selectedCompany_Name.equals(tblUser_Selected_Company.getValueAt(i, 0).toString()) && selectedCompany_ID.equals(tblUser_Selected_Company.getValueAt(i, 1).toString())) {
                    flag_Row_present_Or_Not = false;
                    break;
                }
            }
        }

        if (flag_Row_present_Or_Not) {
            // selected row must be greater than 0
            if (tblUser_Available_Company.getSelectedRow() >= 0) {
                // getRowCount row must be greater than 0
                if (tblUser_Available_Company.getRowCount() > 0) {
                    // find selected row from tableCompanyList
                    for (int i = 0; i < tblUser_Available_Company.getRowCount(); i++) {
                        // selected row
                        if (tblUser_Available_Company.isRowSelected(i)) {
                            // move data of selected row from tableCompanyList to tableCompanyRestoreUp
                            tablemodel_Company_Selected_User_Settings.setRowCount(tblUser_Selected_Company.getRowCount() + 1);
                            tblUser_Selected_Company.setValueAt(selectedCompany_Name, tablemodel_Company_Selected_User_Settings.getRowCount() - 1, 0);
                            tblUser_Selected_Company.setValueAt(selectedCompany_ID, tablemodel_Company_Selected_User_Settings.getRowCount() - 1, 1);
                            // remove row from table tableCompanyList
                            tablemodel_Company_Available_User_Settings.removeRow(i);
                            // decrease value of i(row) as one row removed
                            i--;
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_tblUser_Available_CompanyMouseClicked

    private void tblUser_Selected_CompanyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblUser_Selected_CompanyMouseClicked
        // TODO add your handling code here:
        int selectedCompany_index = tblUser_Selected_Company.getSelectedRow();

        // selected company_Name
        String selectedCompany_Name = "" + tblUser_Selected_Company.getValueAt(selectedCompany_index, 0);
        // selected company_ID
        String selectedCompany_ID = "" + tblUser_Selected_Company.getValueAt(selectedCompany_index, 1);

        // selected row must be greater than 0
        if (tblUser_Selected_Company.getSelectedRow() >= 0) {
            // getRowCount row must be greater than 0
            if (tblUser_Selected_Company.getRowCount() > 0) {
                // find selected row from tableCompanyList
                for (int i = 0; i < tblUser_Selected_Company.getRowCount(); i++) {
                    // selected row
                    if (tblUser_Selected_Company.isRowSelected(i)) {
                        // move data of selected row from tableCompanyList to tableCompanyRestoreUp
                        tablemodel_Company_Available_User_Settings.setRowCount(tblUser_Available_Company.getRowCount() + 1);
                        tblUser_Available_Company.setValueAt(selectedCompany_Name, tablemodel_Company_Available_User_Settings.getRowCount() - 1, 0);
                        tblUser_Available_Company.setValueAt(selectedCompany_ID, tablemodel_Company_Available_User_Settings.getRowCount() - 1, 1);
                        // remove row from table tableCompanyList
                        tablemodel_Company_Selected_User_Settings.removeRow(i);
                        // decrease value of i(row) as one row removed
                        i--;
                    }
                }
            }
        }
    }//GEN-LAST:event_tblUser_Selected_CompanyMouseClicked

    private void tblUser_Details_for_AdminMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblUser_Details_for_AdminMouseClicked
        // TODO add your handling code here:

        // for diasble unnecessary Field
        flag_For_Component_enable_Disable_User_Settings = false;
        setDisable_Component_User_Setting();
        bindDTOTOGUI_User_Settings();
    }//GEN-LAST:event_tblUser_Details_for_AdminMouseClicked

    private void btnNewUser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewUser1ActionPerformed
        // TODO add your handling code here:
        flag_For_Component_enable_Disable_User_Settings = true;
        setEnable_Component_User_Settings();
        //claerfield_User_Settings();
        intialise_User_Settings();
        txtUser_Name1.requestFocus();
        user_ID_Delete = "";
    }//GEN-LAST:event_btnNewUser1ActionPerformed

    private void tblavailableRoleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblavailableRoleMouseClicked
        // TODO add your handling code here:

        int selectedCompany_index = tblavailableRole.getSelectedRow();
        // selected company_Name
        String selectedCompany_Name = tblavailableRole.getValueAt(selectedCompany_index, 0).toString();
        // selected company_ID

        // check if table selected company is already present or not
        // if not then ADD
        Boolean flag_Row_present_Or_Not = true;
        if (tblselectedRole.getRowCount() > 0) {
            for (int i = 0; i < tblselectedRole.getRowCount(); i++) {
                if (selectedCompany_Name.equals(tblselectedRole.getValueAt(i, 0).toString())) {
                    flag_Row_present_Or_Not = false;
                    break;
                }
            }
        }

        if (flag_Row_present_Or_Not) {
            // selected row must be greater than 0
            if (tblavailableRole.getSelectedRow() >= 0) {
                // getRowCount row must be greater than 0
                if (tblavailableRole.getRowCount() > 0) {
                    // find selected row from tableCompanyList
                    for (int i = 0; i < tblavailableRole.getRowCount(); i++) {
                        // selected row
                        if (tblavailableRole.isRowSelected(i)) {
                            // move data of selected row from tableCompanyList to tableCompanyRestoreUp
                            tablemodel_SelectedRole_User_Settings.setRowCount(tablemodel_SelectedRole_User_Settings.getRowCount() + 1);
                            tablemodel_SelectedRole_User_Settings.setValueAt(selectedCompany_Name, tablemodel_SelectedRole_User_Settings.getRowCount() - 1, 0);
                            // remove row from table tableCompanyList
                            tablemodel_AvailableRole_User_Settings.removeRow(i);
                            // decrease value of i(row) as one row removed
                            i--;
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_tblavailableRoleMouseClicked

    private void tblselectedRoleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblselectedRoleMouseClicked

        int selectedCompany_index = tblselectedRole.getSelectedRow();

        // selected company_Name
        String selectedCompany_Name = tblselectedRole.getValueAt(selectedCompany_index, 0).toString();
        // selected company_ID

        // selected row must be greater than 0
        if (tblselectedRole.getSelectedRow() >= 0) {
            // getRowCount row must be greater than 0
            if (tblselectedRole.getRowCount() > 0) {
                // find selected row from tableCompanyList
                for (int i = 0; i < tblselectedRole.getRowCount(); i++) {
                    // selected row
                    if (tblselectedRole.isRowSelected(i)) {
                        // move data of selected row from tableCompanyList to tableCompanyRestoreUp
                        tablemodel_AvailableRole_User_Settings.setRowCount(tablemodel_AvailableRole_User_Settings.getRowCount() + 1);
                        tablemodel_AvailableRole_User_Settings.setValueAt(selectedCompany_Name, tablemodel_AvailableRole_User_Settings.getRowCount() - 1, 0);
                        // remove row from table tableCompanyList
                        tablemodel_SelectedRole_User_Settings.removeRow(i);
                        // decrease value of i(row) as one row removed
                        i--;
                    }
                }
            }
        }
    }//GEN-LAST:event_tblselectedRoleMouseClicked

    private void createUserPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createUserPanel1MouseClicked
        // TODO add your handling code here:

        //Dont remove as mouse clicked Activated of Internal so dont remove this Event

        System.out.println("Panel --------- mouse clicked ---------------------------------");
    }//GEN-LAST:event_createUserPanel1MouseClicked

    private void createUserPanel1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_createUserPanel1FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_createUserPanel1FocusLost

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        if (flag_For_Component_enable_Disable_User_Settings == false && !user_ID_Delete.toString().trim().equals("")) {

            System.out.println("TRRRRRRRRRRRRR " + user_ID_Delete);
            List<UserSettingDTO> userSettingList = new ArrayList<UserSettingDTO>();
            UserSettingDTO userSettingDTO = new UserSettingDTO();
            userSettingDTO.setUser_id(user_ID_Delete);
            userSettingList.add(userSettingDTO);
            gen.mainclass.UserSettingDAO.Delete_Users(userSettingList);
            user_ID_Delete = "";
            JOptionPane.showMessageDialog(CreateUser.this, "Selected User Deleted");
            intialise_User_Settings();
        }

    }//GEN-LAST:event_btnDeleteActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton NUButtonBack1;
    private javax.swing.JButton NUButtonCreateUser1;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnNewUser1;
    private javax.swing.JPanel createUserPanel1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane20;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblApplication_ID;
    private javax.swing.JLabel lblMobile_Key;
    private javax.swing.JLabel lblMobile_User_1;
    private javax.swing.JLabel lblMobile_User_2;
    private javax.swing.JRadioButton radio_User_Type_Admin_1;
    private javax.swing.JRadioButton radio_User_Type_NormalUser1;
    private javax.swing.JTable tblUser_Available_Company;
    private javax.swing.JTable tblUser_Details_for_Admin;
    private javax.swing.JTable tblUser_Selected_Company;
    private javax.swing.JTable tblavailableRole;
    private javax.swing.JTable tblselectedRole;
    private javax.swing.JPasswordField txtUser_ConfirmPassword1;
    private javax.swing.JTextField txtUser_EmailId1;
    private javax.swing.JPasswordField txtUser_Email_Password1;
    private javax.swing.JTextField txtUser_Name1;
    private javax.swing.JPasswordField txtUser_Password1;
    // End of variables declaration//GEN-END:variables

    private void intialise_User_Settings() {
        initilizeGUIComponents_User_Settings();
        setnemonic_User_Settings();
        lblApplication_ID.setVisible(false);
        jLabel1.setVisible(false);
    }

    private void initilizeGUIComponents_User_Settings() {
        initComponentActiveInActive_User_Settings();
        bindDTOTOUser_Details_table();
        bindDTOTOLicence_Details();
        intilise_DATA_User_Settings();
        claerfield_User_Settings();
        setEnable_Component_User_Settings();
    }

    private void initComponentActiveInActive_User_Settings() {

        flag_For_Component_enable_Disable_User_Settings = true;
        String col[] = {"CompanyName", ""};
        String data[][] = {{"", ""}};
        tablemodel_Company_Available_User_Settings = new DefaultTableModel(data, col) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;//This causes all cells to be not editable
            }
        };
        tblUser_Available_Company.setModel(tablemodel_Company_Available_User_Settings);
        JTableHeader header = tblUser_Available_Company.getTableHeader();
        header.setBackground(Color.yellow);
        tablemodel_Company_Available_User_Settings.setRowCount(0);
        tablemodel_Company_Available_User_Settings.setColumnCount(2);


        String col_for_Selected_Companies[] = {"CompanyName", ""};
        String data_for_Selected_Companies[][] = {{"", ""}};
        tablemodel_Company_Selected_User_Settings = new DefaultTableModel(data_for_Selected_Companies, col_for_Selected_Companies) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;//This causes all cells to be not editable
            }
        };
        tblUser_Selected_Company.setModel(tablemodel_Company_Selected_User_Settings);
        JTableHeader header1 = tblUser_Selected_Company.getTableHeader();
        header1.setBackground(Color.yellow);
        tablemodel_Company_Selected_User_Settings.setRowCount(0);
        tablemodel_Company_Selected_User_Settings.setColumnCount(2);
        setColumnWidth_Users_Settings(tblUser_Available_Company);
        setColumnWidth_Users_Settings(tblUser_Selected_Company);


        String col_for_User_details[] = {"User Name"};
        String data_for_User_details[][] = {{""}};
        tablemodel_User_Details_Settings = new DefaultTableModel(data_for_User_details, col_for_User_details) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;//This causes all cells to be not editable
            }
        };
        tblUser_Details_for_Admin.setModel(tablemodel_User_Details_Settings);
        JTableHeader header_for_User_details = tblUser_Details_for_Admin.getTableHeader();
        header_for_User_details.setBackground(Color.yellow);
        tablemodel_User_Details_Settings.setRowCount(0);
        tablemodel_User_Details_Settings.setColumnCount(1);
        //setColumnWidth_Users_Settings(tblUser_Details_for_Admin);


        String col_for_Role_Available[] = {"Avaliable Role"};
        String data_for_Role_Available[][] = {{""}};
        tablemodel_AvailableRole_User_Settings = new DefaultTableModel(data_for_Role_Available, col_for_Role_Available) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;//This causes all cells to be not editable
            }
        };
        tblavailableRole.setModel(tablemodel_AvailableRole_User_Settings);
        JTableHeader header_for_available_role = tblavailableRole.getTableHeader();
        header_for_available_role.setBackground(Color.yellow);
        tablemodel_AvailableRole_User_Settings.setRowCount(0);
        tablemodel_AvailableRole_User_Settings.setColumnCount(1);
        //setColumnWidth_Roles_Users_Settings(tblavailableRole);


        String col_for_Role_Selected[] = {"Selected Role"};
        String data_for_Role_Selected[][] = {{""}};
        tablemodel_SelectedRole_User_Settings = new DefaultTableModel(data_for_Role_Selected, col_for_Role_Selected) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;//This causes all cells to be not editable
            }
        };
        tblselectedRole.setModel(tablemodel_SelectedRole_User_Settings);
        JTableHeader header_for_Selected_role = tblselectedRole.getTableHeader();
        header_for_Selected_role.setBackground(Color.yellow);
        tablemodel_SelectedRole_User_Settings.setRowCount(0);
        tablemodel_SelectedRole_User_Settings.setColumnCount(1);
        //setColumnWidth_Roles_Users_Settings(tblselectedRole);
    }

    private void setnemonic_User_Settings() {
        NUButtonCreateUser1.setMnemonic(KeyEvent.VK_C);
        NUButtonBack1.setMnemonic(KeyEvent.VK_B);
    }

    private void bindDTOTOLicence_Details() {
        try {
            // ADD into Table User Deatils

//	    PurchaseLicenceDTO purchaseLicenceDTO = AdSuMuDiProductRegistration.PurchaseLicenceDAO.get_Licence_Information();
//	    
////	    lblApplication_ID.setText(purchaseLicenceDTO.getApplication_ID());
//	    lblMobile_Key.setText(purchaseLicenceDTO.getMobile_key());
//	    lblMobile_User_1.setText(purchaseLicenceDTO.getMobile_User_1());
//	    lblMobile_User_2.setText(purchaseLicenceDTO.getMobile_User_2());
            List<PurchaseLicenceDTO> purchaseLicenceDTO = AdSuMuDiProductRegistration.PurchaseLicenceDAO.get_Licence_Information();

//	    lblApplication_ID.setText(purchaseLicenceDTO.getApplication_ID());
            for (PurchaseLicenceDTO purchaseLicenceDTOi : purchaseLicenceDTO) {
                lblMobile_Key.setText(purchaseLicenceDTOi.getMobile_key());
                lblMobile_User_1.setText(purchaseLicenceDTOi.getMobile_User_1());
                lblMobile_User_2.setText(purchaseLicenceDTOi.getMobile_User_2());
            }

        } catch (Exception ex) {
            ex.printStackTrace();
            Logger
                    .getLogger(CreateUser.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void intilise_DATA_User_Settings() {
        try {
            initRole();
            // ADD into Table Available Company
            companySettingsDTOList_User_Settings = CompanySettingsDAO.getComapany_List("", "");
            tablemodel_Company_Available_User_Settings.setRowCount(0);
            for (CompanySettingsDTO companySettingsDTO : companySettingsDTOList_User_Settings) {
                System.out.println("tablemodel_Company_Available_User_Settings ------------------ ");
                tablemodel_Company_Available_User_Settings.setRowCount(tablemodel_Company_Available_User_Settings.getRowCount() + 1);
                tablemodel_Company_Available_User_Settings.setValueAt(companySettingsDTO.getCompany_name(), tablemodel_Company_Available_User_Settings.getRowCount() - 1, 0);
                tablemodel_Company_Available_User_Settings.setValueAt(companySettingsDTO.getCompany_id(), tablemodel_Company_Available_User_Settings.getRowCount() - 1, 1);
            }


            mapRoleandID.clear();
            mapRoleandID = gen.mainclass.UserSettingDAO.get_Role_ID("", "");
            roleVector.clear();
            tablemodel_AvailableRole_User_Settings.setRowCount(0);
            for (String str : mapRoleandID.keySet()) {
                if (!"Admin".equals(str)) {
                    roleVector.add(str);
                    tablemodel_AvailableRole_User_Settings.setRowCount(tablemodel_AvailableRole_User_Settings.getRowCount() + 1);
                    tablemodel_AvailableRole_User_Settings.setValueAt(str, tablemodel_AvailableRole_User_Settings.getRowCount() - 1, 0);
                }
            }
            mapRoleandID = Util.getSmallCaseMap(mapRoleandID);

        } catch (SQLException ex) {
            ex.printStackTrace();
            Logger.getLogger(CreateUser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private UserSettingDTO bindGUItoDTO() {
        UserSettingDTO userSettingDTO = new UserSettingDTO();
        userSettingDTO.setUser_id(userSettingDTO_Class_Level.getUser_id());
        userSettingDTO.setUser_Name(txtUser_Name1.getText().toString().trim());
        userSettingDTO.setUser_Password(txtUser_Password1.getText().toString().trim());
        userSettingDTO.setUser_Email_ID(txtUser_EmailId1.getText().toString().trim());
        userSettingDTO.setUser_Email_Password(txtUser_Email_Password1.getText().toString().trim());

        String choosen_Role = "";

//	int role_id = 0;
//	role_id = Integer.parseInt(mapRoleandID.get(tf_Role_User_Settings.getText().toString().trim().toLowerCase()));

        List<FeaturesDTO> featuresDTOList = new ArrayList<FeaturesDTO>();
        for (int i = 0; i < tblselectedRole.getRowCount(); i++) {
            FeaturesDTO featuresDTO = new FeaturesDTO();

            String role = tblselectedRole.getValueAt(i, 0).toString().trim().toLowerCase();
            int role_id = 0;
            role_id = Integer.parseInt(mapRoleandID.get(role));

            featuresDTO.setRoleID("" + role_id);
            featuresDTO.setRole_Name(role);
            featuresDTOList.add(featuresDTO);
        }
        userSettingDTO.setFeaturesDTOList(featuresDTOList);

//	if (choosen_Role.equalsIgnoreCase("Standard")) {
//	    role_id = 2;
//	} else if (choosen_Role.equalsIgnoreCase("Reports")) {
//	    role_id = 3;
//	} else if (choosen_Role.equalsIgnoreCase("AccountVoucher")) {
//	    role_id = 4;
//	} else if (choosen_Role.equalsIgnoreCase("Group")) {
//	    role_id = 5;
//	} else if (choosen_Role.equalsIgnoreCase("StockItem")) {
//	    role_id = 6;
//	}


        //userSettingDTO.setUser_Role(role_id);

        int user_Type = 0;
        if (radio_User_Type_Admin_1.isSelected()) {
            user_Type = 1;
        } else if (radio_User_Type_NormalUser1.isSelected()) {
            user_Type = 2;
        }
        userSettingDTO.setUser_Type(user_Type);
        return userSettingDTO;
    }

    private void bindDTOTOGUI_User_Settings() {

        try {
            int selectet_Row = tblUser_Details_for_Admin.getSelectedRow();

            if (selectet_Row > -1) {
                String user_Name = tblUser_Details_for_Admin.getValueAt(selectet_Row, 0).toString().trim();
                for (UserSettingDTO userSettingDTO : user_SettingsDTOList_User_Settings) {
                    if (userSettingDTO.getUser_Name().contentEquals(user_Name)) {
                        userSettingDTO_Class_Level = userSettingDTO;
                    }
                }

                user_ID_Delete = userSettingDTO_Class_Level.getUser_id();
                user_Cliked_For_Update = userSettingDTO_Class_Level.getUser_Name();
                txtUser_Name1.setText(userSettingDTO_Class_Level.getUser_Name());
                txtUser_Password1.setText(userSettingDTO_Class_Level.getUser_Password());
                txtUser_ConfirmPassword1.setText(userSettingDTO_Class_Level.getUser_Password());
                txtUser_EmailId1.setText(userSettingDTO_Class_Level.getUser_Email_ID());
                txtUser_Email_Password1.setText(userSettingDTO_Class_Level.getUser_Email_Password());

                String role = "";
                for (Map.Entry<String, String> e : mapRoleandID.entrySet()) {
                    if (e.getValue().equals("" + userSettingDTO_Class_Level.getUser_Role())) {
                        role = e.getKey();
                    }
                }

                //Set Data to table Selected role
                List<FeaturesDTO> featuresDTOList = new ArrayList<FeaturesDTO>();
                featuresDTOList = gen.mainclass.UserSettingDAO.getRoleByUsers(userSettingDTO_Class_Level.getUser_id());
                tablemodel_SelectedRole_User_Settings.setRowCount(0);
                for (FeaturesDTO featuresDTO : featuresDTOList) {
                    tablemodel_SelectedRole_User_Settings.setRowCount(tablemodel_SelectedRole_User_Settings.getRowCount() + 1);
                    tablemodel_SelectedRole_User_Settings.setValueAt(featuresDTO.getRole_Name(), tablemodel_SelectedRole_User_Settings.getRowCount() - 1, 0);
                }
                // remove companies which are present in selected_company_table from available_company table
                for (int i = 0; i < tblselectedRole.getRowCount(); i++) {
                    // company_nmae and company_id from seletecd table
                    String company_Name = tblselectedRole.getValueAt(i, 0).toString();
                    for (int j = 0; j < tblavailableRole.getRowCount(); j++) {
                        System.out.println("company_Name -------------------" + company_Name);
                        System.out.println("---------------------------" + tblavailableRole.getValueAt(j, 0));
                        System.out.println("------------" + tblavailableRole.getValueAt(j, 0).equals(company_Name));
                        if (company_Name.equals(tblavailableRole.getValueAt(j, 0))) {
                            // remove row from table tableCompanyList
                            System.out.println("------------                 " + j);
                            tablemodel_AvailableRole_User_Settings.removeRow(j);
                            // decrease value of i(row) as one row removed
                            j--;
                        }
                    }
                }


                // call table available with all campany List as we already  remove selected company from this list
                intilise_DATA_User_Settings();

                List<CompanySettingsDTO> companySettingsDTOList = new ArrayList<CompanySettingsDTO>();
                companySettingsDTOList = gen.mainclass.UserSettingDAO.getCurrent_Company_Details_By_User(userSettingDTO_Class_Level);

                tablemodel_Company_Selected_User_Settings.setRowCount(0);
                for (CompanySettingsDTO companySettingsDTO : companySettingsDTOList) {
                    tablemodel_Company_Selected_User_Settings.setRowCount(tablemodel_Company_Selected_User_Settings.getRowCount() + 1);
                    tablemodel_Company_Selected_User_Settings.setValueAt(companySettingsDTO.getCompany_name(), tablemodel_Company_Selected_User_Settings.getRowCount() - 1, 0);
                    tablemodel_Company_Selected_User_Settings.setValueAt(companySettingsDTO.getCompany_id(), tablemodel_Company_Selected_User_Settings.getRowCount() - 1, 1);
                }

                // remove companies which are present in selected_company_table from available_company table
                for (int i = 0; i < tblUser_Selected_Company.getRowCount(); i++) {
                    // company_nmae and company_id from seletecd table
                    String company_Name = tblUser_Selected_Company.getValueAt(i, 0).toString();
                    String company_ID = tblUser_Selected_Company.getValueAt(i, 1).toString();
                    for (int j = 0; j < tblUser_Available_Company.getRowCount(); j++) {
                        if (company_Name.equals(tblUser_Available_Company.getValueAt(j, 0)) && company_ID.equals(tblUser_Available_Company.getValueAt(j, 1).toString())) {
                            // remove row from table tableCompanyList
                            tablemodel_Company_Available_User_Settings.removeRow(j);
                            // decrease value of i(row) as one row removed
                            j--;
                        }
                    }
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void setDisable_Component_User_Setting() {
        txtUser_Name1.setEnabled(false);
        txtUser_ConfirmPassword1.setEnabled(false);
        txtUser_Password1.setEnabled(false);
        txtUser_EmailId1.setEnabled(false);
        txtUser_Email_Password1.setEnabled(false);
    }

    private void setEnable_Component_User_Settings() {
        txtUser_Name1.setEnabled(true);
        txtUser_ConfirmPassword1.setEnabled(true);
        txtUser_Password1.setEnabled(true);
        txtUser_EmailId1.setEnabled(true);
        txtUser_Email_Password1.setEnabled(true);
        txtUser_Name1.requestFocus();
    }

    private void bindDTOTOUser_Details_table() {
        try {
            // ADD into Table User Deatils
            user_SettingsDTOList_User_Settings = gen.mainclass.UserSettingDAO.get_User_Details("", "");
            tablemodel_User_Details_Settings.setRowCount(0);
            for (UserSettingDTO usersettingDTO : user_SettingsDTOList_User_Settings) {
                tablemodel_User_Details_Settings.setRowCount(tablemodel_User_Details_Settings.getRowCount() + 1);
                tablemodel_User_Details_Settings.setValueAt(usersettingDTO.getUser_Name(), tablemodel_User_Details_Settings.getRowCount() - 1, 0);
//		tablemodel_User_Details_Settings.setValueAt(usersettingDTO.getUser_id(), tablemodel_User_Details_Settings.getRowCount() - 1, 1);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            Logger
                    .getLogger(CreateUser.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void claerfield_User_Settings() {
        txtUser_Name1.setText("");
        txtUser_ConfirmPassword1.setText("");
        txtUser_Password1.setText("");
        txtUser_EmailId1.setText("");
        txtUser_Email_Password1.setText("");
        user_Cliked_For_Update = "";
    }

    private void initRole() throws SQLException {
        // ADD Role List in Combo
        List<String> groups = new ArrayList<String>();

        mapRoleandID.clear();

        mapRoleandID = gen.mainclass.UserSettingDAO.get_Role_ID("", "");
        groups = new ArrayList<String>();

        roleVector.clear();
        for (String str : mapRoleandID.keySet()) {
            if (!"Admin".equals(str)) {
                roleVector.add(str);
            }
        }

        Collections.sort(
                roleVector,
                new Comparator<String>() {
                    @Override
                    public int compare(String lhs, String rhs) {
                        return lhs.compareToIgnoreCase(rhs);
                    }
                });

        mapRoleandID = Util.getSmallCaseMap(mapRoleandID);
    }

    private void setColumnWidth_Users_Settings(JTable passedTable) {
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(JLabel.LEFT);

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);

        passedTable.getColumnModel().getColumn(0).setCellRenderer(rightRenderer);
        passedTable.getColumnModel().getColumn(0).setPreferredWidth(0);
        passedTable.getColumnModel().getColumn(0).setMinWidth(260);
        passedTable.getColumnModel().getColumn(0).setMaxWidth(260);

        passedTable.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        passedTable.getColumnModel().getColumn(1).setPreferredWidth(0);
        passedTable.getColumnModel().getColumn(1).setMinWidth(65);
        passedTable.getColumnModel().getColumn(1).setMaxWidth(65);
    }

    private void setColumnWidth_Roles_Users_Settings(JTable passedTable) {
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(JLabel.LEFT);

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);

        passedTable.getColumnModel().getColumn(0).setCellRenderer(rightRenderer);
        passedTable.getColumnModel().getColumn(0).setPreferredWidth(0);
        passedTable.getColumnModel().getColumn(0).setMinWidth(140);
        passedTable.getColumnModel().getColumn(0).setMaxWidth(140);

    }

    /// Stop user Settings  creation validation //////////////////////////////////////////////////////////////
    /// user creation validation //////////////////////////////////////////////////////////////
    private Boolean Validation_For_User_Creation() {
        Boolean flag = true;



        String email = txtUser_EmailId1.getText().toString().trim();
        String expression = "^[\\w\\.-]+@([\\w\\-]+\\.)+[A-Z]{2,4}$";
        Pattern pattern = Pattern.compile(expression, Pattern.CASE_INSENSITIVE);
        Matcher matcher = pattern.matcher(email);

        String ledger_name = txtUser_Name1.getText().trim();
        Pattern p = Pattern.compile("[a-zA-Z0-9]");
        Matcher m = p.matcher(ledger_name);


        if (!m.find()) {
            flag = false;
            JOptionPane.showMessageDialog(CreateUser.this, "Enter Valid UserName");
            txtUser_Name1.requestFocus();

        } else if (txtUser_Name1.getText().toString().trim().equals("")) {

            flag = false;
            JOptionPane.showMessageDialog(CreateUser.this, "Enter UserName");
            txtUser_Name1.requestFocus();

        } else if (txtUser_Password1.getText().toString().trim().equals("")) {

            flag = false;
            JOptionPane.showMessageDialog(CreateUser.this, "Enter Password");
            txtUser_Password1.requestFocus();

        } else if (!txtUser_Password1.getText().toString().trim().equals(txtUser_ConfirmPassword1.getText().toString().trim())) {

            flag = false;
            JOptionPane.showMessageDialog(CreateUser.this, "Password MisMatch");
            txtUser_Password1.requestFocus();

        } else if ((!matcher.matches() && !txtUser_EmailId1.getText().toString().trim().equals(""))) {

            flag = false;
            JOptionPane.showMessageDialog(CreateUser.this, "Enter Valid Email ID");
            txtUser_EmailId1.requestFocus();

        } else if (txtUser_EmailId1.getText().toString().trim().equals("")) {

            if (!txtUser_Email_Password1.toString().trim().isEmpty()) {
                flag = false;
                JOptionPane.showMessageDialog(CreateUser.this, "First Enter Email ID");
                txtUser_EmailId1.requestFocus();
            }

//	} else if (!mapRoleandID.containsKey(tf_Role_User_Settings.getText().toLowerCase().toString())) {
        } else if (tblselectedRole.getRowCount() == 0 || tblselectedRole.getRowCount() < 0) {

            flag = false;
            JOptionPane.showMessageDialog(CreateUser.this, "Select valid Role");
            txtUser_EmailId1.requestFocus();

        } else if (!radio_User_Type_Admin_1.isSelected() && !radio_User_Type_NormalUser1.isSelected()) {

            flag = false;
            JOptionPane.showMessageDialog(CreateUser.this, "Please select User Type");
            radio_User_Type_Admin_1.requestFocus();

        } else if (tblUser_Selected_Company.getRowCount() == 0 || tblUser_Selected_Company.getRowCount() < 0) {

            flag = false;
            JOptionPane.showMessageDialog(CreateUser.this, "Please select Company");

        } else if (!txtUser_Name1.getText().toString().trim().equals("") && flag_For_Component_enable_Disable_User_Settings.equals(true)) {
            for (UserSettingDTO usersettingDTO : user_SettingsDTOList_User_Settings) {
                if (usersettingDTO.getUser_Name().equals(txtUser_Name1.getText().toString().trim())) {
                    flag = false;
                    JOptionPane.showMessageDialog(CreateUser.this, "Already User present With this User Name");
                    txtUser_Name1.requestFocus();
                    break;
                }
            }
        }
//	else if(!user_Cliked_For_Update.equals(txtUser_Name1.getText().toString().trim()) && flag_For_Component_enable_Disable_User_Settings.equals(false)){
//		for (UserSettingDTO usersettingDTO : user_SettingsDTOList_User_Settings) {
//		    System.out.println("Check Conditoin value ---------------- " + usersettingDTO.getUser_Name().equals(txtUser_Name1.getText().toString().trim()));
//		    if (usersettingDTO.getUser_Name().equals(txtUser_Name1.getText().toString().trim())) {
//			flag = false;
//			JOptionPane.showMessageDialog(null, "Already User present With this User Name");
//			txtUser_Name1.requestFocus();
//			break;
//		    }
//		}
//	}

        return flag;
    }
}
