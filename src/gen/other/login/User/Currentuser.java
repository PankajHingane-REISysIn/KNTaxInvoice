/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gen.other.login.User;

import gen.mainclass.FeaturesDTO;
import gen.mainclass.UserSettingDTO;
import gen.other.CompanySettings.CompanySettingsDTO;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.beans.PropertyVetoException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author admin
 */
public class Currentuser extends javax.swing.JInternalFrame {

    DefaultTableModel tablemodel_Company_Allocated_Current_User_Settings, tablemodel_Current_Company_For_Current_User_Settings, tablemodel_AllocatedRole_CurrentUser;
    Map<String, String> mapRoleandID = new HashMap<String, String>();
    Vector<String> roleVector = new Vector<String>();
    private List<gen.mainclass.UserSettingDTO> user_SettingsDTOList_Update_User_Settings = new ArrayList<gen.mainclass.UserSettingDTO>();
    private String current_User = "";

    /**
     * Creates new form Currentuser
     */
    public Currentuser(String user) {
	initComponents();
	setTitle("Current User");
	setClosable(true);
	intialise_Current_User_Settings();
	//this.setTitle(user);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        createUserPanel3 = new javax.swing.JPanel();
        jLabel74 = new javax.swing.JLabel();
        jLabel75 = new javax.swing.JLabel();
        jLabel76 = new javax.swing.JLabel();
        jLabel77 = new javax.swing.JLabel();
        txt_Current_User_Name = new javax.swing.JTextField();
        txt_Current_User_Password = new javax.swing.JPasswordField();
        txt_Current_User_ConfirmPassword = new javax.swing.JPasswordField();
        jLabel78 = new javax.swing.JLabel();
        NUButtonCreateUser1 = new javax.swing.JButton();
        NUButtonBack1 = new javax.swing.JButton();
        jLabel79 = new javax.swing.JLabel();
        radio_User_Type_Admin_1 = new javax.swing.JRadioButton();
        radio_User_Type_NormalUser1 = new javax.swing.JRadioButton();
        jLabel80 = new javax.swing.JLabel();
        txt_Current_User_EmailId = new javax.swing.JTextField();
        jLabel81 = new javax.swing.JLabel();
        txt_Current_User_Email_Password = new javax.swing.JPasswordField();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane22 = new javax.swing.JScrollPane();
        tblCompany_Allocated_Current_User_Settings = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane23 = new javax.swing.JScrollPane();
        tblCurrent_Company_For_Current_User_Settings = new javax.swing.JTable();
        lbl_Current_User_Role = new javax.swing.JLabel();
        jScrollPane21 = new javax.swing.JScrollPane();
        tblAllocatedRole_CurrentUser = new javax.swing.JTable();

        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Kasturi-logo-1.png"))); // NOI18N

        createUserPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        createUserPanel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                createUserPanel3MouseClicked(evt);
            }
        });
        createUserPanel3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                createUserPanel3FocusLost(evt);
            }
        });

        jLabel74.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel74, org.openide.util.NbBundle.getMessage(Currentuser.class, "Currentuser.jLabel74.text")); // NOI18N

        jLabel75.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel75, org.openide.util.NbBundle.getMessage(Currentuser.class, "Currentuser.jLabel75.text")); // NOI18N

        jLabel76.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel76, org.openide.util.NbBundle.getMessage(Currentuser.class, "Currentuser.jLabel76.text")); // NOI18N

        jLabel77.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel77, org.openide.util.NbBundle.getMessage(Currentuser.class, "Currentuser.jLabel77.text")); // NOI18N

        txt_Current_User_Name.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txt_Current_User_Name.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_Current_User_NameFocusGained(evt);
            }
        });
        txt_Current_User_Name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_Current_User_NameKeyPressed(evt);
            }
        });

        txt_Current_User_Password.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txt_Current_User_Password.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_Current_User_PasswordFocusGained(evt);
            }
        });
        txt_Current_User_Password.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_Current_User_PasswordKeyPressed(evt);
            }
        });

        txt_Current_User_ConfirmPassword.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txt_Current_User_ConfirmPassword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_Current_User_ConfirmPasswordFocusGained(evt);
            }
        });
        txt_Current_User_ConfirmPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_Current_User_ConfirmPasswordKeyPressed(evt);
            }
        });

        jLabel78.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel78, org.openide.util.NbBundle.getMessage(Currentuser.class, "Currentuser.jLabel78.text")); // NOI18N

        NUButtonCreateUser1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(NUButtonCreateUser1, org.openide.util.NbBundle.getMessage(Currentuser.class, "Currentuser.NUButtonCreateUser1.text")); // NOI18N
        NUButtonCreateUser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NUButtonCreateUser1ActionPerformed(evt);
            }
        });

        NUButtonBack1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(NUButtonBack1, org.openide.util.NbBundle.getMessage(Currentuser.class, "Currentuser.NUButtonBack1.text")); // NOI18N
        NUButtonBack1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NUButtonBack1ActionPerformed(evt);
            }
        });

        jLabel79.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel79, org.openide.util.NbBundle.getMessage(Currentuser.class, "Currentuser.jLabel79.text")); // NOI18N

        radio_User_Type_Admin_1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(radio_User_Type_Admin_1, org.openide.util.NbBundle.getMessage(Currentuser.class, "Currentuser.radio_User_Type_Admin_1.text")); // NOI18N
        radio_User_Type_Admin_1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                radio_User_Type_Admin_1StateChanged(evt);
            }
        });
        radio_User_Type_Admin_1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                radio_User_Type_Admin_1KeyPressed(evt);
            }
        });

        radio_User_Type_NormalUser1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(radio_User_Type_NormalUser1, org.openide.util.NbBundle.getMessage(Currentuser.class, "Currentuser.radio_User_Type_NormalUser1.text")); // NOI18N
        radio_User_Type_NormalUser1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                radio_User_Type_NormalUser1StateChanged(evt);
            }
        });
        radio_User_Type_NormalUser1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                radio_User_Type_NormalUser1KeyPressed(evt);
            }
        });

        jLabel80.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel80, org.openide.util.NbBundle.getMessage(Currentuser.class, "Currentuser.jLabel80.text")); // NOI18N

        txt_Current_User_EmailId.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txt_Current_User_EmailId.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_Current_User_EmailIdFocusGained(evt);
            }
        });
        txt_Current_User_EmailId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_Current_User_EmailIdKeyPressed(evt);
            }
        });

        jLabel81.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel81, org.openide.util.NbBundle.getMessage(Currentuser.class, "Currentuser.jLabel81.text")); // NOI18N

        txt_Current_User_Email_Password.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel11, org.openide.util.NbBundle.getMessage(Currentuser.class, "Currentuser.jLabel11.text")); // NOI18N

        tblCompany_Allocated_Current_User_Settings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblCompany_Allocated_Current_User_Settings.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCompany_Allocated_Current_User_SettingsMouseClicked(evt);
            }
        });
        jScrollPane22.setViewportView(tblCompany_Allocated_Current_User_Settings);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel12, org.openide.util.NbBundle.getMessage(Currentuser.class, "Currentuser.jLabel12.text")); // NOI18N

        tblCurrent_Company_For_Current_User_Settings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblCurrent_Company_For_Current_User_Settings.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCurrent_Company_For_Current_User_SettingsMouseClicked(evt);
            }
        });
        jScrollPane23.setViewportView(tblCurrent_Company_For_Current_User_Settings);

        lbl_Current_User_Role.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(lbl_Current_User_Role, org.openide.util.NbBundle.getMessage(Currentuser.class, "Currentuser.lbl_Current_User_Role.text")); // NOI18N

        tblAllocatedRole_CurrentUser.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane21.setViewportView(tblAllocatedRole_CurrentUser);

        javax.swing.GroupLayout createUserPanel3Layout = new javax.swing.GroupLayout(createUserPanel3);
        createUserPanel3.setLayout(createUserPanel3Layout);
        createUserPanel3Layout.setHorizontalGroup(
            createUserPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createUserPanel3Layout.createSequentialGroup()
                .addGroup(createUserPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(createUserPanel3Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(createUserPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(createUserPanel3Layout.createSequentialGroup()
                                .addGroup(createUserPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel81)
                                    .addComponent(jLabel78)
                                    .addComponent(jLabel79))
                                .addGap(51, 51, 51)
                                .addGroup(createUserPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, createUserPanel3Layout.createSequentialGroup()
                                        .addComponent(jScrollPane21, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lbl_Current_User_Role, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txt_Current_User_Email_Password, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(createUserPanel3Layout.createSequentialGroup()
                                        .addComponent(radio_User_Type_Admin_1)
                                        .addGap(18, 18, 18)
                                        .addComponent(radio_User_Type_NormalUser1))))
                            .addComponent(jLabel77)
                            .addComponent(jLabel80)
                            .addGroup(createUserPanel3Layout.createSequentialGroup()
                                .addGroup(createUserPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(createUserPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane22, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane23, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(createUserPanel3Layout.createSequentialGroup()
                                .addGroup(createUserPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel76)
                                    .addComponent(jLabel75))
                                .addGap(96, 96, 96)
                                .addGroup(createUserPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txt_Current_User_Password, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt_Current_User_Name, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt_Current_User_ConfirmPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt_Current_User_EmailId, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(createUserPanel3Layout.createSequentialGroup()
                        .addGap(221, 221, 221)
                        .addComponent(NUButtonCreateUser1)
                        .addGap(27, 27, 27)
                        .addComponent(NUButtonBack1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(createUserPanel3Layout.createSequentialGroup()
                        .addGap(161, 161, 161)
                        .addComponent(jLabel74, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(68, Short.MAX_VALUE))
        );
        createUserPanel3Layout.setVerticalGroup(
            createUserPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, createUserPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel74)
                .addGap(18, 18, 18)
                .addGroup(createUserPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel75)
                    .addComponent(txt_Current_User_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(createUserPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel76)
                    .addComponent(txt_Current_User_Password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(createUserPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_Current_User_ConfirmPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel77))
                .addGap(18, 18, 18)
                .addGroup(createUserPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_Current_User_EmailId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel80))
                .addGap(18, 18, 18)
                .addGroup(createUserPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_Current_User_Email_Password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel81))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(createUserPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(createUserPanel3Layout.createSequentialGroup()
                        .addGroup(createUserPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_Current_User_Role)
                            .addComponent(jLabel78))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(createUserPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(radio_User_Type_NormalUser1)
                            .addComponent(radio_User_Type_Admin_1)
                            .addComponent(jLabel79)))
                    .addGroup(createUserPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane21, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 25, Short.MAX_VALUE)))
                .addGroup(createUserPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(createUserPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane22, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(createUserPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane23, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(createUserPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(NUButtonCreateUser1)
                            .addComponent(NUButtonBack1)))
                    .addComponent(jLabel11))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(createUserPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(createUserPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_Current_User_NameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_Current_User_NameFocusGained
	// TODO add your handling code here:
    }//GEN-LAST:event_txt_Current_User_NameFocusGained

    private void txt_Current_User_NameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_Current_User_NameKeyPressed
	// TODO add your handling code here:
	if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
	    txt_Current_User_Password.requestFocus();
	}
    }//GEN-LAST:event_txt_Current_User_NameKeyPressed

    private void txt_Current_User_PasswordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_Current_User_PasswordFocusGained
	// TODO add your handling code here:
    }//GEN-LAST:event_txt_Current_User_PasswordFocusGained

    private void txt_Current_User_PasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_Current_User_PasswordKeyPressed
	// TODO add your handling code here:
	if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
	    txt_Current_User_ConfirmPassword.requestFocus();
	} else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
	    txt_Current_User_Name.requestFocus();
	}
    }//GEN-LAST:event_txt_Current_User_PasswordKeyPressed

    private void txt_Current_User_ConfirmPasswordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_Current_User_ConfirmPasswordFocusGained
	// TODO add your handling code here:
    }//GEN-LAST:event_txt_Current_User_ConfirmPasswordFocusGained

    private void txt_Current_User_ConfirmPasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_Current_User_ConfirmPasswordKeyPressed
	// TODO add your handling code here:
	if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
	    txt_Current_User_EmailId.requestFocus();
	} else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
	    txt_Current_User_Password.requestFocus();
	}
    }//GEN-LAST:event_txt_Current_User_ConfirmPasswordKeyPressed

    private void NUButtonCreateUser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NUButtonCreateUser1ActionPerformed
	// TODO add your handling code here:

	if (Validation_For_User_Updation()) {

	    String str = JOptionPane.showInputDialog(Currentuser.this, "Enter Password : ", "Password", 1).trim();

	    Boolean flag = false;
	    List<UserSettingDTO> userSettingDTOList = new ArrayList<UserSettingDTO>();
	    userSettingDTOList = gen.mainclass.UserSettingDAO.get_User_Details(gen.dto.Constants.CURRENT_USER_ID, "");
	    for (UserSettingDTO userSettingDTO : userSettingDTOList) {
		if (str != null && !str.isEmpty() && userSettingDTO.getUser_Password().equals(str)) {
		    flag = true;
		}
	    }

	    if (flag) {
		List<UserSettingDTO> userSettingDTOList_Pass = new ArrayList<UserSettingDTO>();
		UserSettingDTO userSettingDTO = new UserSettingDTO();
		userSettingDTO = bindGUItoDTO_Current_Users();
		userSettingDTOList_Pass.add(userSettingDTO);
		gen.mainclass.UserSettingDAO.updateUserSetting_By_User(userSettingDTOList_Pass);

		gen.other.CompanySettings.CompanySettingsDAO.delete_Current_Company_By_User("");

		if (tblCurrent_Company_For_Current_User_Settings.getRowCount() > 0) {
		    for (int i = 0; i < tablemodel_Current_Company_For_Current_User_Settings.getRowCount(); i++) {
			gen.other.CompanySettings.CompanySettingsDAO.insert_Current_Company(tablemodel_Current_Company_For_Current_User_Settings.getValueAt(i, 0).toString(), tablemodel_Current_Company_For_Current_User_Settings.getValueAt(i, 1).toString());
		    }
		}
		intialise_Current_User_Settings();
		JOptionPane.showMessageDialog(Currentuser.this, "Submitted Successfully ", "Password", 1);
	    } else {
		JOptionPane.showMessageDialog(Currentuser.this, "Enter Correct Password.", "Password", 1);
	    }
	}
    }//GEN-LAST:event_NUButtonCreateUser1ActionPerformed

    private void NUButtonBack1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NUButtonBack1ActionPerformed
	// TODO add your handling code here:
	try {
	    // TODO add your handling code here:

	    Currentuser.this.setClosed(true);
	} catch (PropertyVetoException ex) {
	    Logger.getLogger(CreateUser.class.getName()).log(Level.SEVERE, null, ex);
	}
    }//GEN-LAST:event_NUButtonBack1ActionPerformed

    private void radio_User_Type_Admin_1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_radio_User_Type_Admin_1StateChanged
	// TODO add your handling code here:
    }//GEN-LAST:event_radio_User_Type_Admin_1StateChanged

    private void radio_User_Type_Admin_1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_radio_User_Type_Admin_1KeyPressed
	// TODO add your handling code here:
    }//GEN-LAST:event_radio_User_Type_Admin_1KeyPressed

    private void radio_User_Type_NormalUser1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_radio_User_Type_NormalUser1StateChanged
	// TODO add your handling code here:
    }//GEN-LAST:event_radio_User_Type_NormalUser1StateChanged

    private void radio_User_Type_NormalUser1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_radio_User_Type_NormalUser1KeyPressed
	// TODO add your handling code here:
    }//GEN-LAST:event_radio_User_Type_NormalUser1KeyPressed

    private void txt_Current_User_EmailIdFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_Current_User_EmailIdFocusGained
	// TODO add your handling code here:
    }//GEN-LAST:event_txt_Current_User_EmailIdFocusGained

    private void txt_Current_User_EmailIdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_Current_User_EmailIdKeyPressed
	// TODO add your handling code here:

	if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
	    txt_Current_User_ConfirmPassword.requestFocus();
	}
    }//GEN-LAST:event_txt_Current_User_EmailIdKeyPressed

    private void tblCompany_Allocated_Current_User_SettingsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCompany_Allocated_Current_User_SettingsMouseClicked
	// TODO add your handling code here:

	int selectedCompany_index = tblCompany_Allocated_Current_User_Settings.getSelectedRow();
	// selected company_Name
	String selectedCompany_Name = tblCompany_Allocated_Current_User_Settings.getValueAt(selectedCompany_index, 0).toString();
	// selected company_ID
	String selectedCompany_ID = tblCompany_Allocated_Current_User_Settings.getValueAt(selectedCompany_index, 1).toString();

	// selected row must be greater than 0
	if (tblCompany_Allocated_Current_User_Settings.getSelectedRow() >= 0) {
	    // getRowCount row must be greater than 0
	    if (tblCompany_Allocated_Current_User_Settings.getRowCount() > 0) {
		tablemodel_Current_Company_For_Current_User_Settings.setRowCount(0);
		// find selected row from tableCompanyList
		// move data of selected row from tableCompanyList to tableCompanyRestoreUp
		tablemodel_Current_Company_For_Current_User_Settings.setRowCount(tablemodel_Current_Company_For_Current_User_Settings.getRowCount() + 1);
		tablemodel_Current_Company_For_Current_User_Settings.setValueAt(selectedCompany_Name, tablemodel_Current_Company_For_Current_User_Settings.getRowCount() - 1, 0);
		tablemodel_Current_Company_For_Current_User_Settings.setValueAt(selectedCompany_ID, tablemodel_Current_Company_For_Current_User_Settings.getRowCount() - 1, 1);
	    }
	}
    }//GEN-LAST:event_tblCompany_Allocated_Current_User_SettingsMouseClicked

    private void tblCurrent_Company_For_Current_User_SettingsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCurrent_Company_For_Current_User_SettingsMouseClicked
	// TODO add your handling code here:

	tablemodel_Current_Company_For_Current_User_Settings.setRowCount(0);
    }//GEN-LAST:event_tblCurrent_Company_For_Current_User_SettingsMouseClicked

    private void createUserPanel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createUserPanel3MouseClicked
	// TODO add your handling code here:
    }//GEN-LAST:event_createUserPanel3MouseClicked

    private void createUserPanel3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_createUserPanel3FocusLost
	// TODO add your handling code here:
    }//GEN-LAST:event_createUserPanel3FocusLost
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton NUButtonBack1;
    private javax.swing.JButton NUButtonCreateUser1;
    private javax.swing.JPanel createUserPanel3;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel78;
    private javax.swing.JLabel jLabel79;
    private javax.swing.JLabel jLabel80;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JScrollPane jScrollPane21;
    private javax.swing.JScrollPane jScrollPane22;
    private javax.swing.JScrollPane jScrollPane23;
    private javax.swing.JLabel lbl_Current_User_Role;
    private javax.swing.JRadioButton radio_User_Type_Admin_1;
    private javax.swing.JRadioButton radio_User_Type_NormalUser1;
    private javax.swing.JTable tblAllocatedRole_CurrentUser;
    private javax.swing.JTable tblCompany_Allocated_Current_User_Settings;
    private javax.swing.JTable tblCurrent_Company_For_Current_User_Settings;
    private javax.swing.JPasswordField txt_Current_User_ConfirmPassword;
    private javax.swing.JTextField txt_Current_User_EmailId;
    private javax.swing.JPasswordField txt_Current_User_Email_Password;
    private javax.swing.JTextField txt_Current_User_Name;
    private javax.swing.JPasswordField txt_Current_User_Password;
    // End of variables declaration//GEN-END:variables

    private void intialise_Current_User_Settings() {
	initilizeGUIComponents_Current_User_Settings();
	setnemonic_Current_User_Settings();
    }

    private void initilizeGUIComponents_Current_User_Settings() {
	initComponentActiveInActive_Current_User_Settings();
	//bindDTOTOUser_Details_table();
	intiliase_DATA_Current_User_Settings();
	intiliase_Current_Company_Current_User_Settings();
	//claerfield_User_Settings();
	//setEnable_Component_User_Settings();
    }

    private void initComponentActiveInActive_Current_User_Settings() {
	String col[] = {"CompanyName", ""};
	String data[][] = {{"", ""}};
	tablemodel_Company_Allocated_Current_User_Settings = new DefaultTableModel(data, col) {
	    @Override
	    public boolean isCellEditable(int row, int column) {
		return false;//This causes all cells to be not editable
	    }
	};
	tblCompany_Allocated_Current_User_Settings.setModel(tablemodel_Company_Allocated_Current_User_Settings);
	JTableHeader header = tblCompany_Allocated_Current_User_Settings.getTableHeader();
	header.setBackground(Color.yellow);
	tablemodel_Company_Allocated_Current_User_Settings.setRowCount(0);
	tablemodel_Company_Allocated_Current_User_Settings.setColumnCount(2);


	String col_Current_Company_Current_User[] = {"CompanyName", ""};
	String data_Current_Company_Current_User[][] = {{"", ""}};
	tablemodel_Current_Company_For_Current_User_Settings = new DefaultTableModel(data_Current_Company_Current_User, col_Current_Company_Current_User) {
	    @Override
	    public boolean isCellEditable(int row, int column) {
		return false;//This causes all cells to be not editable
	    }
	};
	tblCurrent_Company_For_Current_User_Settings.setModel(tablemodel_Current_Company_For_Current_User_Settings);
	JTableHeader header_Current_Company_Current_User = tblCurrent_Company_For_Current_User_Settings.getTableHeader();
	header_Current_Company_Current_User.setBackground(Color.yellow);
	tablemodel_Current_Company_For_Current_User_Settings.setRowCount(0);
	tablemodel_Current_Company_For_Current_User_Settings.setColumnCount(2);

	String col_for_Role_Selected_CurrentUser[] = {"Allocated Role"};
	String data_for_Role_Selected_CurrentUser[][] = {{""}};
	tablemodel_AllocatedRole_CurrentUser = new DefaultTableModel(data_for_Role_Selected_CurrentUser, col_for_Role_Selected_CurrentUser) {
	    @Override
	    public boolean isCellEditable(int row, int column) {
		return false;//This causes all cells to be not editable
	    }
	};
	tblAllocatedRole_CurrentUser.setModel(tablemodel_AllocatedRole_CurrentUser);
	JTableHeader header_for_Selected_role = tblAllocatedRole_CurrentUser.getTableHeader();
	header_for_Selected_role.setBackground(Color.yellow);
	tablemodel_AllocatedRole_CurrentUser.setRowCount(0);
	tablemodel_AllocatedRole_CurrentUser.setColumnCount(2);
	setColumnWidth_Roles_Users_Settings(tblAllocatedRole_CurrentUser);

	setColumnWidth_Current_Users_Settings(tblCompany_Allocated_Current_User_Settings);
	setColumnWidth_Current_Users_Settings(tblCurrent_Company_For_Current_User_Settings);
	setColumnWidth_Allocated_Roles_Current_Users_Settings(tblAllocatedRole_CurrentUser);
    }

    private void intiliase_DATA_Current_User_Settings() {
	user_SettingsDTOList_Update_User_Settings = gen.mainclass.UserSettingDAO.get_User_Details("", "");
	List<UserSettingDTO> userSettingDTOList = gen.mainclass.UserSettingDAO.get_User_Details(gen.dto.Constants.CURRENT_USER_ID.toString(), "");

	for (UserSettingDTO userSettingDTO : userSettingDTOList) {
	    current_User = userSettingDTO.getUser_Name();
	    txt_Current_User_Name.setText(userSettingDTO.getUser_Name());
	    txt_Current_User_Password.setText(userSettingDTO.getUser_Password());
	    txt_Current_User_ConfirmPassword.setText(userSettingDTO.getUser_Password());
	    txt_Current_User_EmailId.setText(userSettingDTO.getUser_Email_ID());
	    txt_Current_User_Email_Password.setText(userSettingDTO.getUser_Email_Password());

	    String role = "";
	    for (Map.Entry<String, String> e : mapRoleandID.entrySet()) {

		if (e.getValue().equals("" + userSettingDTO.getUser_Role())) {
		    role = e.getKey();
		}

	    }
	    lbl_Current_User_Role.setText(role);
	    //Set Data to table Selected role
	    List<FeaturesDTO> featuresDTOList = new ArrayList<FeaturesDTO>();
	    featuresDTOList = gen.mainclass.UserSettingDAO.getRoleByUsers(userSettingDTO.getUser_id());
	    tablemodel_AllocatedRole_CurrentUser.setRowCount(0);
	    for (FeaturesDTO featuresDTO : featuresDTOList) {
		tablemodel_AllocatedRole_CurrentUser.setRowCount(tablemodel_AllocatedRole_CurrentUser.getRowCount() + 1);
		tablemodel_AllocatedRole_CurrentUser.setValueAt(featuresDTO.getRole_Name(), tablemodel_AllocatedRole_CurrentUser.getRowCount() - 1, 0);
	    }

	    List<CompanySettingsDTO> companySettingsDTOList = new ArrayList<CompanySettingsDTO>();
	    companySettingsDTOList = gen.mainclass.UserSettingDAO.getCurrent_Company_Details_By_User(userSettingDTO);

	    tablemodel_Company_Allocated_Current_User_Settings.setRowCount(0);
	    for (CompanySettingsDTO companySettingsDTO : companySettingsDTOList) {
		tablemodel_Company_Allocated_Current_User_Settings.setRowCount(tablemodel_Company_Allocated_Current_User_Settings.getRowCount() + 1);
		tablemodel_Company_Allocated_Current_User_Settings.setValueAt(companySettingsDTO.getCompany_name(), tablemodel_Company_Allocated_Current_User_Settings.getRowCount() - 1, 0);
		tablemodel_Company_Allocated_Current_User_Settings.setValueAt(companySettingsDTO.getCompany_id(), tablemodel_Company_Allocated_Current_User_Settings.getRowCount() - 1, 1);
	    }
	}
    }

    private void setnemonic_Current_User_Settings() {
	NUButtonCreateUser1.setMnemonic(KeyEvent.VK_C);
	NUButtonBack1.setMnemonic(KeyEvent.VK_B);
    }

    private void setColumnWidth_Current_Users_Settings(JTable passedTable) {
	DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
	rightRenderer.setHorizontalAlignment(JLabel.LEFT);

	DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
	centerRenderer.setHorizontalAlignment(JLabel.CENTER);

	passedTable.getColumnModel().getColumn(0).setCellRenderer(rightRenderer);
	passedTable.getColumnModel().getColumn(0).setPreferredWidth(0);
	passedTable.getColumnModel().getColumn(0).setMinWidth(280);
	passedTable.getColumnModel().getColumn(0).setMaxWidth(280);

	passedTable.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
	passedTable.getColumnModel().getColumn(1).setPreferredWidth(0);
	passedTable.getColumnModel().getColumn(1).setMinWidth(50);
	passedTable.getColumnModel().getColumn(1).setMaxWidth(50);
    }

    private void setColumnWidth_Allocated_Roles_Current_Users_Settings(JTable passedTable) {
	DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
	rightRenderer.setHorizontalAlignment(JLabel.LEFT);

	DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
	centerRenderer.setHorizontalAlignment(JLabel.CENTER);

	passedTable.getColumnModel().getColumn(0).setCellRenderer(rightRenderer);
	passedTable.getColumnModel().getColumn(0).setPreferredWidth(0);
	passedTable.getColumnModel().getColumn(0).setMinWidth(350);
	passedTable.getColumnModel().getColumn(0).setMaxWidth(350);
    }

    private UserSettingDTO bindGUItoDTO_Current_Users() {
	UserSettingDTO userSettingDTO = new UserSettingDTO();
	userSettingDTO.setUser_id(gen.dto.Constants.CURRENT_USER_ID);
	userSettingDTO.setUser_Name(txt_Current_User_Name.getText().toString().trim());
	userSettingDTO.setUser_Password(txt_Current_User_Password.getText().toString().trim());
	userSettingDTO.setUser_Email_ID(txt_Current_User_EmailId.getText().toString().trim());
	userSettingDTO.setUser_Email_Password(txt_Current_User_Email_Password.getText().toString().trim());

	int user_Type = 0;
	if (radio_User_Type_Admin_1.isSelected()) {
	    user_Type = 1;
	} else if (radio_User_Type_NormalUser1.isSelected()) {
	    user_Type = 2;
	}
	userSettingDTO.setUser_Type(user_Type);
	return userSettingDTO;
    }

    private void intiliase_Current_Company_Current_User_Settings() {
	List<CompanySettingsDTO> companySettingsDTOList = new ArrayList<CompanySettingsDTO>();
	companySettingsDTOList = gen.mainclass.UserSettingDAO.getCurrentCompany_UserID(gen.dto.Constants.CURRENT_USER_ID);

	tablemodel_Current_Company_For_Current_User_Settings.setRowCount(0);
	for (CompanySettingsDTO companySettingsDTO : companySettingsDTOList) {
	    tablemodel_Current_Company_For_Current_User_Settings.setRowCount(tablemodel_Current_Company_For_Current_User_Settings.getRowCount() + 1);
	    tablemodel_Current_Company_For_Current_User_Settings.setValueAt(companySettingsDTO.getCompany_name(), tablemodel_Current_Company_For_Current_User_Settings.getRowCount() - 1, 0);
	    tablemodel_Current_Company_For_Current_User_Settings.setValueAt(companySettingsDTO.getCompany_id(), tablemodel_Current_Company_For_Current_User_Settings.getRowCount() - 1, 1);
	}
	txt_Current_User_Name.requestFocus();
    }

    private void setColumnWidth_Roles_Users_Settings(JTable passedTable) {
	DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
	rightRenderer.setHorizontalAlignment(JLabel.LEFT);

	DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
	centerRenderer.setHorizontalAlignment(JLabel.CENTER);

	passedTable.getColumnModel().getColumn(0).setCellRenderer(rightRenderer);
	passedTable.getColumnModel().getColumn(0).setPreferredWidth(0);
	passedTable.getColumnModel().getColumn(0).setMinWidth(350);
	passedTable.getColumnModel().getColumn(0).setMaxWidth(350);

    }

    private Boolean Validation_For_User_Updation() {
	Boolean flag = true;

	String email = txt_Current_User_EmailId.getText().toString().trim();
	String expression = "^[\\w\\.-]+@([\\w\\-]+\\.)+[A-Z]{2,4}$";
	Pattern pattern = Pattern.compile(expression, Pattern.CASE_INSENSITIVE);
	Matcher matcher = pattern.matcher(email);

	String ledger_name = txt_Current_User_Name.getText().trim();
	Pattern p = Pattern.compile("[a-zA-Z0-9]");
	Matcher m = p.matcher(ledger_name);


	if (!m.find()) {
	    flag = false;
	    JOptionPane.showMessageDialog(Currentuser.this, "Enter Valid UserName");
	    txt_Current_User_Name.requestFocus();
	} else if (txt_Current_User_Name.getText().toString().trim().equals("")) {

	    flag = false;
	    JOptionPane.showMessageDialog(Currentuser.this, "Enter UserName");
	    txt_Current_User_Name.requestFocus();

	} else if (txt_Current_User_Password.getText().toString().trim().equals("")) {

	    flag = false;
	    JOptionPane.showMessageDialog(Currentuser.this, "Enter Password");
	    txt_Current_User_Password.requestFocus();

	} else if (!txt_Current_User_Password.getText().toString().trim().equals(txt_Current_User_ConfirmPassword.getText().toString().trim())) {

	    flag = false;
	    JOptionPane.showMessageDialog(Currentuser.this, "Password MisMatch");
	    txt_Current_User_Password.requestFocus();

	} else if ((!matcher.matches() && !txt_Current_User_EmailId.getText().toString().trim().equals(""))) {

	    flag = false;
	    JOptionPane.showMessageDialog(Currentuser.this, "Enter Valid Email ID");
	    txt_Current_User_EmailId.requestFocus();

	} else if (txt_Current_User_EmailId.getText().toString().trim().equals("")) {

	    if (!txt_Current_User_Email_Password.toString().trim().isEmpty()) {
		flag = false;
		JOptionPane.showMessageDialog(Currentuser.this, "First Enter Email ID");
		txt_Current_User_EmailId.requestFocus();
	    }

//	} else if (!mapRoleandID.containsKey(tf_Role_User_Settings.getText().toLowerCase().toString())) {
	}
//	else if (!txt_Current_User_Name.getText().toString().trim().equals("")) {
//	    for (UserSettingDTO usersettingDTO : user_SettingsDTOList_Update_User_Settings) {
//		if (usersettingDTO.getUser_Name().equals(txt_Current_User_Name.getText().toString().trim())) {
//		    flag = false;
//		    JOptionPane.showMessageDialog(Currentuser.this, "Already User present With this User Name");
//		    txt_Current_User_Name.requestFocus();
//		    break;
//		}
//	    }
//	}

	int count = 0;
	for (UserSettingDTO usersettingDTO : user_SettingsDTOList_Update_User_Settings) {
	    if (usersettingDTO.getUser_Name().equals(txt_Current_User_Name.getText().toString().trim())) {
		//flag = false;
		//JOptionPane.showMessageDialog(Currentuser.this, "Already User present With this User Name");
		//txt_Current_User_Name.requestFocus();
		count++;
//		break;
	    }
	}

	if (count == 2) {
	    flag = false;
	    JOptionPane.showMessageDialog(Currentuser.this, "Already User present With this User Name");
	    txt_Current_User_Name.requestFocus();
	}

	return flag;
    }
    ///////////////////////   Current User Call End/////////////////////////////////////////////////////////////
}
