/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gen.other.DatabaseBackupRestore;

import gen.other.CompanySettings.CompanySettingsDAO;
import gen.other.CompanySettings.CompanySettingsDTO;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.AlgorithmParameterSpec;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import javax.crypto.Cipher;
import javax.crypto.CipherOutputStream;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author admin
 */
public class DatabaseBackUp1 extends javax.swing.JInternalFrame {

    DefaultTableModel tablemodelCompany_Company_Back_UP, tablemodelBackUPCompany_Company_Back_UP;
    // company_list to store .SQL file
    List<String> company_SQLTxtFile_List_Company_Back_UP = new ArrayList<String>();
    //to store .Enc file
    List<String> company_List_Enc_Company_Back_UP = new ArrayList<String>();
    File fileChooser_Company_Back_UP = null;
    static int BUFFER_SIZE = 1048576;
    static String zipArchieveName_Company_Back_UP = "";
    // company_Information_DTOList call when Form open
    private List<CompanySettingsDTO> company_Information_DTOList_Company_Back_UP = new ArrayList<CompanySettingsDTO>();
    private static Cipher ecipher_Company_Back_UP;
    private static Cipher dcipher_Company_Back_UP;
    private static byte[] iv = {
	(byte) 0xB2, (byte) 0x12, (byte) 0xD5, (byte) 0xB2,
	(byte) 0x44, (byte) 0x21, (byte) 0xC3, (byte) 0xC3,
	(byte) 0xB2, (byte) 0x12, (byte) 0xD5, (byte) 0xB2,
	(byte) 0x44, (byte) 0x21, (byte) 0xC3, (byte) 0xC3,};

    /**
     * Creates new form DatabaseBackUp1
     */
    public DatabaseBackUp1(String title) {
	initComponents();
	this.setTitle(title);
	initialise_Company_Back_UP();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableCompanyBackUp_Company_Back_UP = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableCompanyList_Company_Back_UP = new javax.swing.JTable();
        btnBackUP_Company_Back_UP = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtDestinationPath_Company_Back_UP = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnPath_Company_Back_UP = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(500, 500));

        tableCompanyBackUp_Company_Back_UP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableCompanyBackUp_Company_Back_UP.getTableHeader().setResizingAllowed(false);
        tableCompanyBackUp_Company_Back_UP.getTableHeader().setReorderingAllowed(false);
        tableCompanyBackUp_Company_Back_UP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableCompanyBackUp_Company_Back_UPMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableCompanyBackUp_Company_Back_UP);

        tableCompanyList_Company_Back_UP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Title 1"
            }
        ));
        tableCompanyList_Company_Back_UP.getTableHeader().setResizingAllowed(false);
        tableCompanyList_Company_Back_UP.getTableHeader().setReorderingAllowed(false);
        tableCompanyList_Company_Back_UP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableCompanyList_Company_Back_UPMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableCompanyList_Company_Back_UP);
        tableCompanyList_Company_Back_UP.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(DatabaseBackUp1.class, "DatabaseBackUp1.tableCompanyList_Company_Back_UP.columnModel.title0")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(btnBackUP_Company_Back_UP, org.openide.util.NbBundle.getMessage(DatabaseBackUp1.class, "DatabaseBackUp1.btnBackUP_Company_Back_UP.text")); // NOI18N
        btnBackUP_Company_Back_UP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackUP_Company_Back_UPActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(DatabaseBackUp1.class, "DatabaseBackUp1.jLabel1.text")); // NOI18N

        txtDestinationPath_Company_Back_UP.setEditable(false);
        txtDestinationPath_Company_Back_UP.setText(org.openide.util.NbBundle.getMessage(DatabaseBackUp1.class, "DatabaseBackUp1.txtDestinationPath_Company_Back_UP.text")); // NOI18N
        txtDestinationPath_Company_Back_UP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtDestinationPath_Company_Back_UPMouseClicked(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(DatabaseBackUp1.class, "DatabaseBackUp1.jLabel2.text")); // NOI18N
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnPath_Company_Back_UP, org.openide.util.NbBundle.getMessage(DatabaseBackUp1.class, "DatabaseBackUp1.btnPath_Company_Back_UP.text")); // NOI18N
        btnPath_Company_Back_UP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnPath_Company_Back_UPMouseClicked(evt);
            }
        });
        btnPath_Company_Back_UP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPath_Company_Back_UPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(447, 447, 447)
                        .addComponent(btnBackUP_Company_Back_UP, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDestinationPath_Company_Back_UP, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnPath_Company_Back_UP)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(70, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDestinationPath_Company_Back_UP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(btnPath_Company_Back_UP)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(55, 55, 55)
                .addComponent(btnBackUP_Company_Back_UP)
                .addGap(21, 21, 21))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tableCompanyList_Company_Back_UPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableCompanyList_Company_Back_UPMouseClicked
	// TODO add your handling code here:

	int selectedCompany_index = tableCompanyList_Company_Back_UP.getSelectedRow();

	// selected company_Name
	String selectedCompany_Name = "" + tableCompanyList_Company_Back_UP.getValueAt(selectedCompany_index, 0);
	// selected company_ID
	String selectedCompany_ID = "" + tableCompanyList_Company_Back_UP.getValueAt(selectedCompany_index, 1);

	// selected row must be greater than 0 
	if (tableCompanyList_Company_Back_UP.getSelectedRow() >= 0) {
	    // getRowCount row must be greater than 0 
	    if (tableCompanyList_Company_Back_UP.getRowCount() > 0) {
		// find selected row from tableCompanyList
		for (int i = 0; i < tableCompanyList_Company_Back_UP.getRowCount(); i++) {
		    // selected row
		    if (tableCompanyList_Company_Back_UP.isRowSelected(i)) {
			// move data of selected row from tableCompanyList to tableCompanyRestoreUp
			tablemodelBackUPCompany_Company_Back_UP.setRowCount(tableCompanyBackUp_Company_Back_UP.getRowCount() + 1);
			tableCompanyBackUp_Company_Back_UP.setValueAt(selectedCompany_Name, tablemodelBackUPCompany_Company_Back_UP.getRowCount() - 1, 0);
			tableCompanyBackUp_Company_Back_UP.setValueAt(selectedCompany_ID, tablemodelBackUPCompany_Company_Back_UP.getRowCount() - 1, 1);
			// remove row from table tableCompanyList
			tablemodelCompany_Company_Back_UP.removeRow(i);
			// decrease value of i(row) as one row removed 
			i--;
		    }
		}
		if (tableCompanyList_Company_Back_UP.getRowCount() > 0) {
		    tableCompanyList_Company_Back_UP.requestFocus();
		    tableCompanyList_Company_Back_UP.setRowSelectionInterval(0, 0);
		    tableCompanyBackUp_Company_Back_UP.clearSelection();
		} else {
		    tableCompanyBackUp_Company_Back_UP.requestFocus();
		    tableCompanyBackUp_Company_Back_UP.setRowSelectionInterval(0, 0);
		}
	    }
	}

    }//GEN-LAST:event_tableCompanyList_Company_Back_UPMouseClicked

    private void btnBackUP_Company_Back_UPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackUP_Company_Back_UPActionPerformed
	// TODO add your handling code here:

	// check Validation
	if (validation_Company_Back_UP()) {
	    try {
		Boolean flag = true;

		//	    ExecutorService executor = Executors.newSingleThreadExecutor();
		//	    Future<String> future = executor.submit(new Task());

//		Thread thread = new MyThread();
//		thread.start();
//
//		thread.join();
//
//		Thread thread1 = new MyThread1();
//		thread1.start();

		// for finding database of everyrow of back up table one by one
		for (int i = 0; i < tableCompanyBackUp_Company_Back_UP.getRowCount(); i++) {
		    System.out.println("row count");
		    String database = "";
		    for (CompanySettingsDTO companySettingsDTO : company_Information_DTOList_Company_Back_UP) {
			System.out.println("row ");
			// set Database Name of selected_Company for Database_BackUP
			if (companySettingsDTO.getCompany_name().equals(tableCompanyBackUp_Company_Back_UP.getValueAt(i, 0).toString().trim()) && companySettingsDTO.getCompany_id().toString().equals(tableCompanyBackUp_Company_Back_UP.getValueAt(i, 1).toString().trim())) {
			    database = companySettingsDTO.getCompany_DatabaseName();
			    System.out.println("3453453454354");
			    // take a backUP and check Bolean value so that remaining functinality should not work
			    backupDB_Company_Back_UP(database, "root", "adm", fileChooser_Company_Back_UP + "/" + database + ".sql");
			}
		    }
		}

		//check Boolean value so that remaining functinality should not work
		if (flag) {
		    /// create file with fileName of database.enc,database,company_name
		    createcompanyfile_Company_Back_UP(fileChooser_Company_Back_UP + "/");

		    // Encrypt the file
		    encryptFile_Company_Back_UP();

		    // Zip the Folder
		    Zipfile_Company_Back_UP(fileChooser_Company_Back_UP + "/");
		}
	    
		  initialise_Company_Back_UP();
	    } catch (Exception ex) {
		ex.printStackTrace();
		Logger.getLogger(DatabaseBackUp1.class.getName()).log(Level.SEVERE, null, ex);
	    }
	}
    }//GEN-LAST:event_btnBackUP_Company_Back_UPActionPerformed

    private void txtDestinationPath_Company_Back_UPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtDestinationPath_Company_Back_UPMouseClicked
	// TODO add your handling code here:
    }//GEN-LAST:event_txtDestinationPath_Company_Back_UPMouseClicked

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
	// TODO add your handling code here:
    }//GEN-LAST:event_jLabel2MouseClicked

    private void btnPath_Company_Back_UPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPath_Company_Back_UPMouseClicked
	// TODO add your handling code here:


	JFileChooser chooser = new JFileChooser();
	chooser.setCurrentDirectory(new java.io.File("."));
	chooser.setDialogTitle("choosertitle");
	chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
	chooser.setAcceptAllFileFilterUsed(false);

	if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
	    fileChooser_Company_Back_UP = chooser.getSelectedFile();
	    ///set selected file text ot txtDestinationPath
	    txtDestinationPath_Company_Back_UP.setText(fileChooser_Company_Back_UP.toString());
	} else {
	    System.out.println("No Selection ");
	}
    }//GEN-LAST:event_btnPath_Company_Back_UPMouseClicked

    private void btnPath_Company_Back_UPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPath_Company_Back_UPActionPerformed
	// TODO add your handling code here:
	JOptionPane.showMessageDialog(null, "Space is not Allow in folder Name where You take a Back UP ");
	btnPath_Company_Back_UPMouseClicked(null);
    }//GEN-LAST:event_btnPath_Company_Back_UPActionPerformed

    private void tableCompanyBackUp_Company_Back_UPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableCompanyBackUp_Company_Back_UPMouseClicked
	// TODO add your handling code here:

	int selectedCompany_index = tableCompanyBackUp_Company_Back_UP.getSelectedRow();
	// selected company_Name
	String selectedCompany_Name = "" + tableCompanyBackUp_Company_Back_UP.getValueAt(selectedCompany_index, 0);
	// selected company_ID
	String selectedCompany_ID = "" + tableCompanyBackUp_Company_Back_UP.getValueAt(selectedCompany_index, 1);

	// selected row must be greater than 0 
	if (tableCompanyBackUp_Company_Back_UP.getSelectedRow() >= 0) {
	    // getRowCount row must be greater than 0 
	    if (tableCompanyBackUp_Company_Back_UP.getRowCount() > 0) {
		// find selected row from tableCompanyRestoreUp
		for (int i = 0; i < tableCompanyBackUp_Company_Back_UP.getRowCount(); i++) {
		    // selected Row
		    if (tableCompanyBackUp_Company_Back_UP.isRowSelected(i)) {
			// move data of selected row from tableCompanyBackUp to  tableCompanyList  
			tablemodelCompany_Company_Back_UP.setRowCount(tableCompanyList_Company_Back_UP.getRowCount() + 1);
			tableCompanyList_Company_Back_UP.setValueAt(selectedCompany_Name, tableCompanyList_Company_Back_UP.getRowCount() - 1, 0);
			tableCompanyList_Company_Back_UP.setValueAt(selectedCompany_ID, tableCompanyList_Company_Back_UP.getRowCount() - 1, 1);
			// remove row from table tableCompanyBackUp
			tablemodelBackUPCompany_Company_Back_UP.removeRow(i);
			// decrease value of i(row) as one row removed 
			i--;
		    }
		}
		if (tableCompanyBackUp_Company_Back_UP.getRowCount() > 0) {
		    tableCompanyBackUp_Company_Back_UP.requestFocus();
		    tableCompanyBackUp_Company_Back_UP.setRowSelectionInterval(0, 0);
		    tableCompanyList_Company_Back_UP.clearSelection();
		} else {
		    tableCompanyList_Company_Back_UP.requestFocus();
		    tableCompanyList_Company_Back_UP.setRowSelectionInterval(0, 0);
		}
	    }
	}

    }//GEN-LAST:event_tableCompanyBackUp_Company_Back_UPMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBackUP_Company_Back_UP;
    private javax.swing.JButton btnPath_Company_Back_UP;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableCompanyBackUp_Company_Back_UP;
    private javax.swing.JTable tableCompanyList_Company_Back_UP;
    private javax.swing.JTextField txtDestinationPath_Company_Back_UP;
    // End of variables declaration//GEN-END:variables

    private void initialise_Company_Back_UP() {
	intilisecomponent_Company_Back_UP();
	bindData2GUI_Company_Back_UP();
	setnmenomics_Company_Back_UP();
    }

    private void setnmenomics_Company_Back_UP() {
	btnBackUP_Company_Back_UP.setMnemonic(KeyEvent.VK_B);
	btnPath_Company_Back_UP.setMnemonic(KeyEvent.VK_P);
    }

    private void intilisecomponent_Company_Back_UP() {

	String col[] = {"CompanyName", ""};
	String data[][] = {{"", ""}};
	tablemodelCompany_Company_Back_UP = new DefaultTableModel(data, col) {
	    @Override
	    public boolean isCellEditable(int row, int column) {
		return false;//This causes all cells to be not editable
	    }
	};
	tableCompanyList_Company_Back_UP.setModel(tablemodelCompany_Company_Back_UP);
	JTableHeader header = tableCompanyList_Company_Back_UP.getTableHeader();
	header.setBackground(Color.yellow);
	tablemodelCompany_Company_Back_UP.setRowCount(0);
	tablemodelCompany_Company_Back_UP.setColumnCount(2);

	String col1[] = {"CompanyName", ""};
	String data1[][] = {{"", ""}};
	tablemodelBackUPCompany_Company_Back_UP = new DefaultTableModel(data1, col1) {
	    @Override
	    public boolean isCellEditable(int row, int column) {
		return false;//This causes all cells to be not editable
	    }
	};
	tableCompanyBackUp_Company_Back_UP.setModel(tablemodelBackUPCompany_Company_Back_UP);
	JTableHeader header1 = tableCompanyBackUp_Company_Back_UP.getTableHeader();
	header1.setBackground(Color.yellow);
	tablemodelBackUPCompany_Company_Back_UP.setRowCount(0);
	tablemodelBackUPCompany_Company_Back_UP.setColumnCount(2);

	setColumnWidth_Company_Back_UP(tableCompanyList_Company_Back_UP);
	setColumnWidth_Company_Back_UP(tableCompanyBackUp_Company_Back_UP);

	company_SQLTxtFile_List_Company_Back_UP.clear();
	company_List_Enc_Company_Back_UP.clear();
	company_Information_DTOList_Company_Back_UP.clear();
	//backUP_Company_DTOList.clear();
    }

    // bind to GUI
    private void bindData2GUI_Company_Back_UP() {
	// call when Form open
	company_Information_DTOList_Company_Back_UP = CompanySettingsDAO.getComapany_List("", "");

	int rowCount = 0;
	for (CompanySettingsDTO companySettingsDTO : company_Information_DTOList_Company_Back_UP) {
	    if (!"information_schema".equalsIgnoreCase(companySettingsDTO.getCompany_name()) && !"performance_schema".equalsIgnoreCase(companySettingsDTO.getCompany_name())) {
		rowCount = tableCompanyList_Company_Back_UP.getRowCount();
		tablemodelCompany_Company_Back_UP.setRowCount(rowCount + 1);
		tableCompanyList_Company_Back_UP.setValueAt(companySettingsDTO.getCompany_name(), rowCount, 0);
		tableCompanyList_Company_Back_UP.setValueAt(companySettingsDTO.getCompany_id().toString(), rowCount, 1);
	    }
	}
	tableCompanyList_Company_Back_UP.requestFocus();
	tableCompanyList_Company_Back_UP.changeSelection(0, 0, false, false);
    }

    //take a back up
    public static boolean backupDB_Company_Back_UP(String dbName, String dbUserName, String dbPassword, String path) {
	Boolean flag = false;
	Process runtimeProcess;
	String executeCmd = "D:/MetalCopies/10-10-2013uploadcopy/server-Copy(2)/bin/mysqldump -u " + dbUserName + " -p" + dbPassword + " " + dbName + " -r " + path;

	try {
	    runtimeProcess = Runtime.getRuntime().exec(executeCmd);
	    int processComplete = runtimeProcess.waitFor();

	    if (processComplete == 0) {
		System.out.println("Backup created successfully");
		flag = true;
	    } else {
		System.out.println("Could not create the backup");
	    }
	    runtimeProcess.destroy();
	} catch (Exception ex) {
	    ex.printStackTrace();
	}
	return flag;
    }

    private void createcompanyfile_Company_Back_UP(String filepath) {
	/// create .SQL file with fileName of database.enc,database,company_name
	company_SQLTxtFile_List_Company_Back_UP = textFilesforSQL_Company_Back_UP(fileChooser_Company_Back_UP);
	PrintWriter writer = null;
	try {
	    writer = new PrintWriter(filepath + "All_Database_information.txt", "UTF-8");

	    // all rows of tableCompanyBackUp
	    for (int i = 0; i < tableCompanyBackUp_Company_Back_UP.getRowCount(); i++) {

		// all data of company_Information_DTOList
		for (CompanySettingsDTO companySettingsDTO : company_Information_DTOList_Company_Back_UP) {

//		    if (backUP_Company_DTOList.get(i).equals(companySettingsDTO.getCompany_name())) {
		    if (companySettingsDTO.getCompany_name().equals(tableCompanyBackUp_Company_Back_UP.getValueAt(i, 0).toString().trim()) && companySettingsDTO.getCompany_id().toString().equals(tableCompanyBackUp_Company_Back_UP.getValueAt(i, 1).toString().trim())) {
			// add comapny name in text file
			// space "$" to distingiush Name with ID
			writer.print("$" + companySettingsDTO.getCompany_name());
			// add database name  in text file 
			// space "$" to distingiush Name with ID
			writer.print("$" + companySettingsDTO.getCompany_DatabaseName());
			// add company ID in text file
			writer.print("$" + companySettingsDTO.getCompany_id());

			for (String company_file_Name : company_SQLTxtFile_List_Company_Back_UP) {
			    String database_name = "";
			    StringTokenizer st = new StringTokenizer(company_file_Name, ".");
			    while (st.hasMoreTokens()) {
				database_name = st.nextToken();
				break;
			    }

			    if (database_name.equals(companySettingsDTO.getCompany_DatabaseName())) {
				// add file name where databse present in text file
				writer.println("$" + company_file_Name);
			    }
			}
		    }
		}
	    }
	} catch (IOException ex) {
	    ex.printStackTrace();
	} finally {
	    try {
		writer.close();
	    } catch (Exception ex) {
		ex.printStackTrace();
	    }
	}
    }

    private void encryptFile_Company_Back_UP() {
	try {
	    byte[] encoded = "1234567890098765".getBytes();
	    SecretKey key1 = new SecretKeySpec(encoded, "AES");
	    AlgorithmParameterSpec paramSpec = new IvParameterSpec(iv);
	    ecipher_Company_Back_UP = Cipher.getInstance("AES/CBC/PKCS5Padding");
	    dcipher_Company_Back_UP = Cipher.getInstance("AES/CBC/PKCS5Padding");
	    ecipher_Company_Back_UP.init(Cipher.ENCRYPT_MODE, key1, paramSpec);
	    dcipher_Company_Back_UP.init(Cipher.DECRYPT_MODE, key1, paramSpec);

	    // Encrypt  the .SQL files
	    // all rows of tableCompanyBackUp
	    for (int i = 0; i < tableCompanyBackUp_Company_Back_UP.getRowCount(); i++) {
		// all data of company_Information_DTOList
		for (CompanySettingsDTO companySettingsDTO : company_Information_DTOList_Company_Back_UP) {
//		    if (backUP_Company_DTOList.get(i).equals(companySettingsDTO.getCompany_name())) {
		    if (companySettingsDTO.getCompany_name().equals(tableCompanyBackUp_Company_Back_UP.getValueAt(i, 0).toString().trim()) && companySettingsDTO.getCompany_id().toString().equals(tableCompanyBackUp_Company_Back_UP.getValueAt(i, 1).toString().trim())) {
			encrypt_Company_Back_UP(new FileInputStream(fileChooser_Company_Back_UP + "/" + companySettingsDTO.getCompany_DatabaseName() + ".sql"), new FileOutputStream(fileChooser_Company_Back_UP + "/" + companySettingsDTO.getCompany_DatabaseName() + ".enc"));
		    }
		}
	    }
	    // Encrypt the file of All All_Database_information.txt
	    encrypt_Company_Back_UP(new FileInputStream(fileChooser_Company_Back_UP + "/" + "All_Database_information" + ".txt"), new FileOutputStream(fileChooser_Company_Back_UP + "/" + "All_Database_information" + ".enc"));
	} catch (FileNotFoundException e) {
	    e.printStackTrace();
	    System.out.println("File Not Found:" + e.getMessage());
	} catch (InvalidAlgorithmParameterException e) {
	    e.printStackTrace();
	    System.out.println("Invalid Alogorithm Parameter:" + e.getMessage());
	} catch (NoSuchAlgorithmException e) {
	    e.printStackTrace();
	    System.out.println("No Such Algorithm:" + e.getMessage());
	} catch (NoSuchPaddingException e) {
	    e.printStackTrace();
	    System.out.println("No Such Padding:" + e.getMessage());
	} catch (InvalidKeyException e) {
	    e.printStackTrace();
	    System.out.println("Invalid Key:" + e.getMessage());
	}
    }

    private void Zipfile_Company_Back_UP(String filepath) {
	try {
	    Path target = Paths.get(fileChooser_Company_Back_UP + "/" + "ffdfdsgfd" + ".abc");
	    if (Files.exists(target)) {
		Files.delete(target);
	    }

	    zipArchieveName_Company_Back_UP = fileChooser_Company_Back_UP + "/" + "ffdfdsgfd.abc";
	    // Reference to the file we will be adding to the zipfile
	    BufferedInputStream origin = null;
	    // Reference to zip file
	    FileOutputStream dest = new FileOutputStream(zipArchieveName_Company_Back_UP);
	    // Wrap our destination zipfile with a ZipOutputStream
	    ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(dest));
	    // Create a byte[] buffer that we will read data from the source
	    // files into and then transfer it to the zip file
	    byte[] data = new byte[BUFFER_SIZE];
	    List files = new ArrayList();

	    company_List_Enc_Company_Back_UP = textFilesforEnc_Company_Back_UP(fileChooser_Company_Back_UP);
	    for (int i = 0; i < company_List_Enc_Company_Back_UP.size(); i++) {
		System.out.println("FFFFFFFFFFFFFFFFFFFFFFFFF" + company_List_Enc_Company_Back_UP.get(i));
		files.add(fileChooser_Company_Back_UP + "/" + company_List_Enc_Company_Back_UP.get(i));
	    }
	    // Iterate over all of the files in list
	    for (Iterator i = files.iterator(); i.hasNext();) {
		// Get a BufferedInputStream that we can use to read the source file
		String filename = (String) i.next();
		FileInputStream fi = new FileInputStream(filename);
		origin = new BufferedInputStream(fi, BUFFER_SIZE);
		// Setup the entry in the zip file
		ZipEntry entry = new ZipEntry(filename);
		out.putNextEntry(entry);
		// Read data from the source file and write it out to the zip file
		int count;
		while ((count = origin.read(data, 0, BUFFER_SIZE)) != -1) {
		    out.write(data, 0, count);
		}

		// Close the source file
		origin.close();
	    }
	    // Close the zip file
	    out.close();

	    // delete the file of .Enc 
	    // all rows of tableCompanyBackUp
	    for (int i = 0; i < tableCompanyBackUp_Company_Back_UP.getRowCount(); i++) {
		// all data of company_Information_DTOList
		for (CompanySettingsDTO companySettingsDTO : company_Information_DTOList_Company_Back_UP) {
		    if (companySettingsDTO.getCompany_name().equals(tableCompanyBackUp_Company_Back_UP.getValueAt(i, 0).toString().trim()) && companySettingsDTO.getCompany_id().toString().equals(tableCompanyBackUp_Company_Back_UP.getValueAt(i, 1).toString().trim())) {
			Path target1 = Paths.get(fileChooser_Company_Back_UP + "/" + companySettingsDTO.getCompany_DatabaseName() + ".enc");
			Files.deleteIfExists(target1);
		    }
		}
	    }

	    // delete the file of All_Database_information.Enc 
	    Path target5 = Paths.get(fileChooser_Company_Back_UP + "/" + "All_Database_information" + ".enc");
	    if (Files.exists(target5)) {
		Files.deleteIfExists(target5);
	    }

	    // delete the file of All_Database_information.txt 
	    Path target2 = Paths.get(fileChooser_Company_Back_UP + "/" + "All_Database_information" + ".txt");
	    if (Files.exists(target2)) {
		try {
		    // proc.WaitForExit(); 
		    Files.deleteIfExists(target2);
		} catch (IOException ex) {
		    ex.printStackTrace();
		    Logger.getLogger(DatabaseBackUp1.class.getName()).log(Level.SEVERE, null, ex);
		}
	    }

	    // delete the file of .SQL files 
	    // all rows of tableCompanyBackUp
	    for (int i = 0; i < tableCompanyBackUp_Company_Back_UP.getRowCount(); i++) {
		// all data of company_Information_DTOList
		for (CompanySettingsDTO companySettingsDTO : company_Information_DTOList_Company_Back_UP) {
		    if (companySettingsDTO.getCompany_name().equals(tableCompanyBackUp_Company_Back_UP.getValueAt(i, 0).toString().trim()) && companySettingsDTO.getCompany_id().toString().equals(tableCompanyBackUp_Company_Back_UP.getValueAt(i, 1).toString().trim())) {
			Path target1 = Paths.get(fileChooser_Company_Back_UP + "/" + companySettingsDTO.getCompany_DatabaseName() + ".sql");
			Files.delete(target1);
		    }
		}
	    }
	} catch (Exception e) {
	    e.printStackTrace();
	}
    }

    private static void encrypt_Company_Back_UP(InputStream is, OutputStream os) {
	try {
	    byte[] buf = new byte[1048576];
	    // bytes at this stream are first encoded
	    os = new CipherOutputStream(os, ecipher_Company_Back_UP);
	    // read in the clear text and write to out to encrypt
	    int numRead = 0;
	    while ((numRead = is.read(buf)) >= 0) {
		os.write(buf, 0, numRead);
	    }
	    // close all streams
	    os.close();
	} catch (IOException e) {
	    e.printStackTrace();
	    System.out.println("I/O Error:" + e.getMessage());
	}
    }

    // find all files of .enc 
    List<String> textFilesforEnc_Company_Back_UP(File dir) {
	List<String> textFiles = new ArrayList<String>();
	if (dir.listFiles() != null) {
	    for (File file : dir.listFiles()) {
		if (file.getName().endsWith((".enc"))) {
		    textFiles.add(file.getName());
		}
	    }
	} else {
	    JOptionPane.showMessageDialog(this, "Enter valid path");
	}

	return textFiles;
    }

    // find all files of .SQL 
    List<String> textFilesforSQL_Company_Back_UP(File dir) {
	List<String> textFiles = new ArrayList<String>();
	if (dir.listFiles() != null) {
	    for (File file : dir.listFiles()) {
		if (file.getName().endsWith((".sql"))) {
		    textFiles.add(file.getName());
		}
	    }
	} else {
	    JOptionPane.showMessageDialog(this, "Enter valid path");
	}

	return textFiles;
    }

    private Boolean validation_Company_Back_UP() {
	Boolean flag = true;
	if (tableCompanyBackUp_Company_Back_UP.getRowCount() == 0 || tableCompanyBackUp_Company_Back_UP.getRowCount() < 0) {
	    JOptionPane.showMessageDialog(null, "First Select Company To Bck UP");
	    flag = false;
	    btnPath_Company_Back_UP.requestFocus();
	} else if (txtDestinationPath_Company_Back_UP.getText().toString().trim().isEmpty()) {
	    JOptionPane.showMessageDialog(null, "First Select Destination Folder for  Back UP");
	    flag = false;
	    btnPath_Company_Back_UP.requestFocus();
	} else if (!txtDestinationPath_Company_Back_UP.getText().toString().trim().isEmpty()) {
	    String path = txtDestinationPath_Company_Back_UP.getText().toString().trim();
	    StringTokenizer token = new StringTokenizer(path, " ");
	    if (token.hasMoreTokens()) {
		JOptionPane.showMessageDialog(null, "Selected Destination Folder Contain Spaces which is Not Allowed ");
		flag = false;
		btnPath_Company_Back_UP.requestFocus();
	    }
	}

	return flag;
    }

    // set width to column of table
    private void setColumnWidth_Company_Back_UP(JTable passedTable) {
	DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
	rightRenderer.setHorizontalAlignment(JLabel.LEFT);

	DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
	centerRenderer.setHorizontalAlignment(JLabel.CENTER);

	passedTable.getColumnModel().getColumn(0).setCellRenderer(rightRenderer);
	passedTable.getColumnModel().getColumn(0).setPreferredWidth(0);
	passedTable.getColumnModel().getColumn(0).setMinWidth(360);
	passedTable.getColumnModel().getColumn(0).setMaxWidth(360);

	passedTable.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
	passedTable.getColumnModel().getColumn(1).setPreferredWidth(0);
	passedTable.getColumnModel().getColumn(1).setMinWidth(50);
	passedTable.getColumnModel().getColumn(1).setMaxWidth(50);

    }

    public static void main(String... arg) {
	DatabaseBackUp1 a = new DatabaseBackUp1("");
	a.setSize(600, 600);
	a.setVisible(true);
    }
//    ///////////////////////////
//    public void printMsg() {
//	Thread t = Thread.currentThread();
//	String name = t.getName();
//	t.interrupt();
//	Thread.currentThread().interrupt();
//
//	System.out.println("                     " + t.isInterrupted());
//	System.out.println("                     " + Thread.activeCount());
//	System.out.println("                     " + Thread.currentThread());
//	while (t.isAlive()) {
//	    System.out.println("name=" + name);
//	    System.out.println("name=" + t.isAlive());
//	    break;
//	}
//
//	System.out.println("name                     =" + name);
//	System.out.println("name                    =" + t.isAlive());
//
//    }
//    ////////////////////
//
//    class MyThread extends Thread {
//
//	boolean stop = false;
//
//	public void run() {
//
//	    try {
//		Thread.sleep(1);
//		// for finding database of everyrow of back up table one by one
//		for (int i = 0; i < tableCompanyBackUp.getRowCount(); i++) {
//		    System.out.println("row count");
//		    String database = "";
//		    for (CompanySettingsDTO companySettingsDTO : company_Information_DTOList) {
//			System.out.println("row ");
//			// set Database Name of selected_Company for Database_BackUP
//			if (companySettingsDTO.getCompany_name().equals(tableCompanyBackUp.getValueAt(i, 0).toString().trim()) && companySettingsDTO.getCompany_id().toString().equals(tableCompanyBackUp.getValueAt(i, 1).toString().trim())) {
//			    database = companySettingsDTO.getCompany_DatabaseName();
//			    System.out.println("3453453454354");
//			    // take a backUP and check Bolean value so that remaining functinality should not work
//			    backupDB_Company_Back_UP(database, "root", "adm", fileChooser_Company_Back_UP + "/" + database + ".sql");
//			}
//		    }
//
//		}
//		printMsg();
//
//	    } catch (InterruptedException q) {
//		q.printStackTrace();
//	    }
//
//	}
//    }
//
//    class MyThread1 extends Thread {
//
//	boolean stop = false;
//
//	public void run() {
//	    System.out.println("Another Thread ---------------------------------");
//	    printMsg();
//	    //check Boolean value so that remaining functinality should not work
////	    if (flag) {
//	    /// create file with fileName of database.enc,database,company_name
//	    createcompanyfile(fileChooser_Company_Back_UP + "/");
//
//	    // Encrypt the file
//	    encryptFile();
//
//	    // Zip the Folder
//	    Zipfile(fileChooser_Company_Back_UP + "/");
////	    }
//	    //printMsg();
//	}
//    }
////    class Task implements Callable<String> {
////
////	@Override
////	public String call() throws Exception {
////	    // for finding database of everyrow of back up table one by one
////	    for (int i = 0; i < tableCompanyBackUp.getRowCount(); i++) {
////		System.out.println("row count");
////		String database = "";
////		for (CompanySettingsDTO companySettingsDTO : company_Information_DTOList) {
////		    System.out.println("row ");
////		    // set Database Name of selected_Company for Database_BackUP
////		    if (companySettingsDTO.getCompany_name().equals(tableCompanyBackUp.getValueAt(i, 0).toString().trim()) && companySettingsDTO.getCompany_id().toString().equals(tableCompanyBackUp.getValueAt(i, 1).toString().trim())) {
////			database = companySettingsDTO.getCompany_DatabaseName();
////			System.out.println("3453453454354");
////			// take a backUP and check Bolean value so that remaining functinality should not work
////			backupDB_Company_Back_UP(database, "root", "adm", fileChooser_Company_Back_UP + "/" + database + ".sql");
////		    }
////		}
////	    }
////	return "Ready!";
////	}
////         
////    }
}
