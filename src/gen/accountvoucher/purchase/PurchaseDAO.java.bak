/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gen.accountvoucher.purchase;

import gen.ImpExp.ImpExpUtil;
import gen.ImpExp.TagsHelper1;
import gen.dto.Constants;
import gen.accountvoucher.purchase.PurchaseDTO;
import gen.accountvoucher.helper.AccountingVoucherHelper;
import gen.accountvoucher.sale.SaleDTO;
import gen.database.connection.DatabaseConnection1;
import gen.dto.StockItemTransactionDTO;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 *
 * @author pc5
 */
public class PurchaseDAO {

    public static void insertPurchaseVoucher(List<PurchaseDTO> PurchaseFormDTOList) throws SQLException, Exception {

        Connection conn = null;
        try {

            conn = DatabaseConnection1.GetConnection();
            conn.setAutoCommit(false);

            //create vat ledger if not present and insert into database
            Map<String, String> LedgerNameToIDMapping = new HashMap<String, String>();
            //@todo - Need to remove query from for loop
            for (PurchaseDTO purchaseDTO : PurchaseFormDTOList) {
                String queryStr = "select ledger_Id, ledger_name from tblLedger where ledger_name in (?)";
                System.out.println("queryStr==>>" + queryStr);
                PreparedStatement ps = conn.prepareStatement(queryStr, Statement.RETURN_GENERATED_KEYS);
                ps.setString(1, gen.dto.Constants.vatTransactionLedgerString_Purchase + purchaseDTO.getVatRate() + "%");
                ResultSet rs = ps.executeQuery();
                if (rs.next()) {
                    LedgerNameToIDMapping.put(rs.getString("ledger_name"), rs.getString("ledger_id"));
                } else {
                    String queryOne = "insert into tblLedger(ledger_name,ledger_under,isdeletable) values(?,? , ?)";
                    PreparedStatement ps1 = conn.prepareStatement(queryOne, Statement.RETURN_GENERATED_KEYS);
                    ps1.setString(1, gen.dto.Constants.vatTransactionLedgerString_Purchase + purchaseDTO.getVatRate() + "%");
                    // This is the id of Duties and Taxex.
                    ps1.setString(2, "72");
                    ps1.setInt(3, 1);       // ledger can not be deleted
                    ps1.executeUpdate();
                    ResultSet rs1 = ps1.getGeneratedKeys();
                    while (rs1.next()) {
                        LedgerNameToIDMapping.put(gen.dto.Constants.vatTransactionLedgerString_Purchase + purchaseDTO.getVatRate() + "%", rs1.getInt(1) + "");
                    }

                    ps1.close();
                }
                ps.close();
            }

            //@todo - Need to remove query from for loop
            {
                String queryStr = "select ledger_Id, ledger_name from tblLedger where ledger_name in (?)";
                System.out.println("queryStr==>>" + queryStr);
                PreparedStatement ps = conn.prepareStatement(queryStr, Statement.RETURN_GENERATED_KEYS);
                ps.setString(1, gen.dto.Constants.ROUND_OFF_LEDGER);
                ResultSet rs = ps.executeQuery();
                if (rs.next()) {
                    LedgerNameToIDMapping.put(rs.getString("ledger_name"), rs.getString("ledger_id"));
                } else {
                    String queryOne = "insert into tblLedger(ledger_name,ledger_under,isdeletable) values(?,?,?)";
                    PreparedStatement ps1 = conn.prepareStatement(queryOne, Statement.RETURN_GENERATED_KEYS);
                    ps1.setString(1, gen.dto.Constants.ROUND_OFF_LEDGER);
                    // This is the id of Duties and Taxex.
                    ps1.setString(2, "64"); // Indirect expense gouop Under
                    ps1.setInt(3, 1);       // ledger can not be deleted
                    ps1.executeUpdate();
                    ResultSet rs1 = ps1.getGeneratedKeys();
                    while (rs1.next()) {
                        LedgerNameToIDMapping.put(gen.dto.Constants.ROUND_OFF_LEDGER, rs1.getInt(1) + "");
                    }

                    ps1.close();
                }
                ps.close();
            }


            String queryOne = "insert into tblTransactionMain(trans_receiptNo,trans_date,trans_typeIndex,trans_narration,trans_grandtotal,trans_payment) values(?,?,?,?,?,?)";
            PreparedStatement ps = conn.prepareStatement(queryOne, Statement.RETURN_GENERATED_KEYS);
            for (PurchaseDTO purchaseDTO : PurchaseFormDTOList) {
                ps.setInt(1, (purchaseDTO.getReceiptNo()));
		java.util.Date date = gen.dto.Constants.simpleDateFormatDatabaseWithDash.parse(purchaseDTO.getDate().trim());
                java.sql.Date sqlStartDate = new Date(date.getTime());
                ps.setDate(2, sqlStartDate);
                ps.setInt(3, Constants.PURCHASE_TYPE_INDEX);
                ps.setString(4, purchaseDTO.getNote().toString());
                ps.setDouble(5, Double.parseDouble(purchaseDTO.getFinalAmount().toString()));
                ps.setString(6, purchaseDTO.getPaymentMode().toString());
                ps.addBatch();

            }
            if (!PurchaseFormDTOList.isEmpty()) {
            ps.executeBatch();
            }
            ResultSet rs = ps.getGeneratedKeys();
            List<Integer> idList = new ArrayList<Integer>();
            while (rs.next()) {
                idList.add(rs.getInt(1));
            }
            ps.close();

            int i = 0;
            String queryTwo = "insert into tblTransactionVat(trans_id,vat_rate,vat_amt) values(?,?,?)";
            PreparedStatement ps1 = conn.prepareStatement(queryTwo);
            String queryThree = "insert into tblTransactionOtherDetails(trans_id,trans_amt,trans_reference,trans_payment) values(?,?,?,?)";
            PreparedStatement ps2 = conn.prepareStatement(queryThree);
            for (PurchaseDTO purchaseDTO : PurchaseFormDTOList) {
                Integer fk = idList.get(i);
                ps1.setInt(1, fk);
                ps1.setDouble(2, purchaseDTO.getVatRate());
                ps1.setDouble(3, purchaseDTO.getVatAmount());
                ps1.addBatch();

                ps2.setInt(1, fk);
                ps2.setDouble(2, purchaseDTO.getAmount());
                ps2.setString(3, purchaseDTO.getPurchaseReference());
                ps2.setString(4, purchaseDTO.getPaymentMode());
                ps2.addBatch();
                i++;
            }
            if (!PurchaseFormDTOList.isEmpty()) {
            ps1.executeBatch();
            ps2.executeBatch();
            }

            String queryFour = "insert into tblTransactionLedger(trans_id,trans_ledgerId,trans_type,trans_index,trans_amt,IsAvaibleToUser) values(?,?,?,?,?,?)";
            PreparedStatement ps6 = conn.prepareStatement(queryFour);
            i = 0;
            for (PurchaseDTO purchaseDTO : PurchaseFormDTOList) {
                Integer fk = idList.get(i);
                ps6.setInt(1, fk);
                ps6.setInt(2, Integer.parseInt(purchaseDTO.getPurchaseLedger().toString()));
                ps6.setInt(3, Constants.CREDIT);
                ps6.setInt(4, 0);
                ps6.setDouble(5, purchaseDTO.getAmount());
                ps6.setInt(6, 1); //IsAvailable to User
                ps6.addBatch();

                ps6.setInt(1, fk);
                ps6.setInt(2, Integer.parseInt(purchaseDTO.getCashLedger()));
                ps6.setInt(3, Constants.DEBIT);
		ps6.setInt(4, 0);
                ps6.setDouble(5, purchaseDTO.getFinalAmount());
                ps6.setInt(6, 1); //IsAvailable to User
		ps6.addBatch();

                //if vat is non zero then insert into tbltransaction ledger
                if (purchaseDTO.getVatRate() != 0D && purchaseDTO.getVatAmount() != 0D) {
                    ps6.setInt(1, fk);
                    System.out.println("===>>" + LedgerNameToIDMapping.keySet());
                    System.out.println("===>>" + gen.dto.Constants.vatTransactionLedgerString_Purchase + purchaseDTO.getVatRate() + "%");
                    ps6.setInt(2, Integer.parseInt(LedgerNameToIDMapping.get(gen.dto.Constants.vatTransactionLedgerString_Purchase + purchaseDTO.getVatRate() + "%")));
                    ps6.setInt(3, Constants.CREDIT);      //1 for credit
                    ps6.setInt(4, 0);      //index of ledger on form
                    ps6.setDouble(5, purchaseDTO.getVatAmount());
                    ps6.setInt(6, 2); //not IsAvailable to User
                    ps6.addBatch();
                }

                //if round off is non zero then insert into tbltransaction ledger
                if(purchaseDTO.getRoundOfAmount()!= null && purchaseDTO.getRoundOfAmount() != 0D){
                    ps6.setInt(1, fk);
                    ps6.setInt(2, Integer.parseInt(LedgerNameToIDMapping.get(gen.dto.Constants.ROUND_OFF_LEDGER)));
                    ps6.setInt(3, Constants.CREDIT);      //1 for credit
                    ps6.setInt(4, 0);      //index of ledger on form
                    ps6.setDouble(5, purchaseDTO.getRoundOfAmount());
                    ps6.setInt(6, 2); //not IsAvailable to User
                ps6.addBatch();
                }

                i++;

            }
            if (!PurchaseFormDTOList.isEmpty()) {
            ps6.executeBatch();
            }
            ps6.close();

            i = 0;
            String queryFive = "insert into tblInventoryTransaction(trans_id,invtrans_type) values(?,?)";
            PreparedStatement ps3 = conn.prepareStatement(queryFive, Statement.RETURN_GENERATED_KEYS);
            for (PurchaseDTO purchaseDTO : PurchaseFormDTOList) {
                Integer fk = idList.get(i);
                ps3.setInt(1, fk);
                ps3.setString(2, Constants.PURCHASE_TYPE_INDEX.toString());
                ps3.addBatch();
                i++;
            }
            if (!PurchaseFormDTOList.isEmpty()) {
            ps3.executeBatch();
            }

            ResultSet rs1 = ps3.getGeneratedKeys();
            List<Integer> idList1 = new ArrayList<Integer>();
            while (rs1.next()) {
                idList1.add(rs1.getInt(1));
            }
            ps3.close();
            i = 0;
            String querySix = "insert into tblInventoryTransactionItems(invtrans_id,invtrans_itemId,invtrans_qty,invtrans_rate,invtrans_amount,invtrans_totalSize,invtrans_index,invtrans_making,invtrans_length,invtrans_width,invtrans_thickness) values(?,?,?,?,?,?,?,?,?,?,?)";
            PreparedStatement ps4 = conn.prepareStatement(querySix);
            for (PurchaseDTO purchaseDTO : PurchaseFormDTOList) {
                Integer fk = idList1.get(i);
                int k = 0;
                for (StockItemTransactionDTO stockItemTransactionDTO : purchaseDTO.getStockItemTreansactioDTOList()) {

                    ps4.setInt(1, fk);
                    ps4.setInt(2, Integer.parseInt(stockItemTransactionDTO.getName().toString()));
                    ps4.setDouble(3, Double.parseDouble(stockItemTransactionDTO.getQuantity().toString()));
                    ps4.setDouble(4, Double.parseDouble(stockItemTransactionDTO.getRate().toString()));
                    ps4.setDouble(5, Double.parseDouble(stockItemTransactionDTO.getAmount().toString()));
                    ps4.setDouble(6, Double.parseDouble(stockItemTransactionDTO.getSqFeet().toString()));
                    ps4.setInt(7, k);
                    ps4.setDouble(8, 0.0);
                    ps4.setDouble(9, Double.parseDouble(stockItemTransactionDTO.getLength().toString()));
                    ps4.setDouble(10, Double.parseDouble(stockItemTransactionDTO.getWidth().toString()));
                    ps4.setDouble(11, Double.parseDouble(stockItemTransactionDTO.getThkness().toString()));

                    ps4.addBatch();
                    k++;
                }
                i++;

            }
            if (!PurchaseFormDTOList.isEmpty()) {
                ps4.executeBatch();
            }
                ps4.close();
                conn.commit();
                conn.close();

        } catch (Exception e) {
            if (conn != null && !conn.isClosed()) {
                conn.close();
            }
            e.printStackTrace();
            throw e;
        }
    }

    public static List<PurchaseDTO> getPurchase(Set<String> receiptIDSet, String calling_Class) throws SQLException, Exception {
        Connection con = null;
        List<PurchaseDTO> purchaseDTOList = new ArrayList<PurchaseDTO>();
        try {
            if (receiptIDSet == null || receiptIDSet.isEmpty()) {
                return null;
            }

            con = DatabaseConnection1.GetConnection();
            con.setAutoCommit(false);
            for (String receiptID : receiptIDSet) {

                String queryOne = "SELECT      tbltransactionmain.trans_id AS tbltransactionmain_trans_id,tblinventorytransaction.invtrans_id AS tblinventorytransaction_invtrans_id,     tblinventorytransaction.trans_id AS tblinventorytransaction_trans_id,     tblinventorytransaction.invtrans_type AS tblinventorytransaction_invtrans_type,     tblinventorytransaction.dat AS tblinventorytransaction_dat,     tblinventorytransactionitems.invtrans_id AS tblinventorytransactionitems_invtrans_id,     tblinventorytransactionitems.invtrans_qty AS tblinventorytransactionitems_invtrans_qty,     tblinventorytransactionitems.invtrans_rate AS tblinventorytransactionitems_invtrans_rate,     tblinventorytransactionitems.invtrans_amount AS tblinventorytransactionitems_invtrans_amount,     tblinventorytransactionitems.invtrans_totalSize AS tblinventorytransactionitems_invtrans_totalSize,     tblinventorytransactionitems.invtrans_index AS tblinventorytransactionitems_invtrans_index,     tblinventorytransactionitems.invtrans_itemId AS tblinventorytransactionitems_invtrans_itemId,     tblinventorytransactionitems.invtrans_finishType AS tblinventorytransactionitems_invtrans_finishType,     tblinventorytransactionitems.invtrans_length AS tblinventorytransactionitems_invtrans_length,     tblinventorytransactionitems.invtrans_width AS tblinventorytransactionitems_invtrans_width,     tblinventorytransactionitems.invtrans_thickness AS tblinventorytransactionitems_invtrans_thickness,     tblinventorytransactionitems.invtrans_making AS tblinventorytransactionitems_invtrans_making,     tblledger.ledger_id AS tblledger_ledger_id,     tblledger.ledger_name AS tblledger_ledger_name,     tblstockitem.si_name AS tblstockitem_si_name,     tblstockitem.si_id AS tblstockitem_si_id,     tbltransactionmain.trans_id AS tbltransactionmain_trans_id,     tbltransactionmain.trans_date AS tbltransactionmain_trans_date,     tbltransactionmain.trans_typeIndex AS tbltransactionmain_trans_typeIndex,     tbltransactionmain.trans_narration AS tbltransactionmain_trans_narration,     tbltransactionmain.trans_grandtotal AS tbltransactionmain_trans_grandtotal,     tbltransactionmain.trans_transport AS tbltransactionmain_trans_transport,     tbltransactionmain.trans_lessBillAmt AS tbltransactionmain_trans_lessBillAmt,     tbltransactionmain.trans_payment AS tbltransactionmain_trans_payment,    tbltransactionledger.IsAvaibleToUser AS tbltransactionledger_IsAvaibleToUser , tbltransactionledger.trans_checkNo AS tbltransactionledger_trans_checkNo,     tbltransactionledger.trans_amt AS tbltransactionledger_trans_amt,     tbltransactionmain.trans_narration AS tbltransactionledger_trans_narration,     tbltransactionledger.trans_index AS tbltransactionledger_trans_index,     tbltransactionledger.trans_type AS tbltransactionledger_trans_type,     tbltransactionledger.trans_ledgerId AS tbltransactionledger_trans_ledgerId,     tbltransactionledger.trans_id AS tbltransactionledger_trans_id,     tbltransactionvat.trans_id AS tbltransactionvat_trans_id,     tbltransactionvat.vat_rate AS tbltransactionvat_vat_rate,     tbltransactionvat.vat_amt AS tbltransactionvat_vat_amt,     tbltransactionvat.discount_rate AS tbltransactionvat_discount_rate,    tbltransactionvat.shipping AS tbltransactionvat_shipping,     tbltransactionvat.discount_amt AS tbltransactionvat_discount_amt,     tbltransactionotherdetails.trans_id AS tbltransactionotherdetails_trans_id,     tbltransactionotherdetails.trans_reference AS tbltransactionotherdetails_trans_reference,     tbltransactionotherdetails.trans_buyerOrderNo AS tbltransactionotherdetails_trans_buyerOrderNo,     tbltransactionotherdetails.trans_dispatchDocThrough AS tbltransactionotherdetails_trans_dispatchDocThrough,     tbltransactionotherdetails.trans_dispatchDocNo AS tbltransactionotherdetails_trans_dispatchDocNo,     tbltransactionotherdetails.trans_amt AS tbltransactionotherdetails_trans_amt,     tbltransactionotherdetails.trans_payment AS tbltransactionotherdetails_trans_payment,     tbltransactionotherdetails.trans_vehicleNo AS tbltransactionotherdetails_trans_vehicleNo,     tbltransactionotherdetails.trans_challanNo AS tbltransactionotherdetails_trans_challanNo,     tbltransactionotherdetails.trans_poNo AS tbltransactionotherdetails_trans_poNo,     tbltransactionotherdetails.trans_challanDate AS tbltransactionotherdetails_trans_challanDate,     tbltransactionotherdetails.trans_poDate AS tbltransactionotherdetails_trans_poDate,     tbltransactionmain.trans_receiptNo AS tbltransactionmain_trans_receiptNo FROM      tblinventorytransaction tblinventorytransaction INNER JOIN tblinventorytransactionitems tblinventorytransactionitems ON tblinventorytransaction.invtrans_id = tblinventorytransactionitems.invtrans_id     INNER JOIN tblstockitem tblstockitem ON tblinventorytransactionitems.invtrans_itemId = tblstockitem.si_id     INNER JOIN tbltransactionmain tbltransactionmain ON tblinventorytransaction.trans_id = tbltransactionmain.trans_id     INNER JOIN tbltransactionledger tbltransactionledger ON tbltransactionmain.trans_id = tbltransactionledger.trans_id     INNER JOIN tbltransactionotherdetails tbltransactionotherdetails ON tbltransactionmain.trans_id = tbltransactionotherdetails.trans_id     INNER JOIN tbltransactionvat tbltransactionvat ON tbltransactionmain.trans_id = tbltransactionvat.trans_id     INNER JOIN tblledger tblledger ON tbltransactionledger.trans_ledgerId = tblledger.ledger_id WHERE trans_typeIndex = " + Constants.PURCHASE_TYPE_INDEX + " and     trans_receiptNo = " + receiptID + "  and tbltransactionledger.IsAvaibleToUser = 1 order by tbltransactionmain.trans_date asc";
                PreparedStatement psmt = con.prepareStatement(queryOne);
                ResultSet rs = psmt.executeQuery();
                PurchaseDTO purchaseDTO = new PurchaseDTO();
                List<StockItemTransactionDTO> stockItemTransactionDTOList = new ArrayList<StockItemTransactionDTO>();
                Boolean isAdded = false;
                while (rs.next()) {
                    if (rs.getInt("tbltransactionledger_trans_type") == Constants.DEBIT && isAdded == false) {
                        purchaseDTO.setTrans_ID(rs.getString("tbltransactionmain_trans_id"));
                        purchaseDTO.setAmount(rs.getDouble("tbltransactionotherdetails_trans_amt"));
                        purchaseDTO.setCashLedger(rs.getString("tblledger_ledger_name"));
                        purchaseDTO.setDate(rs.getString("tbltransactionmain_trans_date"));
                        purchaseDTO.setFinalAmount(rs.getDouble("tbltransactionmain_trans_grandtotal"));
                        purchaseDTO.setNote(rs.getString("tbltransactionledger_trans_narration"));
                        purchaseDTO.setReceiptNo(rs.getInt("tbltransactionmain_trans_receiptNo"));
                        purchaseDTO.setPaymentMode(rs.getString("tbltransactionmain_trans_payment"));
                        purchaseDTO.setVatAmount(rs.getDouble("tbltransactionvat_vat_amt"));
                        purchaseDTO.setVatRate(rs.getDouble("tbltransactionvat_vat_rate"));
                        System.out.println("Purchas ereference 00000000    = " + rs.getString("tbltransactionotherdetails_trans_reference"));
                        purchaseDTO.setPurchaseReference(rs.getString("tbltransactionotherdetails_trans_reference"));
                        isAdded = true;
                    }
                    if (rs.getInt("tbltransactionledger_trans_type") == Constants.CREDIT) {
                        purchaseDTO.setPurchaseLedger(rs.getString("tblledger_ledger_name"));

                        StockItemTransactionDTO stockItemTransactionDTO = new StockItemTransactionDTO();
                        stockItemTransactionDTO.setAmount(rs.getDouble("tblinventorytransactionitems_invtrans_amount"));
                        stockItemTransactionDTO.setLength(rs.getDouble("tblinventorytransactionitems_invtrans_length"));
                        stockItemTransactionDTO.setName(rs.getString("tblstockitem_si_name"));
                        stockItemTransactionDTO.setRate(rs.getDouble("tblinventorytransactionitems_invtrans_rate"));
                        stockItemTransactionDTO.setQuantity(rs.getDouble("tblinventorytransactionitems_invtrans_qty"));
                        stockItemTransactionDTO.setSqFeet(rs.getDouble("tblinventorytransactionitems_invtrans_totalSize"));
                        stockItemTransactionDTO.setThkness(rs.getDouble("tblinventorytransactionitems_invtrans_thickness"));
                        stockItemTransactionDTO.setWidth(rs.getDouble("tblinventorytransactionitems_invtrans_width"));
                        stockItemTransactionDTOList.add(stockItemTransactionDTO);

                    }
                }
                purchaseDTO = ImpExpUtil.valiDateAndRepairPurchaseDTO(purchaseDTO);
                purchaseDTO.setStockItemTreansactioDTOList(stockItemTransactionDTOList);

		if (!calling_Class.isEmpty()) {
		    gen.ImpExp.TagsHelper1.ledgerNameSet.add(purchaseDTO.getCashLedger());
		    gen.ImpExp.TagsHelper1.ledgerNameSet.add(purchaseDTO.getPurchaseLedger());
		    for (StockItemTransactionDTO stktransactionDTO : purchaseDTO.getStockItemTreansactioDTOList()) {
			gen.ImpExp.TagsHelper1.stockItemNameSet.add(stktransactionDTO.getName());
		    }
		}

                purchaseDTOList.add(purchaseDTO);
            }
            con.commit();
            con.close();
        } catch (Exception e) {
            if (con != null && !con.isClosed()) {
                con.close();
            }
            e.printStackTrace();
            throw e;
        }
        return purchaseDTOList;
    }

    public static List<PurchaseDTO> getTransactionList() throws SQLException, Exception {
        List<PurchaseDTO> purchaseDTOTransactionList = new ArrayList<PurchaseDTO>();
        Connection conn = null;
        try {
            conn = DatabaseConnection1.GetConnection();
            conn.setAutoCommit(false);
            if (gen.dto.Constants.OFFSET_VALUE < 0L) {
                gen.dto.Constants.OFFSET_VALUE = 0L;
            }
            if (gen.accountvoucher.chalan.ChalanDAO.getCount_transaction(Constants.PURCHASE_TYPE_INDEX, Constants.DEBIT) < gen.dto.Constants.OFFSET_VALUE) {
                gen.dto.Constants.OFFSET_VALUE = gen.dto.Constants.OFFSET_VALUE - gen.other.AdSuMuDiSettingsOLD.AdSuMuDiConstant.map_checkBoxValue.get("pagination");
            }

	    String queryOne = "SELECT tbltransactionmain.trans_id AS tbltransactionmain_trans_id,tbltransactionledger.trans_id AS tbltransactionledger_trans_id,tbltransactionledger.trans_ledgerId AS tbltransactionledger_trans_ledgerId, tblledger.ledger_name AS tblledger_ledger_name, tbltransactionledger.IsAvaibleToUser AS tbltransactionledger_IsAvaibleToUser ,  tbltransactionmain.trans_receiptNo AS tbltransactionmain_trans_receiptNo,  tbltransactionmain.trans_date AS tbltransactionmain_trans_date,  tbltransactionmain.trans_typeIndex AS tbltransactionmain_trans_typeIndex,  tbltransactionotherdetails.trans_reference AS tbltransactionotherdetails_trans_reference FROM  tbltransactionmain tbltransactionmain INNER JOIN tbltransactionledger tbltransactionledger ON tbltransactionmain.trans_id = tbltransactionledger.trans_id   INNER JOIN tblledger tblledger ON tbltransactionledger.trans_ledgerId = tblledger.ledger_id INNER JOIN tbltransactionotherdetails tbltransactionotherdetails ON tbltransactionmain.trans_id = tbltransactionotherdetails.trans_id  where trans_type=" + Constants.DEBIT + "  and trans_typeIndex=" + Constants.PURCHASE_TYPE_INDEX + " and tbltransactionledger.IsAvaibleToUser = 1 order by  trans_receiptNo Asc  LIMIT " + gen.other.AdSuMuDiSettingsOLD.AdSuMuDiConstant.map_checkBoxValue.get("pagination") + " OFFSET " + gen.dto.Constants.OFFSET_VALUE + "";
            PreparedStatement psmt = conn.prepareStatement(queryOne);
            ResultSet rs = psmt.executeQuery();
            while (rs.next()) {
                PurchaseDTO purchaseDTO = new PurchaseDTO();
                purchaseDTO.setReceiptNo(rs.getInt("tbltransactionmain_trans_receiptNo"));
                purchaseDTO.setDate(rs.getString("tbltransactionmain_trans_date"));
                purchaseDTO.setPurchaseLedger(rs.getString("tblledger_ledger_name"));
                purchaseDTO.setPurchaseReference(rs.getString("tbltransactionotherdetails_trans_reference"));
                purchaseDTOTransactionList.add(purchaseDTO);
            }
            conn.commit();
            conn.close();
        } catch (Exception e) {
            if (conn != null && !conn.isClosed()) {
                conn.close();
            }
            e.printStackTrace();
            throw e;
        }
        return purchaseDTOTransactionList;
    }

    public static void deleteTransaction(long transID) throws SQLException, Exception {
        try {
            AccountingVoucherHelper.deleteTransaction(transID, Constants.PURCHASE_TYPE_INDEX);
        } catch (Exception e) {
            e.printStackTrace();
            throw e;
        }
    }

    public static void deleteReords(long transID, Connection conn) throws SQLException, Exception {
//        Connection conn = null;
        try {
//            conn = DatabaseConnection1.GetConnection();
//            conn.setAutoCommit(false);
            Statement st1 = conn.createStatement();
            Statement st2 = conn.createStatement();
            Statement st3 = conn.createStatement();
            String query;

            query = "delete from tblinventorytransactionitems where invtrans_id in(select invtrans_id from tblinventorytransaction where trans_id=" + transID + ")";
            st1.executeUpdate(query);

            query = "delete from tbltransactionledger where trans_id=" + transID + "";
            st2.executeUpdate(query);

            query = "delete from tbltransactionotherdetails where trans_id=" + transID + "";
            st2.executeUpdate(query);

            query = "delete from tbltransactionvat where trans_id=" + transID + "";
            st3.executeUpdate(query);

            st1.close();
            st2.close();
            st3.close();
//            conn.commit();
//            conn.close();
        } catch (Exception e) {
            if (conn != null && !conn.isClosed()) {
//                conn.close();
            }
            e.printStackTrace();
            throw e;
        }
    }

    public static void updatePurchaseVoucher(List<PurchaseDTO> purchaseFormDTOList) throws Exception {
        Connection conn = null;

        try {
            conn = DatabaseConnection1.GetConnection();
            conn.setAutoCommit(false);
            for (PurchaseDTO purchaseDTO : purchaseFormDTOList) {
                deleteReords(Long.parseLong(purchaseDTO.getTrans_ID()), conn);
            }

//            conn = DatabaseConnection1.GetConnection();

            //create vat ledger if not present and insert into database
            Map<String, String> LedgerNameToIDMapping = new HashMap<String, String>();
            //@todo - Need to remove query from for loop
            for (PurchaseDTO purchaseDTO : purchaseFormDTOList) {
                String queryStr = "select ledger_Id, ledger_name from tblLedger where ledger_name in (?)";
                System.out.println("queryStr==>>" + queryStr);
                PreparedStatement ps = conn.prepareStatement(queryStr, Statement.RETURN_GENERATED_KEYS);
                ps.setString(1, gen.dto.Constants.vatTransactionLedgerString_Purchase + purchaseDTO.getVatRate() + "%");
                ResultSet rs = ps.executeQuery();
                if (rs.next()) {
                    LedgerNameToIDMapping.put(rs.getString("ledger_name"), rs.getString("ledger_id"));
                } else {
                    String queryOne = "insert into tblLedger(ledger_name,ledger_under,isdeletable) values(?,?,?)";
                    PreparedStatement ps1 = conn.prepareStatement(queryOne, Statement.RETURN_GENERATED_KEYS);
                    ps1.setString(1, gen.dto.Constants.vatTransactionLedgerString_Purchase + purchaseDTO.getVatRate() + "%");
                    // This is the id of Duties and Taxex.
                    ps1.setString(2, "72");
                    ps1.setInt(3, 1);       // ledger can not be deleted
                    ps1.executeUpdate();
                    ResultSet rs1 = ps1.getGeneratedKeys();
                    while (rs1.next()) {
                        LedgerNameToIDMapping.put(gen.dto.Constants.vatTransactionLedgerString_Purchase + purchaseDTO.getVatRate() + "%", rs1.getInt(1) + "");
                    }

                    ps1.close();
                }
                ps.close();
	    }
            
            //@todo - Need to remove query from for loop
            {
                String queryStr = "select ledger_Id, ledger_name from tblLedger where ledger_name in (?)";
                System.out.println("queryStr==>>" + queryStr);
                PreparedStatement ps = conn.prepareStatement(queryStr, Statement.RETURN_GENERATED_KEYS);
                ps.setString(1, gen.dto.Constants.ROUND_OFF_LEDGER);
                ResultSet rs = ps.executeQuery();
                if(rs.next()){
                    LedgerNameToIDMapping.put(rs.getString("ledger_name"), rs.getString("ledger_id"));
                }else{
                    String queryOne = "insert into tblLedger(ledger_name,ledger_under,isdeletable) values(?,?,?)";
                    PreparedStatement ps1 = conn.prepareStatement(queryOne, Statement.RETURN_GENERATED_KEYS);
                    ps1.setString(1, gen.dto.Constants.ROUND_OFF_LEDGER);
                    // This is the id of Duties and Taxex.
                    ps1.setString(2, "64"); // Indirect expense gouop Under
                    ps1.setInt(3, 1);       // ledger can not be deleted
                    ps1.executeUpdate();
                    ResultSet rs1 = ps1.getGeneratedKeys();
                    while(rs1.next()){
                        LedgerNameToIDMapping.put(gen.dto.Constants.ROUND_OFF_LEDGER, rs1.getInt(1) + "");
                    }
                    
                    ps1.close();
                }
                ps.close();
            }


            String queryOne = "update tblTransactionMain set trans_receiptNo = ?,trans_date = ?, trans_typeIndex = ?, trans_narration = ?,trans_grandtotal = ?,trans_payment = ? where trans_id = ?";
            PreparedStatement ps = conn.prepareStatement(queryOne);
            for (PurchaseDTO purchaseDTO : purchaseFormDTOList) {
                ps.setInt(1, (purchaseDTO.getReceiptNo()));
		java.util.Date date = gen.dto.Constants.simpleDateFormatDatabaseWithDash.parse(purchaseDTO.getDate().trim());
                java.sql.Date sqlStartDate = new Date(date.getTime());
                ps.setDate(2, sqlStartDate);
                ps.setInt(3, Constants.PURCHASE_TYPE_INDEX);
                ps.setString(4, purchaseDTO.getNote().toString());
                ps.setDouble(5, Double.parseDouble(purchaseDTO.getFinalAmount().toString()));
                ps.setString(6, purchaseDTO.getPaymentMode().toString());
                ps.setDouble(7, Long.parseLong(purchaseDTO.getTrans_ID().toString()));
                ps.addBatch();
            }
            ps.executeBatch();
            ps.close();

            int i = 0;
            String queryTwo = "insert into tblTransactionVat(trans_id,vat_rate,vat_amt) values(?,?,?)";
            PreparedStatement ps1 = conn.prepareStatement(queryTwo);
            String queryThree = "insert into tblTransactionOtherDetails(trans_id,trans_amt,trans_reference,trans_payment) values(?,?,?,?)";
            PreparedStatement ps2 = conn.prepareStatement(queryThree);
            for (PurchaseDTO purchaseDTO : purchaseFormDTOList) {
                ps1.setLong(1, Long.parseLong(purchaseDTO.getTrans_ID()));
                ps1.setDouble(2, purchaseDTO.getVatRate());
                ps1.setDouble(3, purchaseDTO.getVatAmount());

                ps1.addBatch();

                ps2.setLong(1, Long.parseLong(purchaseDTO.getTrans_ID()));
                ps2.setDouble(2, purchaseDTO.getAmount());
                ps2.setString(3, purchaseDTO.getPurchaseReference());
                ps2.setString(4, "" + 0);

                ps2.addBatch();
                i++;
            }
            ps1.executeBatch();
            ps2.executeBatch();

            String queryFour = "insert into tblTransactionLedger(trans_id,trans_ledgerId,trans_type,trans_index,trans_amt,IsAvaibleToUser) values(?,?,?,?,?,?)";
            PreparedStatement ps6 = conn.prepareStatement(queryFour);
            i = 0;
            for (PurchaseDTO purchaseDTO : purchaseFormDTOList) {
                ps6.setLong(1, Long.parseLong(purchaseDTO.getTrans_ID()));
                ps6.setInt(2, Integer.parseInt(purchaseDTO.getPurchaseLedger().toString()));
                ps6.setInt(3, Constants.CREDIT);
                ps6.setInt(4, 0);
		ps6.setDouble(5, purchaseDTO.getAmount());
                ps6.setInt(6, 1); //IsAvailable to User
                ps6.addBatch();

                ps6.setLong(1, Long.parseLong(purchaseDTO.getTrans_ID()));
                ps6.setInt(2, Integer.parseInt(purchaseDTO.getCashLedger()));
                ps6.setInt(3, Constants.DEBIT);
		ps6.setInt(4, 0);
                ps6.setDouble(5, purchaseDTO.getFinalAmount());
                ps6.setInt(6, 1); //IsAvailable to User
                ps6.addBatch();

                //if vat is non zero then insert into tbltransaction ledger
                if (purchaseDTO.getVatRate() != 0D && purchaseDTO.getVatAmount() != 0D) {
                    ps6.setLong(1, Long.parseLong(purchaseDTO.getTrans_ID()));
                    System.out.println("===>>" + LedgerNameToIDMapping.keySet());
                    System.out.println("===>>" + gen.dto.Constants.vatTransactionLedgerString_Purchase + purchaseDTO.getVatRate() + "%");
                    ps6.setInt(2, Integer.parseInt(LedgerNameToIDMapping.get(gen.dto.Constants.vatTransactionLedgerString_Purchase + purchaseDTO.getVatRate() + "%")));
                    ps6.setInt(3, Constants.CREDIT);      //1 for credit
                    ps6.setInt(4, 0);      //index of ledger on form
                    ps6.setDouble(5, purchaseDTO.getVatAmount());
                    ps6.setInt(6, 2); //not IsAvailable to User
		ps6.addBatch();
                }
                
                //if round off is non zero then insert into tbltransaction ledger
                if(purchaseDTO.getRoundOfAmount()!= null && purchaseDTO.getRoundOfAmount() != 0D){
                    ps6.setInt(1, Integer.valueOf(purchaseDTO.getTrans_ID()));
                    ps6.setInt(2, Integer.parseInt(LedgerNameToIDMapping.get(gen.dto.Constants.ROUND_OFF_LEDGER)));
                    ps6.setInt(3, Constants.CREDIT);      //1 for credit
                    ps6.setInt(4, 0);      //index of ledger on form
                    ps6.setDouble(5, purchaseDTO.getRoundOfAmount());
                    ps6.setInt(6, 2); //not IsAvailable to User
                    ps6.addBatch();
                }

                i++;

            }
            ps6.executeBatch();
            ps6.close();


            //todo
            i = 0;
            List<Integer> idList = new ArrayList<Integer>();
            String queryFive = "update tblInventoryTransaction set trans_id = ?,invtrans_type = ? where invtrans_id =?";
            PreparedStatement ps3 = conn.prepareStatement(queryFive);
            for (PurchaseDTO purchaseDTO : purchaseFormDTOList) {
                ps = conn.prepareStatement("select invtrans_id from tblInventoryTransaction where trans_id = " + Long.parseLong(purchaseDTO.getTrans_ID()));
                ResultSet rs = ps.executeQuery();
                while (rs.next()) {
                    idList.add(rs.getInt(1));
                }
                ps.close();
                i = 0;
                Integer fk = idList.get(i);
                ps3.setLong(1, Long.parseLong(purchaseDTO.getTrans_ID()));
                ps3.setString(2, Constants.PURCHASE_TYPE_INDEX.toString());
                ps3.setLong(3, fk);
                ps3.addBatch();
                i++;
            }
            ps3.executeBatch();
            ps3.close();

            i = 0;
            String querySix = "insert into tblInventoryTransactionItems(invtrans_id,invtrans_itemId,invtrans_qty,invtrans_rate,invtrans_amount,invtrans_totalSize,invtrans_index,invtrans_making,invtrans_length,invtrans_width,invtrans_thickness) values(?,?,?,?,?,?,?,?,?,?,?)";
            PreparedStatement ps4 = conn.prepareStatement(querySix);
            for (PurchaseDTO purchaseDTO : purchaseFormDTOList) {
                Integer fk = idList.get(i);
                int k = 0;
                for (StockItemTransactionDTO stockItemTransactionDTO : purchaseDTO.getStockItemTreansactioDTOList()) {

                    ps4.setInt(1, fk);
                    ps4.setInt(2, Integer.parseInt(stockItemTransactionDTO.getName().toString()));
                    ps4.setDouble(3, Double.parseDouble(stockItemTransactionDTO.getQuantity().toString()));
                    ps4.setDouble(4, Double.parseDouble(stockItemTransactionDTO.getRate().toString()));
                    ps4.setDouble(5, Double.parseDouble(stockItemTransactionDTO.getAmount().toString()));
                    ps4.setDouble(6, Double.parseDouble(stockItemTransactionDTO.getSqFeet().toString()));
                    ps4.setInt(7, k);
                    ps4.setDouble(8, 0.0);
                    ps4.setDouble(9, Double.parseDouble(stockItemTransactionDTO.getLength().toString()));
                    ps4.setDouble(10, Double.parseDouble(stockItemTransactionDTO.getWidth().toString()));
                    ps4.setDouble(11, Double.parseDouble(stockItemTransactionDTO.getThkness().toString()));
                    ps4.addBatch();

                    k++;
                }
                i++;
            }
            ps4.executeBatch();
            ps4.close();
            conn.commit();
            conn.close();
        } catch (Exception e) {
            if (conn != null && !conn.isClosed()) {
                conn.close();
            }
            e.printStackTrace();
            throw e;
        }
    }
}
