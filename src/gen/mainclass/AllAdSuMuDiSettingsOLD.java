/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gen.mainclass;

import AdSuMuDiNetworks.TestEmailSender;
import AdSuMuDiNetworks.TestSMS;
import AdSuMuDiNetworks.TestSMSDTO;
import AdSuMuDiSecurity.SetWaitTimer;
import com.sun.xml.internal.ws.wsdl.writer.document.StartWithExtensionsType;
import gen.database.connection.DatabaseConnection1;
import gen.other.AdSuMuDiSettingsOLD.AdSuMuDiSettingsDAO;
import gen.other.backup.UserEmailSetting;
import gen.other.login.ChangePass;
import gen.other.login.NetworkSettings;
import gen.other.login.UserRightSetting;
import gen.other.print.PrinterSettings;
import java.awt.EventQueue;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.beans.PropertyVetoException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DesktopManager;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author pc5
 */
public class AllAdSuMuDiSettingsOLD extends javax.swing.JInternalFrame {

    /**
     * Creates new form AllAdSuMuDiSettingsOLD
     */
    String choice = "";
    String SMSchoice = "";
    String EMailchoice = "";
    String stockItemName = "";
    String stockItemQuantity = "";
    String stockItemAmount = "";
    //String enableSMSSending = "";
    //String disableSMSSending = "";
    //String enableSMSSendingWithAsk = "";
    Map<String, String> map_Field_With_ID = new HashMap<String, String>();
    Map<String, String> map_checkBoxValue = new HashMap<String, String>();
    ResultSet resultSet;
    String q = "";
    JTextField tf;
    //ArrayList<String> GroupItems=new ArrayList<String>();
    //private final Vector<String> v = new Vector<String>();
    JTextField tfChangePassword = new JTextField();
    Vector<String> vChangePassword = new Vector<String>();
    JTextField tfChangeEMailSettings = new JTextField();
    Vector<String> vChangeEMailSettings = new Vector<String>();
    JTextField tfChangeUserRightSettings = new JTextField();
    Vector<String> vChangeUserRightSettings = new Vector<String>();
    public static int flagDirectPrint = 1;
    public static int flagPrintPageSize = 1;
    public static int flagPrintPageFormat = 1;
    byte[] b1;
    private String source = null;
    static int control = 0;
    static final String dir = System.getProperty("user.dir");

    public AllAdSuMuDiSettingsOLD() {
        try {
            this.setSelected(true);
            initComponents();
        } catch (PropertyVetoException ex) {
            Logger.getLogger(AllAdSuMuDiSettingsOLD.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        applicationSettingsPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        texture = new javax.swing.JCheckBox();
        aero = new javax.swing.JCheckBox();
        aluminium = new javax.swing.JCheckBox();
        macwin = new javax.swing.JCheckBox();
        luna = new javax.swing.JCheckBox();
        acryl = new javax.swing.JCheckBox();
        mint = new javax.swing.JCheckBox();
        fast = new javax.swing.JCheckBox();
        graphite = new javax.swing.JCheckBox();
        smart = new javax.swing.JCheckBox();
        buttonApply = new javax.swing.JButton();
        buttonExit = new javax.swing.JButton();
        jPanelPreview = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldPaginationValue = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jCheckBoxStockItemName = new javax.swing.JCheckBox();
        jCheckBoxQuantity = new javax.swing.JCheckBox();
        jCheckBoxAmount = new javax.swing.JCheckBox();
        jButtonParticularOK = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jCheckBoxEnableSMSSend = new javax.swing.JCheckBox();
        jCheckBoxDisableSMSSend = new javax.swing.JCheckBox();
        jCheckBoxEnableSMSSendWithAsk = new javax.swing.JCheckBox();
        jButtonEnableDisableOK = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jCheckBoxEnableEMail = new javax.swing.JCheckBox();
        jCheckBoxDisableEMail = new javax.swing.JCheckBox();
        jButtonEMailOK2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldSender = new javax.swing.JTextField();
        jPasswordFieldPassword = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        jButtonApply = new javax.swing.JButton();
        jButtonExit = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        txtNameOfGod = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        txtCompanyName = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        txtCompanyAlias = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtCompanyTagLine = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtCompanyAddress = new javax.swing.JTextArea();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        txtCompanyContact = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        txtCompanyMail = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        txtCompanyITN = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtCompanySTN = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        txtCompanyCSTNo = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtCompanyDeclaration = new javax.swing.JTextArea();
        jLabel38 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtCompanyTermsConditions = new javax.swing.JTextArea();
        jLabel39 = new javax.swing.JLabel();
        txtCompanySignature = new javax.swing.JTextField();
        btncompanyClear = new javax.swing.JButton();
        btnCompanyCreate = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        LogoPanelView = new javax.swing.JLabel();
        jButtonUpdateLogo = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        createUserPanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtUname = new javax.swing.JTextField();
        txtPass = new javax.swing.JPasswordField();
        txtConfirmPass = new javax.swing.JPasswordField();
        jLabel10 = new javax.swing.JLabel();
        NUButtonCreateUser = new javax.swing.JButton();
        NUButtonBack = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        optAdmin = new javax.swing.JRadioButton();
        optNormalUser = new javax.swing.JRadioButton();
        jLabel12 = new javax.swing.JLabel();
        txtEmailId = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        checkGroupLedger = new javax.swing.JCheckBox();
        checkReport = new javax.swing.JCheckBox();
        checkAccVouchers = new javax.swing.JCheckBox();
        checkProduction = new javax.swing.JCheckBox();
        btnAll = new javax.swing.JButton();
        btnNone = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        txtEmailpass = new javax.swing.JPasswordField();
        changePasswordPanel = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        CPButtonChange = new javax.swing.JButton();
        CPButtonBack = new javax.swing.JButton();
        CPTxtPassword = new javax.swing.JPasswordField();
        CPTxtNewPassword = new javax.swing.JPasswordField();
        comboChangePassword = new javax.swing.JComboBox();
        jLabel18 = new javax.swing.JLabel();
        CPTxtConfirmPassword = new javax.swing.JPasswordField();
        emailSettingsPanel = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        comboChangeEMailSetting = new javax.swing.JComboBox();
        jLabel21 = new javax.swing.JLabel();
        UESTxtEmailID = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        UESButtonChange = new javax.swing.JButton();
        UESButtonBack = new javax.swing.JButton();
        UESTxtEmailPassword = new javax.swing.JPasswordField();
        userRightSettingsPanel = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        URSCheckGroupLedger = new javax.swing.JCheckBox();
        URSCheckReport = new javax.swing.JCheckBox();
        URSCheckAccVouchers = new javax.swing.JCheckBox();
        URSCheckProduction = new javax.swing.JCheckBox();
        jLabel25 = new javax.swing.JLabel();
        URSOptAdmin = new javax.swing.JRadioButton();
        URSOptNormalUser = new javax.swing.JRadioButton();
        URSButtonChange = new javax.swing.JButton();
        URSButtonBack = new javax.swing.JButton();
        jLabel26 = new javax.swing.JLabel();
        comboUserRightSettings = new javax.swing.JComboBox();
        deleteUserPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jLabel27 = new javax.swing.JLabel();
        DUButtonBack = new javax.swing.JButton();
        DUButtonDelete = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        optYes = new javax.swing.JRadioButton();
        optNo = new javax.swing.JRadioButton();
        jPanel16 = new javax.swing.JPanel();
        optPdf = new javax.swing.JRadioButton();
        optHtml = new javax.swing.JRadioButton();
        optWord = new javax.swing.JRadioButton();
        optExcel = new javax.swing.JRadioButton();
        jPanel17 = new javax.swing.JPanel();
        optA4 = new javax.swing.JRadioButton();
        optA5 = new javax.swing.JRadioButton();
        optAsk = new javax.swing.JRadioButton();
        btnSave = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel41 = new javax.swing.JLabel();

        setClosable(true);
        setTitle(org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.title")); // NOI18N
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Kasturi-logo-1.png"))); // NOI18N
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTabbedPane1.setToolTipText(org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jTabbedPane1.toolTipText")); // NOI18N

        applicationSettingsPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(texture, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.texture.text")); // NOI18N
        texture.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                textureMouseClicked(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(aero, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.aero.text")); // NOI18N
        aero.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                aeroMouseClicked(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(aluminium, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.aluminium.text")); // NOI18N
        aluminium.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                aluminiumMouseClicked(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(macwin, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.macwin.text")); // NOI18N
        macwin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                macwinMouseClicked(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(luna, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.luna.text")); // NOI18N
        luna.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lunaMouseClicked(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(acryl, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.acryl.text")); // NOI18N
        acryl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                acrylMouseClicked(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mint, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.mint.text")); // NOI18N
        mint.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mintMouseClicked(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(fast, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.fast.text")); // NOI18N
        fast.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fastMouseClicked(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(graphite, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.graphite.text")); // NOI18N
        graphite.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                graphiteMouseClicked(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(smart, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.smart.text")); // NOI18N
        smart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                smartMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(macwin, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(aluminium, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                    .addComponent(aero, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(texture, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(luna, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(mint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fast, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(graphite, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(smart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(acryl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 325, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(texture)
                    .addComponent(acryl))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aero)
                    .addComponent(mint))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aluminium)
                    .addComponent(fast))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(macwin)
                    .addComponent(graphite))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(luna)
                    .addComponent(smart)))
        );

        org.openide.awt.Mnemonics.setLocalizedText(buttonApply, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.buttonApply.text")); // NOI18N
        buttonApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonApplyActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(buttonExit, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.buttonExit.text")); // NOI18N
        buttonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExitActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jPanelPreview, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jPanelPreview.text")); // NOI18N
        jPanelPreview.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel40, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel40.text")); // NOI18N

        javax.swing.GroupLayout applicationSettingsPanelLayout = new javax.swing.GroupLayout(applicationSettingsPanel);
        applicationSettingsPanel.setLayout(applicationSettingsPanelLayout);
        applicationSettingsPanelLayout.setHorizontalGroup(
            applicationSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(applicationSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(applicationSettingsPanelLayout.createSequentialGroup()
                .addGroup(applicationSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(applicationSettingsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2))
                    .addGroup(applicationSettingsPanelLayout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(jPanelPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(applicationSettingsPanelLayout.createSequentialGroup()
                        .addGap(216, 216, 216)
                        .addComponent(buttonApply)
                        .addGap(42, 42, 42)
                        .addComponent(buttonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, applicationSettingsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel40)
                .addGap(238, 238, 238))
        );
        applicationSettingsPanelLayout.setVerticalGroup(
            applicationSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(applicationSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel40)
                .addGroup(applicationSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(applicationSettingsPanelLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 77, Short.MAX_VALUE))
                    .addGroup(applicationSettingsPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(applicationSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonApply)
                            .addComponent(buttonExit))
                        .addGap(28, 28, 28))))
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel4.text")); // NOI18N

        jTextFieldPaginationValue.setText(org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jTextFieldPaginationValue.text")); // NOI18N
        jTextFieldPaginationValue.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldPaginationValueKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap(65, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldPaginationValue, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(55, 55, 55))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextFieldPaginationValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(applicationSettingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(537, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(applicationSettingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jPanel1.TabConstraints.tabTitle"), jPanel1); // NOI18N

        jPanel2.setToolTipText(org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jPanel2.toolTipText")); // NOI18N

        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel3.text")); // NOI18N

        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel6.setPreferredSize(new java.awt.Dimension(220, 220));

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxStockItemName, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jCheckBoxStockItemName.text")); // NOI18N
        jCheckBoxStockItemName.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxStockItemNameItemStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxQuantity, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jCheckBoxQuantity.text")); // NOI18N
        jCheckBoxQuantity.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxQuantityItemStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxAmount, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jCheckBoxAmount.text")); // NOI18N
        jCheckBoxAmount.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxAmountItemStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButtonParticularOK, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jButtonParticularOK.text")); // NOI18N
        jButtonParticularOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonParticularOKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jCheckBoxStockItemName, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                            .addComponent(jCheckBoxQuantity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(jButtonParticularOK)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jCheckBoxStockItemName)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxQuantity)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxAmount)
                .addGap(18, 18, 18)
                .addComponent(jButtonParticularOK)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel7.setPreferredSize(new java.awt.Dimension(220, 220));

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxEnableSMSSend, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jCheckBoxEnableSMSSend.text")); // NOI18N
        jCheckBoxEnableSMSSend.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBoxEnableSMSSendMouseClicked(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxDisableSMSSend, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jCheckBoxDisableSMSSend.text")); // NOI18N
        jCheckBoxDisableSMSSend.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBoxDisableSMSSendMouseClicked(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxEnableSMSSendWithAsk, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jCheckBoxEnableSMSSendWithAsk.text")); // NOI18N
        jCheckBoxEnableSMSSendWithAsk.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBoxEnableSMSSendWithAskMouseClicked(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButtonEnableDisableOK, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jButtonEnableDisableOK.text")); // NOI18N
        jButtonEnableDisableOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEnableDisableOKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonEnableDisableOK)
                .addGap(84, 84, 84))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jCheckBoxDisableSMSSend, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                    .addComponent(jCheckBoxEnableSMSSend, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxEnableSMSSendWithAsk, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jCheckBoxEnableSMSSend)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxDisableSMSSend)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxEnableSMSSendWithAsk)
                .addGap(18, 18, 18)
                .addComponent(jButtonEnableDisableOK)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(218, 218, 218)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(27, 27, 27)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(81, Short.MAX_VALUE))
        );

        jPanel11.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxEnableEMail, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jCheckBoxEnableEMail.text")); // NOI18N
        jCheckBoxEnableEMail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBoxEnableEMailMouseClicked(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxDisableEMail, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jCheckBoxDisableEMail.text")); // NOI18N
        jCheckBoxDisableEMail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBoxDisableEMailMouseClicked(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButtonEMailOK2, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jButtonEMailOK2.text")); // NOI18N
        jButtonEMailOK2.setDoubleBuffered(true);
        jButtonEMailOK2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEMailOK2ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel5.text")); // NOI18N

        jTextFieldSender.setText(org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jTextFieldSender.text")); // NOI18N

        jPasswordFieldPassword.setText(org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jPasswordFieldPassword.text")); // NOI18N

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxEnableEMail)
                    .addComponent(jCheckBoxDisableEMail))
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jButtonEMailOK2)
                        .addContainerGap(194, Short.MAX_VALUE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldSender)
                            .addComponent(jPasswordFieldPassword))
                        .addGap(30, 30, 30))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(121, 121, 121))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldSender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxEnableEMail))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPasswordFieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxDisableEMail))
                .addGap(18, 18, 18)
                .addComponent(jButtonEMailOK2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel1.text")); // NOI18N

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(193, 193, 193))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(155, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(jButtonApply, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jButtonApply.text")); // NOI18N
        jButtonApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonApplyActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButtonExit, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jButtonExit.text")); // NOI18N
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButtonApply, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(322, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(156, 156, 156)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonExit)
                    .addComponent(jButtonApply))
                .addGap(46, 46, 46))
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jPanel2.TabConstraints.tabTitle"), jPanel2); // NOI18N

        jPanel18.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        txtNameOfGod.setText(org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.txtNameOfGod.text")); // NOI18N
        txtNameOfGod.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNameOfGodKeyPressed(evt);
            }
        });

        jLabel28.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel28, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel28.text")); // NOI18N

        txtCompanyName.setText(org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.txtCompanyName.text")); // NOI18N
        txtCompanyName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCompanyNameFocusGained(evt);
            }
        });
        txtCompanyName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCompanyNameKeyPressed(evt);
            }
        });

        jLabel29.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel29, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel29.text")); // NOI18N

        jLabel30.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel30, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel30.text")); // NOI18N

        txtCompanyAlias.setText(org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.txtCompanyAlias.text")); // NOI18N
        txtCompanyAlias.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCompanyAliasFocusGained(evt);
            }
        });
        txtCompanyAlias.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCompanyAliasKeyPressed(evt);
            }
        });

        txtCompanyTagLine.setColumns(20);
        txtCompanyTagLine.setRows(5);
        txtCompanyTagLine.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCompanyTagLineFocusGained(evt);
            }
        });
        txtCompanyTagLine.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCompanyTagLineKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(txtCompanyTagLine);

        txtCompanyAddress.setColumns(20);
        txtCompanyAddress.setRows(5);
        txtCompanyAddress.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCompanyAddressFocusGained(evt);
            }
        });
        txtCompanyAddress.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCompanyAddressKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(txtCompanyAddress);

        jLabel31.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel31, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel31.text")); // NOI18N

        jLabel32.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel32, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel32.text")); // NOI18N

        txtCompanyContact.setText(org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.txtCompanyContact.text")); // NOI18N
        txtCompanyContact.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCompanyContactKeyPressed(evt);
            }
        });

        jLabel33.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel33, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel33.text")); // NOI18N

        txtCompanyMail.setText(org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.txtCompanyMail.text")); // NOI18N
        txtCompanyMail.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCompanyMailFocusGained(evt);
            }
        });
        txtCompanyMail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCompanyMailKeyPressed(evt);
            }
        });

        jLabel34.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel34, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel34.text")); // NOI18N

        txtCompanyITN.setText(org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.txtCompanyITN.text")); // NOI18N
        txtCompanyITN.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCompanyITNKeyPressed(evt);
            }
        });

        jLabel35.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel35, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel35.text")); // NOI18N

        txtCompanySTN.setText(org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.txtCompanySTN.text")); // NOI18N
        txtCompanySTN.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCompanySTNKeyPressed(evt);
            }
        });

        jLabel36.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel36, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel36.text")); // NOI18N

        txtCompanyCSTNo.setText(org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.txtCompanyCSTNo.text")); // NOI18N
        txtCompanyCSTNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCompanyCSTNoKeyPressed(evt);
            }
        });

        jLabel37.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel37, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel37.text")); // NOI18N

        txtCompanyDeclaration.setColumns(20);
        txtCompanyDeclaration.setRows(5);
        txtCompanyDeclaration.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCompanyDeclarationFocusGained(evt);
            }
        });
        txtCompanyDeclaration.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCompanyDeclarationKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(txtCompanyDeclaration);

        jLabel38.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel38, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel38.text")); // NOI18N

        txtCompanyTermsConditions.setColumns(20);
        txtCompanyTermsConditions.setRows(5);
        txtCompanyTermsConditions.setPreferredSize(new java.awt.Dimension(168, 94));
        txtCompanyTermsConditions.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCompanyTermsConditionsFocusGained(evt);
            }
        });
        txtCompanyTermsConditions.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCompanyTermsConditionsKeyPressed(evt);
            }
        });
        jScrollPane5.setViewportView(txtCompanyTermsConditions);

        jLabel39.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel39, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel39.text")); // NOI18N

        txtCompanySignature.setText(org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.txtCompanySignature.text")); // NOI18N
        txtCompanySignature.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCompanySignatureFocusGained(evt);
            }
        });
        txtCompanySignature.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCompanySignatureKeyPressed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btncompanyClear, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.btncompanyClear.text")); // NOI18N
        btncompanyClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncompanyClearActionPerformed(evt);
            }
        });
        btncompanyClear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btncompanyClearKeyPressed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnCompanyCreate, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.btnCompanyCreate.text")); // NOI18N
        btnCompanyCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompanyCreateActionPerformed(evt);
            }
        });
        btnCompanyCreate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnCompanyCreateKeyPressed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnUpdate, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.btnUpdate.text")); // NOI18N
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnEdit, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.btnEdit.text")); // NOI18N
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addComponent(jLabel28)
                        .addGap(28, 28, 28)
                        .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNameOfGod, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCompanyName)))
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel39)
                            .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel18Layout.createSequentialGroup()
                                .addComponent(txtCompanySignature, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(156, 156, 156))
                            .addComponent(jScrollPane5)))
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel34)
                            .addComponent(jLabel35)
                            .addComponent(jLabel36)
                            .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCompanyITN, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtCompanySTN)
                            .addComponent(txtCompanyCSTNo)
                            .addComponent(jScrollPane2)))
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel30)
                            .addComponent(jLabel31)
                            .addComponent(jLabel32)
                            .addComponent(jLabel33)
                            .addComponent(jLabel29))
                        .addGap(40, 40, 40)
                        .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCompanyAlias, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                                .addComponent(txtCompanyContact, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                                .addComponent(jScrollPane3)
                                .addComponent(txtCompanyMail)))))
                .addGap(0, 84, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel18Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btncompanyClear, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCompanyCreate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnUpdate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(127, 127, 127))
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtNameOfGod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCompanyName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel28))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCompanyAlias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel29))
                .addGap(12, 12, 12)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel30))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel31)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel32))
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtCompanyContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCompanyMail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel33))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(txtCompanyITN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel35)
                    .addComponent(txtCompanySTN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(txtCompanyCSTNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel37)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel39)
                            .addComponent(txtCompanySignature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13)
                        .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btncompanyClear)
                            .addComponent(btnCompanyCreate)
                            .addComponent(btnUpdate)
                            .addComponent(btnEdit)))
                    .addComponent(jLabel38))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(LogoPanelView, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.LogoPanelView.text")); // NOI18N
        LogoPanelView.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        org.openide.awt.Mnemonics.setLocalizedText(jButtonUpdateLogo, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jButtonUpdateLogo.text")); // NOI18N
        jButtonUpdateLogo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateLogoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(LogoPanelView, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButtonUpdateLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65)))
                .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(456, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(LogoPanelView, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonUpdateLogo)))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jPanel3.TabConstraints.tabTitle"), jPanel3); // NOI18N

        createUserPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        createUserPanel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                createUserPanelFocusLost(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel6.text")); // NOI18N

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel7.text")); // NOI18N

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel8.text")); // NOI18N

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel9, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel9.text")); // NOI18N

        txtUname.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtUname.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtUnameFocusGained(evt);
            }
        });
        txtUname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUnameKeyPressed(evt);
            }
        });

        txtPass.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtPass.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPassFocusGained(evt);
            }
        });
        txtPass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPassKeyPressed(evt);
            }
        });

        txtConfirmPass.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtConfirmPass.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtConfirmPassFocusGained(evt);
            }
        });
        txtConfirmPass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtConfirmPassKeyPressed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel10, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel10.text")); // NOI18N

        NUButtonCreateUser.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(NUButtonCreateUser, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.NUButtonCreateUser.text")); // NOI18N
        NUButtonCreateUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NUButtonCreateUserActionPerformed(evt);
            }
        });

        NUButtonBack.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(NUButtonBack, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.NUButtonBack.text")); // NOI18N
        NUButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NUButtonBackActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel11, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel11.text")); // NOI18N

        optAdmin.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(optAdmin, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.optAdmin.text")); // NOI18N
        optAdmin.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                optAdminStateChanged(evt);
            }
        });
        optAdmin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                optAdminKeyPressed(evt);
            }
        });

        optNormalUser.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(optNormalUser, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.optNormalUser.text")); // NOI18N
        optNormalUser.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                optNormalUserStateChanged(evt);
            }
        });
        optNormalUser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                optNormalUserKeyPressed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel12, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel12.text")); // NOI18N

        txtEmailId.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtEmailId.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtEmailIdFocusGained(evt);
            }
        });
        txtEmailId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtEmailIdKeyPressed(evt);
            }
        });

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jPanel14.border.title"))); // NOI18N
        jPanel14.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N

        checkGroupLedger.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(checkGroupLedger, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.checkGroupLedger.text")); // NOI18N
        checkGroupLedger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkGroupLedgerActionPerformed(evt);
            }
        });
        checkGroupLedger.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                checkGroupLedgerKeyPressed(evt);
            }
        });

        checkReport.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(checkReport, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.checkReport.text")); // NOI18N
        checkReport.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                checkReportKeyPressed(evt);
            }
        });

        checkAccVouchers.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(checkAccVouchers, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.checkAccVouchers.text")); // NOI18N
        checkAccVouchers.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                checkAccVouchersKeyPressed(evt);
            }
        });

        checkProduction.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(checkProduction, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.checkProduction.text")); // NOI18N
        checkProduction.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                checkProductionKeyPressed(evt);
            }
        });

        btnAll.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnAll, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.btnAll.text")); // NOI18N
        btnAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllActionPerformed(evt);
            }
        });

        btnNone.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnNone, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.btnNone.text")); // NOI18N
        btnNone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNoneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(btnAll, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnNone))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkAccVouchers)
                            .addComponent(checkGroupLedger))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkReport)
                            .addComponent(checkProduction)))))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkGroupLedger)
                    .addComponent(checkReport))
                .addGap(18, 18, 18)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkAccVouchers)
                    .addComponent(checkProduction))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAll)
                    .addComponent(btnNone))
                .addContainerGap())
        );

        jLabel13.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel13, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel13.text")); // NOI18N

        txtEmailpass.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N

        javax.swing.GroupLayout createUserPanelLayout = new javax.swing.GroupLayout(createUserPanel);
        createUserPanel.setLayout(createUserPanelLayout);
        createUserPanelLayout.setHorizontalGroup(
            createUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createUserPanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(createUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(createUserPanelLayout.createSequentialGroup()
                        .addGroup(createUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, createUserPanelLayout.createSequentialGroup()
                                .addGroup(createUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel12))
                                .addGap(48, 48, 48)
                                .addGroup(createUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtConfirmPass)
                                    .addComponent(txtEmailId)))
                            .addGroup(createUserPanelLayout.createSequentialGroup()
                                .addGroup(createUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8))
                                .addGap(91, 91, 91)
                                .addGroup(createUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtUname)
                                    .addComponent(txtPass, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addGroup(createUserPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(NUButtonCreateUser, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(42, 42, 42)
                                .addComponent(NUButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(57, 57, 57))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, createUserPanelLayout.createSequentialGroup()
                                .addGroup(createUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, createUserPanelLayout.createSequentialGroup()
                                        .addGroup(createUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel13)
                                            .addComponent(jLabel10))
                                        .addGap(41, 41, 41)
                                        .addGroup(createUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, createUserPanelLayout.createSequentialGroup()
                                                .addGap(5, 5, 5)
                                                .addComponent(txtEmailpass))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, createUserPanelLayout.createSequentialGroup()
                                        .addGap(150, 150, 150)
                                        .addGroup(createUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(optNormalUser)
                                            .addComponent(optAdmin))))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(139, 139, 139))
                    .addGroup(createUserPanelLayout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(createUserPanelLayout.createSequentialGroup()
                .addGap(199, 199, 199)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        createUserPanelLayout.setVerticalGroup(
            createUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createUserPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addGroup(createUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtUname, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(createUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtPass, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(createUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtConfirmPass, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addGroup(createUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEmailId, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGroup(createUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(createUserPanelLayout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(jLabel10))
                    .addGroup(createUserPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(createUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEmailpass, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(createUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(createUserPanelLayout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(55, 55, 55))
                    .addGroup(createUserPanelLayout.createSequentialGroup()
                        .addComponent(optAdmin)
                        .addGap(9, 9, 9)
                        .addComponent(optNormalUser)
                        .addGap(18, 18, 18)))
                .addGroup(createUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NUButtonCreateUser)
                    .addComponent(NUButtonBack))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        changePasswordPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel14.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel14, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel14.text")); // NOI18N

        jLabel15.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel15, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel15.text")); // NOI18N

        jLabel16.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel16, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel16.text")); // NOI18N

        jLabel17.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel17, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel17.text")); // NOI18N

        CPButtonChange.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(CPButtonChange, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.CPButtonChange.text")); // NOI18N
        CPButtonChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CPButtonChangeActionPerformed(evt);
            }
        });

        CPButtonBack.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(CPButtonBack, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.CPButtonBack.text")); // NOI18N
        CPButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CPButtonBackActionPerformed(evt);
            }
        });

        CPTxtPassword.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        CPTxtPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CPTxtPasswordActionPerformed(evt);
            }
        });
        CPTxtPassword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                CPTxtPasswordFocusGained(evt);
            }
        });
        CPTxtPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                CPTxtPasswordKeyPressed(evt);
            }
        });

        CPTxtNewPassword.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        CPTxtNewPassword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                CPTxtNewPasswordFocusGained(evt);
            }
        });
        CPTxtNewPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                CPTxtNewPasswordKeyPressed(evt);
            }
        });

        comboChangePassword.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        comboChangePassword.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboChangePasswordItemStateChanged(evt);
            }
        });
        comboChangePassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboChangePasswordKeyPressed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel18, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel18.text")); // NOI18N

        CPTxtConfirmPassword.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        CPTxtConfirmPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CPTxtConfirmPasswordActionPerformed(evt);
            }
        });
        CPTxtConfirmPassword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                CPTxtConfirmPasswordFocusGained(evt);
            }
        });
        CPTxtConfirmPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                CPTxtConfirmPasswordKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout changePasswordPanelLayout = new javax.swing.GroupLayout(changePasswordPanel);
        changePasswordPanel.setLayout(changePasswordPanelLayout);
        changePasswordPanelLayout.setHorizontalGroup(
            changePasswordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(changePasswordPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(changePasswordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(jLabel17)
                    .addComponent(jLabel16)
                    .addComponent(jLabel18))
                .addGap(29, 29, 29)
                .addGroup(changePasswordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboChangePassword, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(changePasswordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(CPTxtPassword, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(CPTxtNewPassword, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(CPTxtConfirmPassword))
                .addGap(99, 99, 99))
            .addGroup(changePasswordPanelLayout.createSequentialGroup()
                .addGroup(changePasswordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(changePasswordPanelLayout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(CPButtonChange)
                        .addGap(32, 32, 32)
                        .addComponent(CPButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(changePasswordPanelLayout.createSequentialGroup()
                        .addGap(146, 146, 146)
                        .addComponent(jLabel14)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        changePasswordPanelLayout.setVerticalGroup(
            changePasswordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(changePasswordPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(changePasswordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboChangePassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addGap(18, 18, 18)
                .addGroup(changePasswordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CPTxtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addGap(21, 21, 21)
                .addGroup(changePasswordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(CPTxtNewPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(changePasswordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(CPTxtConfirmPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(changePasswordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CPButtonChange)
                    .addComponent(CPButtonBack))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        emailSettingsPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel19.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel19, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel19.text")); // NOI18N

        jLabel20.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel20, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel20.text")); // NOI18N

        comboChangeEMailSetting.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        comboChangeEMailSetting.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboChangeEMailSettingItemStateChanged(evt);
            }
        });
        comboChangeEMailSetting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboChangeEMailSettingActionPerformed(evt);
            }
        });
        comboChangeEMailSetting.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboChangeEMailSettingKeyPressed(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel21, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel21.text")); // NOI18N

        UESTxtEmailID.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        UESTxtEmailID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                UESTxtEmailIDFocusGained(evt);
            }
        });
        UESTxtEmailID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                UESTxtEmailIDKeyPressed(evt);
            }
        });

        jLabel22.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel22, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel22.text")); // NOI18N

        UESButtonChange.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(UESButtonChange, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.UESButtonChange.text")); // NOI18N
        UESButtonChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UESButtonChangeActionPerformed(evt);
            }
        });

        UESButtonBack.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(UESButtonBack, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.UESButtonBack.text")); // NOI18N
        UESButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UESButtonBackActionPerformed(evt);
            }
        });

        UESTxtEmailPassword.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        UESTxtEmailPassword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                UESTxtEmailPasswordFocusGained(evt);
            }
        });
        UESTxtEmailPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                UESTxtEmailPasswordKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout emailSettingsPanelLayout = new javax.swing.GroupLayout(emailSettingsPanel);
        emailSettingsPanel.setLayout(emailSettingsPanelLayout);
        emailSettingsPanelLayout.setHorizontalGroup(
            emailSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(emailSettingsPanelLayout.createSequentialGroup()
                .addGroup(emailSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(emailSettingsPanelLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(emailSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(emailSettingsPanelLayout.createSequentialGroup()
                                .addGroup(emailSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel20)
                                    .addComponent(jLabel22))
                                .addGap(26, 26, 26)
                                .addGroup(emailSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(UESTxtEmailID)
                                    .addComponent(comboChangeEMailSetting, javax.swing.GroupLayout.Alignment.LEADING, 0, 202, Short.MAX_VALUE)
                                    .addComponent(UESTxtEmailPassword)))
                            .addComponent(jLabel21)))
                    .addGroup(emailSettingsPanelLayout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addComponent(UESButtonChange)
                        .addGap(27, 27, 27)
                        .addComponent(UESButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, emailSettingsPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel19)
                .addGap(130, 130, 130))
        );
        emailSettingsPanelLayout.setVerticalGroup(
            emailSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(emailSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel19)
                .addGap(43, 43, 43)
                .addGroup(emailSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboChangeEMailSetting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addGap(26, 26, 26)
                .addGroup(emailSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(UESTxtEmailID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(emailSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UESTxtEmailPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(emailSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UESButtonBack)
                    .addComponent(UESButtonChange))
                .addGap(36, 36, 36))
        );

        userRightSettingsPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel23.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel23, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel23.text")); // NOI18N

        jLabel24.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel24, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel24.text")); // NOI18N

        URSCheckGroupLedger.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(URSCheckGroupLedger, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.URSCheckGroupLedger.text")); // NOI18N
        URSCheckGroupLedger.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                URSCheckGroupLedgerKeyPressed(evt);
            }
        });

        URSCheckReport.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(URSCheckReport, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.URSCheckReport.text")); // NOI18N
        URSCheckReport.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                URSCheckReportKeyPressed(evt);
            }
        });

        URSCheckAccVouchers.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(URSCheckAccVouchers, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.URSCheckAccVouchers.text")); // NOI18N
        URSCheckAccVouchers.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                URSCheckAccVouchersKeyPressed(evt);
            }
        });

        URSCheckProduction.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(URSCheckProduction, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.URSCheckProduction.text")); // NOI18N
        URSCheckProduction.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                URSCheckProductionKeyPressed(evt);
            }
        });

        jLabel25.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel25, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel25.text")); // NOI18N

        URSOptAdmin.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(URSOptAdmin, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.URSOptAdmin.text")); // NOI18N
        URSOptAdmin.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                URSOptAdminStateChanged(evt);
            }
        });
        URSOptAdmin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                URSOptAdminKeyPressed(evt);
            }
        });

        URSOptNormalUser.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(URSOptNormalUser, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.URSOptNormalUser.text")); // NOI18N
        URSOptNormalUser.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                URSOptNormalUserStateChanged(evt);
            }
        });
        URSOptNormalUser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                URSOptNormalUserKeyPressed(evt);
            }
        });

        URSButtonChange.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(URSButtonChange, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.URSButtonChange.text")); // NOI18N
        URSButtonChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                URSButtonChangeActionPerformed(evt);
            }
        });

        URSButtonBack.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(URSButtonBack, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.URSButtonBack.text")); // NOI18N
        URSButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                URSButtonBackActionPerformed(evt);
            }
        });

        jLabel26.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel26, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel26.text")); // NOI18N

        comboUserRightSettings.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        comboUserRightSettings.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboUserRightSettingsItemStateChanged(evt);
            }
        });
        comboUserRightSettings.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboUserRightSettingsKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout userRightSettingsPanelLayout = new javax.swing.GroupLayout(userRightSettingsPanel);
        userRightSettingsPanel.setLayout(userRightSettingsPanelLayout);
        userRightSettingsPanelLayout.setHorizontalGroup(
            userRightSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userRightSettingsPanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(userRightSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(userRightSettingsPanelLayout.createSequentialGroup()
                        .addGroup(userRightSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(userRightSettingsPanelLayout.createSequentialGroup()
                                .addComponent(jLabel24)
                                .addGap(26, 26, 26)
                                .addGroup(userRightSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(URSCheckGroupLedger)
                                    .addComponent(URSCheckAccVouchers))
                                .addGap(24, 24, 24)
                                .addGroup(userRightSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(URSCheckProduction)
                                    .addComponent(URSCheckReport)))
                            .addGroup(userRightSettingsPanelLayout.createSequentialGroup()
                                .addComponent(jLabel25)
                                .addGap(18, 18, 18)
                                .addGroup(userRightSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(URSOptNormalUser)
                                    .addComponent(URSOptAdmin)
                                    .addGroup(userRightSettingsPanelLayout.createSequentialGroup()
                                        .addComponent(URSButtonChange)
                                        .addGap(39, 39, 39)
                                        .addComponent(URSButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap(52, Short.MAX_VALUE))
                    .addGroup(userRightSettingsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel26)
                        .addGap(27, 27, 27)
                        .addComponent(comboUserRightSettings, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(29, 29, 29))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, userRightSettingsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel23)
                .addGap(112, 112, 112))
        );
        userRightSettingsPanelLayout.setVerticalGroup(
            userRightSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userRightSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel23)
                .addGap(18, 18, 18)
                .addGroup(userRightSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboUserRightSettings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26))
                .addGap(26, 26, 26)
                .addGroup(userRightSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(URSCheckGroupLedger)
                    .addComponent(jLabel24)
                    .addComponent(URSCheckReport))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(userRightSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(URSCheckAccVouchers)
                    .addComponent(URSCheckProduction))
                .addGap(6, 6, 6)
                .addGroup(userRightSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(URSOptAdmin))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(URSOptNormalUser)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(userRightSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(URSButtonChange, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(URSButtonBack))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        deleteUserPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTable4.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "User Account Name", "Mark"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTable4);

        jLabel27.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel27, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel27.text")); // NOI18N

        DUButtonBack.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        DUButtonBack.setLabel(org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.DUButtonBack.label")); // NOI18N
        DUButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DUButtonBackActionPerformed(evt);
            }
        });
        DUButtonBack.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                DUButtonBackKeyPressed(evt);
            }
        });

        DUButtonDelete.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        DUButtonDelete.setLabel(org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.DUButtonDelete.label")); // NOI18N
        DUButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DUButtonDeleteActionPerformed(evt);
            }
        });
        DUButtonDelete.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                DUButtonDeleteKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout deleteUserPanelLayout = new javax.swing.GroupLayout(deleteUserPanel);
        deleteUserPanel.setLayout(deleteUserPanelLayout);
        deleteUserPanelLayout.setHorizontalGroup(
            deleteUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deleteUserPanelLayout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addComponent(jLabel27)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, deleteUserPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(deleteUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, deleteUserPanelLayout.createSequentialGroup()
                        .addComponent(DUButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(DUButtonDelete)
                        .addGap(109, 109, 109))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, deleteUserPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25))))
        );
        deleteUserPanelLayout.setVerticalGroup(
            deleteUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deleteUserPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel27)
                .addGap(31, 31, 31)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(deleteUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DUButtonDelete)
                    .addComponent(DUButtonBack))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(createUserPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 487, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(changePasswordPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailSettingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deleteUserPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(userRightSettingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(createUserPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(changePasswordPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(userRightSettingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(emailSettingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deleteUserPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jPanel4.TabConstraints.tabTitle"), jPanel4); // NOI18N

        jPanel13.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jPanel15.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(optYes, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.optYes.text")); // NOI18N
        optYes.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                optYesStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(optNo, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.optNo.text")); // NOI18N
        optNo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                optNoStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addComponent(optYes)
                .addGap(26, 26, 26)
                .addComponent(optNo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(optYes)
                    .addComponent(optNo))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jPanel16.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(optPdf, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.optPdf.text")); // NOI18N
        optPdf.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                optPdfStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(optHtml, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.optHtml.text")); // NOI18N
        optHtml.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                optHtmlStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(optWord, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.optWord.text")); // NOI18N
        optWord.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                optWordStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(optExcel, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.optExcel.text")); // NOI18N
        optExcel.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                optExcelStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addComponent(optPdf)
                .addGap(18, 18, 18)
                .addComponent(optHtml)
                .addGap(18, 18, 18)
                .addComponent(optWord)
                .addGap(18, 18, 18)
                .addComponent(optExcel)
                .addGap(23, 23, 23))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(optPdf)
                    .addComponent(optHtml)
                    .addComponent(optWord)
                    .addComponent(optExcel))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jPanel17.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(optA4, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.optA4.text")); // NOI18N
        optA4.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                optA4StateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(optA5, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.optA5.text")); // NOI18N
        optA5.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                optA5StateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(optAsk, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.optAsk.text")); // NOI18N
        optAsk.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                optAskStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(optA4)
                .addGap(50, 50, 50)
                .addComponent(optA5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(optAsk)
                .addGap(42, 42, 42))
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(optA4)
                    .addComponent(optA5)
                    .addComponent(optAsk))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(btnSave, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.btnSave.text")); // NOI18N
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnBack, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.btnBack.text")); // NOI18N
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(btnSave)
                        .addGap(34, 34, 34)
                        .addComponent(btnBack)))
                .addContainerGap(67, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnBack))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jLabel41.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel41, org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jLabel41.text")); // NOI18N

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel41)
                    .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(834, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel41)
                .addGap(18, 18, 18)
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(131, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(AllAdSuMuDiSettingsOLD.class, "AllAdSuMuDiSettingsOLD.jPanel12.TabConstraints.tabTitle"), jPanel12); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 621, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(72, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxStockItemNameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxStockItemNameItemStateChanged
        // TODO add your handling code here:
        if (jCheckBoxStockItemName.isSelected()) {

            stockItemName = "1";

        } else {

            stockItemName = "0";

        }
    }//GEN-LAST:event_jCheckBoxStockItemNameItemStateChanged

    private void jCheckBoxQuantityItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxQuantityItemStateChanged
        // TODO add your handling code here:
        if (jCheckBoxQuantity.isSelected()) {

            stockItemQuantity = "1";

        } else {

            stockItemQuantity = "0";

        }
    }//GEN-LAST:event_jCheckBoxQuantityItemStateChanged

    private void jCheckBoxAmountItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxAmountItemStateChanged
        // TODO add your handling code here:
        if (jCheckBoxAmount.isSelected()) {

            stockItemAmount = "1";

        } else {

            stockItemAmount = "0";

        }
    }//GEN-LAST:event_jCheckBoxAmountItemStateChanged

    private void jButtonParticularOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonParticularOKActionPerformed
        // TODO add your handling code here:
        FileWriter writer = null;
        try {
            //String fileName = "C:\\Users\\pc5\\Desktop\\Sudeep IMP FILES\\SystemProperties\\System.properties";
            final String dir = System.getProperty("user.dir");
            String fileName = dir + "\\others\\DataSMSSettings.properties";
            String line = null;
            String oldText = "";
            String oldText1 = "";
            String oldText2 = "";
            String stringValueOfStkItem = "";
            String stringValueOfQuantity = "";
            String stringValueOfAmount = "";

            FileReader fileReader = new FileReader(fileName);

            BufferedReader bufferedReader = new BufferedReader(fileReader);

            while ((line = bufferedReader.readLine()) != null) {
                System.out.println(line);
                if (line.startsWith("S")) {
                    stringValueOfStkItem = line.substring(16, 17);
                    System.out.println("stringValueOfStkItem-->>" + stringValueOfStkItem);
                    oldText += line + "\r\n";
                }
                if (line.startsWith("Q")) {
                    stringValueOfQuantity = line.substring(11, 12);
                    System.out.println("stringValueOfQuantity-->>" + stringValueOfQuantity);
                    oldText1 += line + "\r\n";
                }
                if (line.startsWith("A")) {
                    stringValueOfAmount = line.substring(9, 10);
                    System.out.println("stringValueOfAmount-->>" + stringValueOfAmount);
                    oldText2 += line + "\r\n";
                }
            }
            bufferedReader.close();

            String newText = "";
            if (stockItemName.equalsIgnoreCase("1")) {

                newText = oldText.replaceAll(stringValueOfStkItem, stockItemName);

            } else {

                newText = oldText.replaceAll(stringValueOfStkItem, "0");

            }

            String newText1 = "";
            if (stockItemQuantity.equalsIgnoreCase("1")) {

                newText1 = oldText1.replaceAll(stringValueOfQuantity, stockItemQuantity);

            } else {

                newText1 = oldText1.replaceAll(stringValueOfQuantity, "0");

            }

            String newText2 = "";
            if (stockItemAmount.equalsIgnoreCase("1")) {

                newText2 = oldText2.replaceAll(stringValueOfAmount, stockItemAmount);

            } else {

                newText2 = oldText2.replaceAll(stringValueOfAmount, "0");

            }

            //writer = new FileWriter("C:\\Users\\pc5\\Desktop\\Sudeep IMP FILES\\SystemProperties\\System.properties");
            writer = new FileWriter(fileName);
            writer.write(newText);
            writer.write(newText1);
            writer.write(newText2);
            writer.close();
            JOptionPane.showMessageDialog(this, "Data Sending SMS settings saved");
        } catch (IOException ex) {
            Logger.getLogger(AllAdSuMuDiSettingsOLD.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                writer.close();
            } catch (IOException ex) {
                Logger.getLogger(AllAdSuMuDiSettingsOLD.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButtonParticularOKActionPerformed

    private void jCheckBoxEnableSMSSendMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBoxEnableSMSSendMouseClicked
        // TODO add your handling code here:
        if (jCheckBoxEnableSMSSend.isSelected()) {

            jCheckBoxDisableSMSSend.setSelected(false);
            jCheckBoxEnableSMSSendWithAsk.setSelected(false);

            SMSchoice = "1";

        }
    }//GEN-LAST:event_jCheckBoxEnableSMSSendMouseClicked

    private void jCheckBoxDisableSMSSendMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBoxDisableSMSSendMouseClicked
        // TODO add your handling code here:
        if (jCheckBoxDisableSMSSend.isSelected()) {

            jCheckBoxEnableSMSSend.setSelected(false);
            jCheckBoxEnableSMSSendWithAsk.setSelected(false);

            SMSchoice = "2";

        }
    }//GEN-LAST:event_jCheckBoxDisableSMSSendMouseClicked

    private void jCheckBoxEnableSMSSendWithAskMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBoxEnableSMSSendWithAskMouseClicked
        // TODO add your handling code here:
        if (jCheckBoxEnableSMSSendWithAsk.isSelected()) {

            jCheckBoxEnableSMSSend.setSelected(false);
            jCheckBoxDisableSMSSend.setSelected(false);

            SMSchoice = "3";

        }
    }//GEN-LAST:event_jCheckBoxEnableSMSSendWithAskMouseClicked

    private void jButtonEnableDisableOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEnableDisableOKActionPerformed
        // TODO add your handling code here:
        FileWriter writer = null;
        try {
            final String dir = System.getProperty("user.dir");
            String fileName = dir + "\\others\\NetworkSMSSettings.properties";
            String line = null;
            String oldText = "";
            String stringValueOfSMS = "";

            FileReader fileReader = new FileReader(fileName);

            BufferedReader bufferedReader = new BufferedReader(fileReader);

            while ((line = bufferedReader.readLine()) != null) {
                System.out.println(line);
                stringValueOfSMS = line.substring(14, 15);
                System.out.println("SubString-->>" + stringValueOfSMS);
                oldText += line + "\r\n";
            }
            bufferedReader.close();

            String newtext = "";
            if (SMSchoice.equalsIgnoreCase("1")) {
                newtext = oldText.replaceAll(stringValueOfSMS, SMSchoice);
            } else if (SMSchoice.equalsIgnoreCase("2")) {
                newtext = oldText.replaceAll(stringValueOfSMS, SMSchoice);
            } else if (SMSchoice.equalsIgnoreCase("3")) {
                newtext = oldText.replaceAll(stringValueOfSMS, SMSchoice);
            }
            writer = new FileWriter(fileName);
            writer.write(newtext);
            writer.close();
            JOptionPane.showMessageDialog(this, "SMS Network Settings Saved Successfully");
        } catch (IOException ex) {
            Logger.getLogger(AllAdSuMuDiSettingsOLD.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                writer.close();
            } catch (IOException ex) {
                Logger.getLogger(AllAdSuMuDiSettingsOLD.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButtonEnableDisableOKActionPerformed

    private void jCheckBoxEnableEMailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBoxEnableEMailMouseClicked
        // TODO add your handling code here:
        jCheckBoxDisableEMail.setSelected(false);
        EMailchoice = "1";
    }//GEN-LAST:event_jCheckBoxEnableEMailMouseClicked

    private void jCheckBoxDisableEMailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBoxDisableEMailMouseClicked
        // TODO add your handling code here:
        jCheckBoxEnableEMail.setSelected(false);
        EMailchoice = "2";
    }//GEN-LAST:event_jCheckBoxDisableEMailMouseClicked

    private void jButtonEMailOK2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEMailOK2ActionPerformed
        // TODO add your handling code here:
        FileWriter writer = null;
        try {
            final String dir = System.getProperty("user.dir");
            String fileName = dir + "\\others\\NetworkEMailSettings.properties";
            String line = null;
            String oldText = "";
            String stringValueOfEMail = "";

            FileReader fileReader = new FileReader(fileName);

            BufferedReader bufferedReader = new BufferedReader(fileReader);

            int lineCounter = 1;
            while ((line = bufferedReader.readLine()) != null) {
                if (lineCounter == 1) {
                    System.out.println(line);
                    stringValueOfEMail = line.substring(16, 17);
                    System.out.println("SubString-->>" + stringValueOfEMail);
                    oldText += line + "\r\n";
                }
                lineCounter++;
            }
            bufferedReader.close();

            String newtext = "";
            if (EMailchoice.equalsIgnoreCase("1")) {
                newtext = oldText.replaceAll(stringValueOfEMail, EMailchoice);
            } else {
                newtext = oldText.replaceAll(stringValueOfEMail, "2");
            }
            if (EMailchoice.equalsIgnoreCase("2")) {
                newtext = oldText.replaceAll(stringValueOfEMail, EMailchoice);
            } else {
                newtext = oldText.replaceAll(stringValueOfEMail, "1");
            }
            writer = new FileWriter(fileName);
            writer.write(newtext);
            writer.close();
            //JOptionPane.showMessageDialog(this, "E-Mail Network Settings Saved Successfully");
        } catch (IOException ex) {
            Logger.getLogger(AllAdSuMuDiSettingsOLD.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                writer.close();
            } catch (IOException ex) {
                Logger.getLogger(AllAdSuMuDiSettingsOLD.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        FileWriter writerNew = null;
        try {
            final String dir = System.getProperty("user.dir");
            String fileName = dir + "\\others\\NetworkEMailSender.properties";
            String line = null;
            String oldText = "";
            String stringValueOfEMail = "";

            FileReader fileReader = new FileReader(fileName);

            BufferedReader bufferedReader = new BufferedReader(fileReader);

            int lineCounter = 1;
            while ((line = bufferedReader.readLine()) != null) {
                if (lineCounter == 1) {
                    System.out.println(line);
                    oldText += line + "\r\n";
                }
                lineCounter++;
            }
            bufferedReader.close();

            String newtext = "";
            newtext = oldText.replaceAll(oldText, jTextFieldSender.getText());
            writerNew = new FileWriter(fileName);
            writerNew.write(newtext);
            writerNew.close();
            //JOptionPane.showMessageDialog(this, "E-Mail Network Settings Saved Successfully");
        } catch (IOException ex) {
            Logger.getLogger(AllAdSuMuDiSettingsOLD.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                writerNew.close();
            } catch (IOException ex) {
                Logger.getLogger(AllAdSuMuDiSettingsOLD.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        FileWriter writerNewPWD = null;
        try {
            final String dir = System.getProperty("user.dir");
            String fileName = dir + "\\others\\NetworkEMailPWD.properties";
            String line = null;
            String oldText = "";
            String stringValueOfEMailPWD = "";

            FileReader fileReader = new FileReader(fileName);

            BufferedReader bufferedReader = new BufferedReader(fileReader);

            int lineCounter = 1;
            while ((line = bufferedReader.readLine()) != null) {
                if (lineCounter == 1) {
                    System.out.println(line);
                    oldText += line + "\r\n";
                }
                lineCounter++;
            }
            bufferedReader.close();

            String newtext = "";
            newtext = oldText.replaceAll(oldText, jPasswordFieldPassword.getText());
            writerNewPWD = new FileWriter(fileName);
            writerNewPWD.write(newtext);
            writerNewPWD.close();
            //JOptionPane.showMessageDialog(this, "E-Mail Network Settings Saved Successfully");
        } catch (IOException ex) {
            Logger.getLogger(AllAdSuMuDiSettingsOLD.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                writerNewPWD.close();
            } catch (IOException ex) {
                Logger.getLogger(AllAdSuMuDiSettingsOLD.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        JOptionPane.showMessageDialog(this, "E-Mail Network Settings Saved Successfully");
    }//GEN-LAST:event_jButtonEMailOK2ActionPerformed

    private void textureMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textureMouseClicked
        // TODO add your handling code here:
        if (texture.isSelected()) {

            acryl.setSelected(false);
            mint.setSelected(false);
            fast.setSelected(false);
            graphite.setSelected(false);
            smart.setSelected(false);
            aero.setSelected(false);
            aluminium.setSelected(false);
            macwin.setSelected(false);
            luna.setSelected(false);


            choice = "01";

            Image img = new javax.swing.ImageIcon(dir + "/images/Texture.png").getImage();
            img = img.getScaledInstance(jPanelPreview.getWidth(), jPanelPreview.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon scaledImageIcon = new ImageIcon(img);
            jPanelPreview.setIcon(scaledImageIcon);
        }
    }//GEN-LAST:event_textureMouseClicked

    private void aeroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aeroMouseClicked
        // TODO add your handling code here:
        if (aero.isSelected()) {

            acryl.setSelected(false);
            mint.setSelected(false);
            fast.setSelected(false);
            graphite.setSelected(false);
            smart.setSelected(false);
            texture.setSelected(false);
            aluminium.setSelected(false);
            macwin.setSelected(false);
            luna.setSelected(false);

            choice = "02";

            Image img = new javax.swing.ImageIcon(dir + "/images/Aero.png").getImage();
            img = img.getScaledInstance(jPanelPreview.getWidth(), jPanelPreview.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon scaledImageIcon = new ImageIcon(img);
            jPanelPreview.setIcon(scaledImageIcon);
        }
    }//GEN-LAST:event_aeroMouseClicked

    private void aluminiumMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aluminiumMouseClicked
        // TODO add your handling code here:
        if (aluminium.isSelected()) {

            acryl.setSelected(false);
            mint.setSelected(false);
            fast.setSelected(false);
            graphite.setSelected(false);
            smart.setSelected(false);
            texture.setSelected(false);
            aero.setSelected(false);
            macwin.setSelected(false);
            luna.setSelected(false);

            choice = "03";

            Image img = new javax.swing.ImageIcon(dir + "/images/Aluminium.png").getImage();
            img = img.getScaledInstance(jPanelPreview.getWidth(), jPanelPreview.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon scaledImageIcon = new ImageIcon(img);
            jPanelPreview.setIcon(scaledImageIcon);
        }
    }//GEN-LAST:event_aluminiumMouseClicked

    private void macwinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_macwinMouseClicked
        // TODO add your handling code here:
        if (macwin.isSelected()) {

            acryl.setSelected(false);
            mint.setSelected(false);
            fast.setSelected(false);
            graphite.setSelected(false);
            smart.setSelected(false);
            texture.setSelected(false);
            aluminium.setSelected(false);
            aero.setSelected(false);
            luna.setSelected(false);

            choice = "04";

            Image img = new javax.swing.ImageIcon(dir + "/images/macwin.png").getImage();
            img = img.getScaledInstance(jPanelPreview.getWidth(), jPanelPreview.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon scaledImageIcon = new ImageIcon(img);
            jPanelPreview.setIcon(scaledImageIcon);
        }
    }//GEN-LAST:event_macwinMouseClicked

    private void lunaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lunaMouseClicked
        // TODO add your handling code here:
        if (luna.isSelected()) {

            acryl.setSelected(false);
            mint.setSelected(false);
            fast.setSelected(false);
            graphite.setSelected(false);
            smart.setSelected(false);
            texture.setSelected(false);
            aluminium.setSelected(false);
            aero.setSelected(false);
            macwin.setSelected(false);

            choice = "05";

            Image img = new javax.swing.ImageIcon(dir + "/images/luna.png").getImage();
            img = img.getScaledInstance(jPanelPreview.getWidth(), jPanelPreview.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon scaledImageIcon = new ImageIcon(img);
            jPanelPreview.setIcon(scaledImageIcon);
        }
    }//GEN-LAST:event_lunaMouseClicked

    private void buttonApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonApplyActionPerformed

        if (texture.isSelected()) {
            choice = "01";
        } else if (aero.isSelected()) {
            choice = "02";
        } else if (aluminium.isSelected()) {
            choice = "03";
        } else if (macwin.isSelected()) {
            choice = "04";
        } else if (luna.isSelected()) {
            choice = "05";
        } else if (acryl.isSelected()) {
            choice = "06";
        } else if (mint.isSelected()) {
            choice = "07";
        } else if (fast.isSelected()) {
            choice = "08";
        } else if (graphite.isSelected()) {
            choice = "09";
        } else if (smart.isSelected()) {
            choice = "10";
        }

        FileWriter writer = null;
        try {
            // TODO add your handling code here:
            //            Connection conn = DatabaseConnection1.GetConnection();
            //            String query = "update tblothersetting set theme="+ choice +"";
            //            PreparedStatement ps = conn.prepareStatement(query);
            //            ps.executeUpdate();

            final String dir = System.getProperty("user.dir");
            String fileName = dir + "\\others\\System.properties";
            //String fileName = "C:\\Users\\pc5\\Desktop\\Sudeep IMP FILES\\SystemProperties\\System.properties";
            String line = null;
            String oldText = "";
            String stringValueOfTheme = "";

            FileReader fileReader = new FileReader(fileName);

            BufferedReader bufferedReader = new BufferedReader(fileReader);

            while ((line = bufferedReader.readLine()) != null) {
                System.out.println(line);
                stringValueOfTheme = line.substring(8, 10);
                System.out.println("SubString-->>" + stringValueOfTheme);
                oldText += line + "\r\n";
            }
            bufferedReader.close();

            String newtext = "";
            if (choice.equalsIgnoreCase("01")) {
                newtext = oldText.replaceAll(stringValueOfTheme, choice);
            } else if (choice.equalsIgnoreCase("02")) {
                newtext = oldText.replaceAll(stringValueOfTheme, choice);
            } else if (choice.equalsIgnoreCase("03")) {
                newtext = oldText.replaceAll(stringValueOfTheme, choice);
            } else if (choice.equalsIgnoreCase("04")) {
                newtext = oldText.replaceAll(stringValueOfTheme, choice);
            } else if (choice.equalsIgnoreCase("05")) {
                newtext = oldText.replaceAll(stringValueOfTheme, choice);
            } else if (choice.equalsIgnoreCase("06")) {
                newtext = oldText.replaceAll(stringValueOfTheme, choice);
            } else if (choice.equalsIgnoreCase("07")) {
                newtext = oldText.replaceAll(stringValueOfTheme, choice);
            } else if (choice.equalsIgnoreCase("08")) {
                newtext = oldText.replaceAll(stringValueOfTheme, choice);
            } else if (choice.equalsIgnoreCase("09")) {
                newtext = oldText.replaceAll(stringValueOfTheme, choice);
            } else if (choice.equalsIgnoreCase("10")) {
                newtext = oldText.replaceAll(stringValueOfTheme, choice);
            }
            writer = new FileWriter(fileName);
            writer.write(newtext);
            writer.close();
            JOptionPane.showMessageDialog(this, "Settings Saved Successfully,Please Restart Your Application");
        } catch (IOException ex) {
            Logger.getLogger(AllAdSuMuDiSettingsOLD.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                writer.close();
            } catch (IOException ex) {
                Logger.getLogger(AllAdSuMuDiSettingsOLD.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_buttonApplyActionPerformed

    private void buttonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExitActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_buttonExitActionPerformed

    private void jTextFieldPaginationValueKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPaginationValueKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
        int flag = 0;
        String f = jTextFieldPaginationValue.getText().trim();
        int i = 0;
        while (i < f.length()) {
            if (f.charAt(i) == '.') {
                flag = 1;
                break;
            }
            i++;
        }
        if (flag == 1 && c == '.') {
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldPaginationValueKeyTyped

    private void jButtonApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonApplyActionPerformed
        try {
            map_Field_With_ID.clear();
            //        if (checkBoxReceiptnoEditable.isSelected()) {
            //            map_Field_With_ID.put(gen.other.AdSuMuDiSettings.AdSuMuDiConstant.RECEIPT_SETTINGS, 1);
            //        } else {
            //            map_Field_With_ID.put(gen.other.AdSuMuDiSettings.AdSuMuDiConstant.RECEIPT_SETTINGS, 0);
            //        }
            //
            //        if (checkBoxAutoInrementVoucherNumber.isSelected()) {
            //            map_Field_With_ID.put(gen.other.AdSuMuDiSettings.AdSuMuDiConstant.VOUCHER_NUMBER_SETTING, 1);
            //        } else {
            //            map_Field_With_ID.put(gen.other.AdSuMuDiSettings.AdSuMuDiConstant.VOUCHER_NUMBER_SETTING, 0);
            //        }
            String pagination_Value = "";
            if (jTextFieldPaginationValue.getText().toString().trim().equals("") || Double.parseDouble(jTextFieldPaginationValue.getText().toString().trim()) == 0D) {
                //	    pagination_Value = "50";
                JOptionPane.showMessageDialog(this, "Enter Pagination value greater than 0");
                jTextFieldPaginationValue.setText("");
                jTextFieldPaginationValue.requestFocus();
            } else {
                pagination_Value = jTextFieldPaginationValue.getText().toString().trim();
                map_Field_With_ID.put(gen.other.AdSuMuDiSettingsOLD.AdSuMuDiConstant.PAGINATION, pagination_Value);
                AdSuMuDiSettingsDAO.insert_Receipt_Settings(map_Field_With_ID);
                gen.other.AdSuMuDiSettingsOLD.AdSuMuDiConstant.getValuesFromTable();
                JOptionPane.showMessageDialog(this, "Setting SuccessFully Submitted");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        //        set_Value_CheckBox();
    }//GEN-LAST:event_jButtonApplyActionPerformed

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButtonExitActionPerformed

    private void txtUnameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUnameFocusGained
        // TODO add your handling code here:
        txtUname.selectAll();
    }//GEN-LAST:event_txtUnameFocusGained

    private void txtUnameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUnameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            //btnBackActionPerformed(null);
            NUButtonBackActionPerformed(null);
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtPass.requestFocus();
        }
    }//GEN-LAST:event_txtUnameKeyPressed

    private void txtPassFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPassFocusGained
        // TODO add your handling code here:
        txtPass.selectAll();
    }//GEN-LAST:event_txtPassFocusGained

    private void txtPassKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPassKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtUname.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtConfirmPass.requestFocus();
        }
    }//GEN-LAST:event_txtPassKeyPressed

    private void txtConfirmPassFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtConfirmPassFocusGained
        // TODO add your handling code here:
        txtConfirmPass.selectAll();
    }//GEN-LAST:event_txtConfirmPassFocusGained

    private void txtConfirmPassKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtConfirmPassKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtPass.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtEmailId.requestFocus();
        }
    }//GEN-LAST:event_txtConfirmPassKeyPressed

    private void NUButtonCreateUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NUButtonCreateUserActionPerformed
        if (txtUname.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please Enter the Username");
            txtUname.requestFocus();
        } else if (txtPass.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please Enter the Password");
            txtConfirmPass.setText("");
            txtPass.requestFocus();
        }/* else if (txtEmailpass.getText().equals("")) {
         JOptionPane.showMessageDialog(this, "Please Enter Email Id Password");
         txtEmailpass.requestFocus();
         } */ else if (txtEmailId.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please Enter the Email Id");
            txtEmailId.requestFocus();
        } else if (txtPass.getText().equals(txtConfirmPass.getText()) == false) {
            JOptionPane.showMessageDialog(this, "Password Mismatch");
            txtConfirmPass.setText("");
            txtConfirmPass.requestFocus();
        } else if (checkGroupLedger.isSelected() == false && checkReport.isSelected() == false && checkAccVouchers.isSelected() == false && checkProduction.isSelected() == false) {
            JOptionPane.showMessageDialog(this, "User has not been assigned any rights");
            checkGroupLedger.requestFocus();
        } else if (optAdmin.isSelected() == false && optNormalUser.isSelected() == false) {
            JOptionPane.showMessageDialog(this, "Select the User Type");
            optAdmin.requestFocus();
        } else {

            String email = txtEmailId.getText();
            String expression = "^[\\w\\.-]+@([\\w\\-]+\\.)+[A-Z]{2,4}$";
            Pattern pattern = Pattern.compile(expression, Pattern.CASE_INSENSITIVE);
            Matcher matcher = pattern.matcher(email);
            if (matcher.matches()) {
                Connection conn = null;
                try {
                    conn = DatabaseConnection1.GetConnection();
                    conn.setAutoCommit(false);
                    Statement st = conn.createStatement();
                    int c1 = 0, c2 = 0, c3 = 0, c4 = 0, u = 0;
                    if (checkGroupLedger.isSelected()) {
                        c1 = 1;
                    } else {
                        c1 = 0;
                    }

                    if (checkReport.isSelected()) {
                        c2 = 1;
                    } else {
                        c2 = 0;
                    }

                    if (checkAccVouchers.isSelected()) {
                        c3 = 1;
                    } else {
                        c3 = 0;
                    }

                    if (checkProduction.isSelected()) {
                        c4 = 1;
                    } else {
                        c4 = 0;
                    }

                    if (optAdmin.isSelected()) {
                        u = 1;
                    } else {
                        u = 2;
                    }

                    q = "select username,password from tbllogin where username='" + txtUname.getText() + "' or password='" + txtPass.getText() + "'";
                    resultSet = st.executeQuery(q);
                    if (resultSet.next()) {
                        JOptionPane.showMessageDialog(this, "This Username or Password is already taken");
                        txtPass.setText("");
                        txtConfirmPass.setText("");
                        txtUname.requestFocus();
                    } else {
                        q = "insert into tbllogin(username,password,new_entry,acc_vouchers,report,production,user_type,email_id,email_pass) values('" + txtUname.getText() + "','" + txtPass.getText() + "'," + c1 + "," + c2 + "," + c3 + "," + c4 + "," + u + ",'" + txtEmailId.getText() + "','" + txtEmailpass.getText() + "')";
                        st.executeUpdate(q);
                        conn.commit();
                        JOptionPane.showMessageDialog(this, "New User is Created.");
                        //btnBackActionPerformed(evt);
                        NUButtonBackActionPerformed(evt);
                    }

                } catch (SQLException e) {
                    e.printStackTrace();
                } finally {
                    try {
                        conn.close();
                    } catch (SQLException ex) {
                        Logger.getLogger(AllAdSuMuDiSettingsOLD.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please Enter Valid Email ID");
                txtEmailId.requestFocus();
                txtEmailId.selectAll();
            }
        }
    }//GEN-LAST:event_NUButtonCreateUserActionPerformed

    private void NUButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NUButtonBackActionPerformed
        try {
            MainClass m = new MainClass();
            m.menuselection(5);
            this.setClosed(true);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(this.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_NUButtonBackActionPerformed

    private void optAdminStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_optAdminStateChanged
        if (optAdmin.isSelected()) {
            optNormalUser.setSelected(false);
        }
        if (optNormalUser.isSelected() == false) {
            optAdmin.setSelected(true);
        }
    }//GEN-LAST:event_optAdminStateChanged

    private void optAdminKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_optAdminKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            checkProduction.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            optNormalUser.requestFocus();
        }
    }//GEN-LAST:event_optAdminKeyPressed

    private void optNormalUserStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_optNormalUserStateChanged
        if (optNormalUser.isSelected()) {
            optAdmin.setSelected(false);
        }
        if (optAdmin.isSelected() == false) {
            optNormalUser.setSelected(true);
        }
    }//GEN-LAST:event_optNormalUserStateChanged

    private void optNormalUserKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_optNormalUserKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            optAdmin.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            //btnCreateUserActionPerformed(null);
            NUButtonCreateUserActionPerformed(null);
        }
    }//GEN-LAST:event_optNormalUserKeyPressed

    private void txtEmailIdFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmailIdFocusGained
        // TODO add your handling code here:
        txtEmailId.selectAll();
    }//GEN-LAST:event_txtEmailIdFocusGained

    private void txtEmailIdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmailIdKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtConfirmPass.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtEmailpass.requestFocus();
        }
    }//GEN-LAST:event_txtEmailIdKeyPressed

    private void checkGroupLedgerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkGroupLedgerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkGroupLedgerActionPerformed

    private void checkGroupLedgerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_checkGroupLedgerKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtEmailpass.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            checkReport.requestFocus();
        }
    }//GEN-LAST:event_checkGroupLedgerKeyPressed

    private void checkReportKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_checkReportKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            checkGroupLedger.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            checkAccVouchers.requestFocus();
        }
    }//GEN-LAST:event_checkReportKeyPressed

    private void checkAccVouchersKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_checkAccVouchersKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            checkReport.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            checkProduction.requestFocus();
        }
    }//GEN-LAST:event_checkAccVouchersKeyPressed

    private void checkProductionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_checkProductionKeyPressed

        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            checkAccVouchers.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            optAdmin.requestFocus();
        }
    }//GEN-LAST:event_checkProductionKeyPressed

    private void btnAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllActionPerformed
        checkGroupLedger.setSelected(true);
        checkReport.setSelected(true);
        checkAccVouchers.setSelected(true);
        checkProduction.setSelected(true);
    }//GEN-LAST:event_btnAllActionPerformed

    private void btnNoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNoneActionPerformed
        checkGroupLedger.setSelected(false);
        checkReport.setSelected(false);
        checkAccVouchers.setSelected(false);
        checkProduction.setSelected(false);
    }//GEN-LAST:event_btnNoneActionPerformed

    private void CPButtonChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CPButtonChangeActionPerformed
        int a = 0;
        if (tf.getText().toString().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Please select the Username");
            comboChangePassword.requestFocus();
            System.out.println("Please select the Username............>>>>>>" + tf.getText().toString().trim());
        } else if (txtPass.getText().toString().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Please enter the current Password");
            CPTxtNewPassword.setText("");
            txtPass.requestFocus();
            System.out.println("Please enter the current Password............>>>>>>" + txtPass.getText().toString().trim());
        } else if (CPTxtNewPassword.getText().toString().trim().equalsIgnoreCase("")) {
            JOptionPane.showMessageDialog(this, "Please enter the New Password");
            CPTxtNewPassword.setText("");
            CPTxtNewPassword.requestFocus();
        } else if (CPTxtNewPassword.getText().toString().trim().equalsIgnoreCase(txtConfirmPass.getText().toString().trim()) == false) {
            JOptionPane.showMessageDialog(this, "Password Mismatch");
            System.out.println("Password Mismatch............>>>>>>txtNewPass.getPassword().toString().trim()" + CPTxtNewPassword.getText().toString().trim());
            System.out.println("Password Mismatch............>>>>>>txtConfirmPass.getPassword().toString().trim()" + txtConfirmPass.getText().toString().trim());
            CPTxtNewPassword.setText("");
            CPTxtNewPassword.requestFocus();
        } else {
            Connection conn = null;
            try {
                conn = DatabaseConnection1.GetConnection();
                conn.setAutoCommit(false);
                Statement st = conn.createStatement();

                q = "select username,password from tbllogin";
                resultSet = st.executeQuery(q);
                while (resultSet.next()) {
                    if (txtPass.getText().toString().trim().equalsIgnoreCase(resultSet.getString("password")) && tf.getText().toString().trim().equalsIgnoreCase(resultSet.getString("username"))) {
                        q = "select username,password from tbllogin where password = ?";
                        //                        rs1 = st.executeQuery(q);
                        System.out.println("TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTt" + q);
                        PreparedStatement stat1 = conn.prepareStatement(q);
                        stat1.setString(1, CPTxtNewPassword.getText().toString().trim());
                        ResultSet rs1 = stat1.executeQuery();

                        if (rs1.next()) {
                            JOptionPane.showMessageDialog(this, "This Password is already taken");
                            txtPass.setText("");
                            CPTxtNewPassword.setText("");
                            CPTxtNewPassword.requestFocus();
                        } else {
                            q = "update tbllogin set password= ? where username= ?";
                            //st.executeUpdate(q);
                            PreparedStatement stat = conn.prepareStatement(q);
                            stat.setString(1, CPTxtNewPassword.getText().toString().trim());
                            stat.setString(2, tf.getText().toString().trim());
                            stat.executeUpdate();

                            conn.commit();
                            JOptionPane.showMessageDialog(this, "Password is Changed.");
                            //btnBackActionPerformed(evt);
                            CPButtonBackActionPerformed(evt);
                        }
                        a = 2;
                    }
                }
                System.out.println("TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT" + a);
                if (a != 2) {
                    JOptionPane.showMessageDialog(this, "You may Entered Wrong Password or UserName");
                    tf.requestFocus();
                    tf.setText("");
                    txtConfirmPass.setText("");
                    CPTxtNewPassword.setText("");
                    txtPass.setText("");
                }
                a = 1;
            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                try {
                    conn.close();
                } catch (SQLException ex) {
                    Logger.getLogger(AllAdSuMuDiSettingsOLD.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_CPButtonChangeActionPerformed

    private void CPButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CPButtonBackActionPerformed
        try {
            MainClass m = new MainClass();
            m.menuselection(5);
            this.setClosed(true);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(this.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CPButtonBackActionPerformed

    private void CPTxtPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CPTxtPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CPTxtPasswordActionPerformed

    private void CPTxtPasswordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CPTxtPasswordFocusGained
        // TODO add your handling code here:
        txtPass.selectAll();
    }//GEN-LAST:event_CPTxtPasswordFocusGained

    private void CPTxtPasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CPTxtPasswordKeyPressed

        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            comboChangePassword.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            CPTxtNewPassword.requestFocus();
        }
    }//GEN-LAST:event_CPTxtPasswordKeyPressed

    private void CPTxtNewPasswordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CPTxtNewPasswordFocusGained
        // TODO add your handling code here:
        CPTxtNewPassword.selectAll();
    }//GEN-LAST:event_CPTxtNewPasswordFocusGained

    private void CPTxtNewPasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CPTxtNewPasswordKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtPass.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtConfirmPass.requestFocus();
        }
    }//GEN-LAST:event_CPTxtNewPasswordKeyPressed

    private void comboChangePasswordItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboChangePasswordItemStateChanged
    }//GEN-LAST:event_comboChangePasswordItemStateChanged

    private void comboChangePasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboChangePasswordKeyPressed
        /*  if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {

         btnBackActionPerformed(null);
         }
         if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
         txtPass.requestFocus();
         }*/
    }//GEN-LAST:event_comboChangePasswordKeyPressed

    private void CPTxtConfirmPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CPTxtConfirmPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CPTxtConfirmPasswordActionPerformed

    private void CPTxtConfirmPasswordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CPTxtConfirmPasswordFocusGained
        // TODO add your handling code here:
        txtConfirmPass.selectAll();
    }//GEN-LAST:event_CPTxtConfirmPasswordFocusGained

    private void CPTxtConfirmPasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CPTxtConfirmPasswordKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            CPTxtNewPassword.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            //btnChangeActionPerformed(null);
            CPButtonChangeActionPerformed(null);
        }
    }//GEN-LAST:event_CPTxtConfirmPasswordKeyPressed

    private void comboChangeEMailSettingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboChangeEMailSettingItemStateChanged
        if (tfChangeEMailSettings.getText() == null) {
            UESTxtEmailID.setText("");
            UESTxtEmailPassword.setText("");
        } else if (tfChangeEMailSettings.getText().equalsIgnoreCase("")) {
            UESTxtEmailID.setText("");
            UESTxtEmailPassword.setText("");
        } else {
            Connection conn = null;
            try {
                conn = DatabaseConnection1.GetConnection();
                Statement st = conn.createStatement();

                q = "select email_id from tbllogin where username='" + comboChangeEMailSetting.getSelectedItem() + "'";
                resultSet = st.executeQuery(q);
                if (resultSet.next()) {
                    UESTxtEmailID.setText(resultSet.getString("email_id"));
                }
            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                try {
                    conn.close();
                } catch (SQLException ex) {
                    Logger.getLogger(AllAdSuMuDiSettingsOLD.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_comboChangeEMailSettingItemStateChanged

    private void comboChangeEMailSettingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboChangeEMailSettingActionPerformed
    }//GEN-LAST:event_comboChangeEMailSettingActionPerformed

    private void comboChangeEMailSettingKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboChangeEMailSettingKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {

            //btnBackActionPerformed(null);
            UESButtonBackActionPerformed(null);
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtEmailId.requestFocus();
        }
    }//GEN-LAST:event_comboChangeEMailSettingKeyPressed

    private void UESTxtEmailIDFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_UESTxtEmailIDFocusGained
        // TODO add your handling code here:
        txtEmailId.selectAll();
    }//GEN-LAST:event_UESTxtEmailIDFocusGained

    private void UESTxtEmailIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_UESTxtEmailIDKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            comboChangePassword.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtEmailpass.requestFocus();
        }
    }//GEN-LAST:event_UESTxtEmailIDKeyPressed

    private void UESButtonChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UESButtonChangeActionPerformed
        if (comboChangePassword.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Please select the Username");
            comboChangePassword.requestFocus();
        } else if (txtEmailId.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please Enter Email Id");
            txtEmailId.setText("");
            txtEmailId.requestFocus();
        } else if (txtEmailpass.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please Enter Email_ID Password");
            txtEmailpass.setText("");
            txtEmailpass.requestFocus();
        } else {

            String email = txtEmailId.getText();
            String expression = "^[\\w\\.-]+@([\\w\\-]+\\.)+[A-Z]{2,4}$";
            Pattern pattern = Pattern.compile(expression, Pattern.CASE_INSENSITIVE);
            Matcher matcher = pattern.matcher(email);
            if (matcher.matches()) {
                Connection conn = null;
                try {
                    conn = DatabaseConnection1.GetConnection();
                    conn.setAutoCommit(false);
                    Statement st = conn.createStatement();

                    q = "update tbllogin set email_id='" + txtEmailId.getText() + "',email_pass='" + txtEmailpass.getText() + "' where username='" + comboChangePassword.getSelectedItem() + "'";
                    st.executeUpdate(q);
                    conn.commit();
                    JOptionPane.showMessageDialog(this, "User Email Setting is Changed.");
                    //btnBackActionPerformed(evt);
                    UESButtonBackActionPerformed(evt);
                } catch (SQLException e) {
                    e.printStackTrace();
                } finally {
                    try {
                        conn.close();
                    } catch (SQLException ex) {
                        Logger.getLogger(AllAdSuMuDiSettingsOLD.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please Enter Valid Email ID");
                txtEmailId.requestFocus();
                txtEmailId.selectAll();
            }
        }
    }//GEN-LAST:event_UESButtonChangeActionPerformed

    private void UESButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UESButtonBackActionPerformed
        try {
            MainClass m = new MainClass();
            m.menuselection(5);
            this.setClosed(true);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(this.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_UESButtonBackActionPerformed

    private void UESTxtEmailPasswordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_UESTxtEmailPasswordFocusGained
        // TODO add your handling code here:
        txtEmailpass.selectAll();
    }//GEN-LAST:event_UESTxtEmailPasswordFocusGained

    private void UESTxtEmailPasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_UESTxtEmailPasswordKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtEmailId.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            //btnChangeActionPerformed(null);
            UESButtonChangeActionPerformed(null);
        }
    }//GEN-LAST:event_UESTxtEmailPasswordKeyPressed

    private void URSCheckGroupLedgerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_URSCheckGroupLedgerKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            comboChangePassword.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            checkReport.requestFocus();
        }
    }//GEN-LAST:event_URSCheckGroupLedgerKeyPressed

    private void URSCheckReportKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_URSCheckReportKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            checkGroupLedger.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            checkAccVouchers.requestFocus();
        }
    }//GEN-LAST:event_URSCheckReportKeyPressed

    private void URSCheckAccVouchersKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_URSCheckAccVouchersKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            checkReport.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            checkProduction.requestFocus();
        }
    }//GEN-LAST:event_URSCheckAccVouchersKeyPressed

    private void URSCheckProductionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_URSCheckProductionKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            checkAccVouchers.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            optAdmin.requestFocus();
        }
    }//GEN-LAST:event_URSCheckProductionKeyPressed

    private void URSOptAdminStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_URSOptAdminStateChanged
        if (optAdmin.isSelected()) {
            optNormalUser.setSelected(false);
        }
        if (optNormalUser.isSelected() == false) {
            optAdmin.setSelected(true);
        }
    }//GEN-LAST:event_URSOptAdminStateChanged

    private void URSOptAdminKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_URSOptAdminKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            checkProduction.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            optNormalUser.requestFocus();
        }
    }//GEN-LAST:event_URSOptAdminKeyPressed

    private void URSOptNormalUserStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_URSOptNormalUserStateChanged
        if (optNormalUser.isSelected()) {
            optAdmin.setSelected(false);
        }
        if (optAdmin.isSelected() == false) {
            optNormalUser.setSelected(true);
        }
    }//GEN-LAST:event_URSOptNormalUserStateChanged

    private void URSOptNormalUserKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_URSOptNormalUserKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            optAdmin.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            //btnChangeActionPerformed(null);
            URSButtonChangeActionPerformed(null);
        }
    }//GEN-LAST:event_URSOptNormalUserKeyPressed

    private void URSButtonChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_URSButtonChangeActionPerformed
        if (comboChangePassword.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Please select the Username");
            comboChangePassword.requestFocus();
        } else if (checkGroupLedger.isSelected() == false && checkReport.isSelected() == false && checkAccVouchers.isSelected() == false && checkProduction.isSelected() == false) {
            JOptionPane.showMessageDialog(this, "User has not been assigned any rights");
            checkGroupLedger.requestFocus();
        } else if (optAdmin.isSelected() == false && optNormalUser.isSelected() == false) {
            JOptionPane.showMessageDialog(this, "Select the User Type");
            optAdmin.requestFocus();

        } else {
            Connection conn = null;
            try {
                conn = DatabaseConnection1.GetConnection();
                conn.setAutoCommit(false);
                Statement st = conn.createStatement();
                int c1 = 0, c2 = 0, c3 = 0, c4 = 0, u = 0;
                if (checkGroupLedger.isSelected()) {
                    c1 = 1;
                } else {
                    c1 = 0;
                }

                if (checkReport.isSelected()) {
                    c2 = 1;
                } else {
                    c2 = 0;
                }

                if (checkAccVouchers.isSelected()) {
                    c3 = 1;
                } else {
                    c3 = 0;
                }

                if (checkProduction.isSelected()) {
                    c4 = 1;
                } else {
                    c4 = 0;
                }

                if (optAdmin.isSelected()) {
                    u = 1;
                } else {
                    u = 2;
                }

                q = "update tbllogin set new_entry=" + c1 + ",acc_vouchers=" + c2 + ",report=" + c3 + ",production=" + c4 + ",user_type=" + u + " where username='" + comboChangePassword.getSelectedItem() + "'";
                st.executeUpdate(q);
                conn.commit();
                JOptionPane.showMessageDialog(this, "User Right Setting is Changed.");
                //btnBackActionPerformed(evt);
                URSButtonBackActionPerformed(evt);
            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                try {
                    conn.close();
                } catch (SQLException ex) {
                    Logger.getLogger(UserRightSetting.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_URSButtonChangeActionPerformed

    private void URSButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_URSButtonBackActionPerformed
        try {
            MainClass m = new MainClass();
            m.menuselection(5);
            this.setClosed(true);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(this.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_URSButtonBackActionPerformed

    private void comboUserRightSettingsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboUserRightSettingsItemStateChanged
        if (tfChangeUserRightSettings.getText() == null) {
            URSCheckGroupLedger.setSelected(false);
            URSCheckReport.setSelected(false);
            URSCheckAccVouchers.setSelected(false);
            URSCheckProduction.setSelected(false);
            URSOptAdmin.setSelected(false);
            URSOptNormalUser.setSelected(false);

        } else if (tfChangeUserRightSettings.getText().equalsIgnoreCase("")) {
            URSCheckGroupLedger.setSelected(false);
            URSCheckReport.setSelected(false);
            URSCheckAccVouchers.setSelected(false);
            URSCheckProduction.setSelected(false);
            URSOptAdmin.setSelected(false);
            URSOptNormalUser.setSelected(false);

        } else {
            Connection conn = null;
            try {
                conn = DatabaseConnection1.GetConnection();
                Statement st = conn.createStatement();

                q = "select * from tbllogin where username='" + comboUserRightSettings.getSelectedItem() + "'";
                System.out.println("URS Query--->>>" + q);
                resultSet = st.executeQuery(q);
                if (resultSet.next()) {
                    if (resultSet.getInt("new_entry") == 1) {
                        URSCheckGroupLedger.setSelected(true);
                    } else {
                        URSCheckGroupLedger.setSelected(false);
                    }

                    if (resultSet.getInt("acc_vouchers") == 1) {
                        URSCheckAccVouchers.setSelected(true);
                    } else {
                        URSCheckAccVouchers.setSelected(false);
                    }

                    if (resultSet.getInt("report") == 1) {
                        URSCheckReport.setSelected(true);
                    } else {
                        URSCheckReport.setSelected(false);
                    }

                    if (resultSet.getInt("production") == 1) {
                        URSCheckProduction.setSelected(true);
                    } else {
                        URSCheckProduction.setSelected(false);
                    }

                    if (resultSet.getInt("user_type") == 1) {
                        URSOptAdmin.setSelected(true);
                        URSOptNormalUser.setSelected(false);
                    } else {
                        URSOptAdmin.setSelected(false);
                        URSOptNormalUser.setSelected(true);
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                try {
                    conn.close();
                } catch (SQLException ex) {
                    Logger.getLogger(UserRightSetting.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_comboUserRightSettingsItemStateChanged

    private void comboUserRightSettingsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboUserRightSettingsKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {

            //btnBackActionPerformed(null);
            URSButtonBackActionPerformed(null);
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            checkGroupLedger.requestFocus();
        }
    }//GEN-LAST:event_comboUserRightSettingsKeyPressed

    private void DUButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DUButtonBackActionPerformed
        try {
            MainClass m = new MainClass();
            m.menuselection(5);
            this.setClosed(true);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(AllAdSuMuDiSettingsOLD.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_DUButtonBackActionPerformed

    private void DUButtonBackKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DUButtonBackKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            //btnBackActionPerformed(null);
            DUButtonBackActionPerformed(null);
        } else if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            DUButtonDelete.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            //btnBackActionPerformed(null);
            DUButtonBackActionPerformed(null);
        }
    }//GEN-LAST:event_DUButtonBackKeyPressed

    private void DUButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DUButtonDeleteActionPerformed
        boolean flag = true;
        String q;
        String val = "";
        Connection conn;
        try {
            conn = DatabaseConnection1.GetConnection();
            Statement st = conn.createStatement();
            int i = 1;

            while (i < jTable4.getRowCount()) {
                val = "" + jTable4.getValueAt(i, 1);
                System.out.println("table value i,1 =" + jTable4.getValueAt(i, 1));
                System.out.println("table value i,0 =" + jTable4.getValueAt(i, 0));
                System.out.println("" + val);

                if (val.equals("true")) {
                    q = "delete from tbllogin where username='" + jTable4.getValueAt(i, 0) + "';";
                    System.out.println("" + q);
                    System.out.println("" + jTable4.getValueAt(i, 0));
                    st.executeUpdate(q);
                }
                i++;
            }
        } catch (Exception e) {
            System.out.println("" + e);
        }

        JOptionPane.showMessageDialog(this, "User Deleted Successfully");

        // Connection conn;
        try {
            conn = DatabaseConnection1.GetConnection();
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("select username from tbllogin");

            DefaultTableModel tableModel = (DefaultTableModel) jTable4.getModel();
            tableModel.setRowCount(0);
            tableModel.setColumnCount(2);

            int i = 0;
            while (rs.next()) {
                i = tableModel.getRowCount();
                tableModel.setRowCount(i + 1);
                jTable4.setValueAt(rs.getString("username"), i, 0);

            }
        } catch (Exception e) {
            System.out.println("" + e);
        }

    }//GEN-LAST:event_DUButtonDeleteActionPerformed

    private void DUButtonDeleteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DUButtonDeleteKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            //btnDeleteActionPerformed(null);
            DUButtonDeleteActionPerformed(null);
        } else if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            NUButtonBack.requestFocus();
        }
    }//GEN-LAST:event_DUButtonDeleteKeyPressed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
        System.out.println("Tabbed Pane InternalFrame Opened");
        jTabbedPane1.setSelectedIndex(0);
        buttonApply.setMnemonic(KeyEvent.VK_Y);
        buttonExit.setMnemonic(KeyEvent.VK_E);

        final String dir = System.getProperty("user.dir");
        String fileName = dir + "\\others\\System.properties";
        System.out.println("Path-->>>Today-->>>" + fileName);
        //String fileName = "C:\\Users\\pc5\\Desktop\\Sudeep IMP FILES\\SystemProperties\\System.properties";
        String line = null;
        int lineNo;
        String oldText = "";
        String stringValueOfTheme = "";

        try {
            FileReader fileReader = new FileReader(fileName);

            BufferedReader bufferedReader = new BufferedReader(fileReader);

            LineNumberReader totalNumberOfLines = new LineNumberReader(new FileReader(new File(fileName)));
            totalNumberOfLines.skip(Long.MAX_VALUE);
            System.out.println("Total-->>" + totalNumberOfLines.getLineNumber());
            for (lineNo = 1; lineNo <= totalNumberOfLines.getLineNumber(); lineNo++) {
                if (lineNo == 1) {
                    line = bufferedReader.readLine();
                    System.out.println(line);
                    stringValueOfTheme = line.substring(8, 10);
                    System.out.println("SubString-->>" + stringValueOfTheme);
                    oldText += line + "\r\n";
                }
            }
            bufferedReader.close();

        } catch (FileNotFoundException ex) {
            System.out.println("Unable to open file '" + fileName + "'");
        } catch (IOException ex) {
            System.out.println("Error reading file '" + fileName + "'");
        }

        if (stringValueOfTheme.equalsIgnoreCase("01")) {
            texture.setSelected(true);
        } else if (stringValueOfTheme.equalsIgnoreCase("02")) {
            aero.setSelected(true);
        } else if (stringValueOfTheme.equalsIgnoreCase("03")) {
            aluminium.setSelected(true);
        } else if (stringValueOfTheme.equalsIgnoreCase("04")) {
            macwin.setSelected(true);
        } else if (stringValueOfTheme.equalsIgnoreCase("05")) {
            luna.setSelected(true);
        } else if (stringValueOfTheme.equalsIgnoreCase("06")) {
            acryl.setSelected(true);
        } else if (stringValueOfTheme.equalsIgnoreCase("07")) {
            mint.setSelected(true);
        } else if (stringValueOfTheme.equalsIgnoreCase("08")) {
            fast.setSelected(true);
        } else if (stringValueOfTheme.equalsIgnoreCase("09")) {
            graphite.setSelected(true);
        } else if (stringValueOfTheme.equalsIgnoreCase("10")) {
            smart.setSelected(true);
        }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        jButtonApply.setMnemonic(KeyEvent.VK_Y);
        jButtonExit.setMnemonic(KeyEvent.VK_E);


        try {

            ResultSet rs1, rs2 = null;
            Connection conn = DatabaseConnection1.GetConnection();
            Statement st = conn.createStatement();
            Statement st1 = conn.createStatement();
            rs1 = st.executeQuery("select username from tblcurrentlogin");
            if (rs1.next()) {
                rs2 = st1.executeQuery("select * from tbllogin where username='" + rs1.getString("username") + "'");
                if (rs2.next()) {
                    if (rs2.getInt("user_type") == 1) {

                        jTabbedPane1.setEnabledAt(3, true);
                        jTabbedPane1.setEnabledAt(2, true);

                    } else {

                        jTabbedPane1.setEnabledAt(3, false);
                        jTabbedPane1.setEnabledAt(2, false);

                    }
                }
            }

            // TODO add your handling code here:
            set_Value_CheckBox();

            TestSMSDTO testSMSDTO = TestSMS.getSavedSettings();
            String chSMS = TestSMS.loadNetworkSMSSettings();
            String chEmail = TestEmailSender.loadNetworkEMailSettings();

            if (testSMSDTO.getName().equalsIgnoreCase("1")) {

                jCheckBoxStockItemName.setSelected(true);

            }
            if (testSMSDTO.getQuantity().equalsIgnoreCase("1")) {

                jCheckBoxQuantity.setSelected(true);

            }
            if (testSMSDTO.getAmount().equalsIgnoreCase("1")) {

                jCheckBoxAmount.setSelected(true);

            }
            if (chSMS.equalsIgnoreCase("1")) {

                jCheckBoxEnableSMSSend.setSelected(true);

            }
            if (chSMS.equalsIgnoreCase("2")) {

                jCheckBoxDisableSMSSend.setSelected(true);

            }
            if (chSMS.equalsIgnoreCase("3")) {

                jCheckBoxEnableSMSSendWithAsk.setSelected(true);

            }
            if (chEmail.equalsIgnoreCase("1")) {

                jCheckBoxEnableEMail.setSelected(true);

            }
            if (chEmail.equalsIgnoreCase("2")) {

                jCheckBoxDisableEMail.setSelected(true);

            }
            //String dir = System.getProperty("user.dir");
            String readLine = "";
            FileReader fileRead = new FileReader(dir + "\\others\\NetworkEMailSender.properties");
            BufferedReader bufferedRead = new BufferedReader(fileRead);

            String readEMail = "";
            int lineCounting = 1;
            while ((readLine = bufferedRead.readLine()) != null) {
                System.out.println("Reading NetworkEMailSettings readLine-->>>" + readLine);
                if (lineCounting == 1) {
                    readEMail = readLine;
                    System.out.println("readEMail---->>" + readEMail);
                }
                lineCounting++;
            }
            bufferedRead.close();
            jTextFieldSender.setText(readEMail);

            FileReader fileReadNew = new FileReader(dir + "\\others\\NetworkEMailPWD.properties");
            BufferedReader bufferedReadNew = new BufferedReader(fileReadNew);

            String readEMailPassword = "";
            int lineCountingCheck = 1;
            while ((readLine = bufferedReadNew.readLine()) != null) {
                System.out.println("Reading NetworkEMailSettings readLine-->>>" + readLine);
                if (lineCountingCheck == 1) {
                    readEMailPassword = readLine;
                    System.out.println("readEMailPassword---->>" + readEMailPassword);
                }
                lineCountingCheck++;
            }
            bufferedReadNew.close();
            jPasswordFieldPassword.setText(readEMailPassword);

        } catch (SQLException ex) {
            Logger.getLogger(AllAdSuMuDiSettingsOLD.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NetworkSettings.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NetworkSettings.class.getName()).log(Level.SEVERE, null, ex);
        }
///////////////////////////Change Password Panel Controls////////////////////////////////////////////////////////////////////////////////////////        
        //CPButtonChange.setMnemonic(KeyEvent.VK_C);
        //CPButtonBack.setMnemonic(KeyEvent.VK_B);
        Connection conn = null;


        try {
            conn = DatabaseConnection1.GetConnection();
            Statement st = conn.createStatement();
            System.out.println("b4 query");
            comboChangePassword.removeAllItems();
            comboChangePassword.addItem("");
            q = "select username from tbllogin";
            resultSet = st.executeQuery(q);

            comboChangePassword.setEditable(true);
            tfChangePassword = (JTextField) comboChangePassword.getEditor().getEditorComponent();

            while (resultSet.next()) {
                vChangePassword.add(resultSet.getString("username"));
            }
            Collections.sort(
                    vChangePassword,
                    new Comparator<String>() {
                        public int compare(String lhs, String rhs) {
                            return lhs.compareToIgnoreCase(rhs);
                        }
                    });

            //cmbGroupAlter_Under.addItem(GroupItems);

            for (int i = 0; i < vChangePassword.size(); i++) {
                comboChangePassword.addItem(vChangePassword.get(i));
            }

            tfChangePassword.addKeyListener(new KeyAdapter() {
                public void keyTyped(final KeyEvent e) {
                    EventQueue.invokeLater(new Runnable() {
                        public void run() {
                            String text = tfChangePassword.getText();
                            if (text.length() == 0) {
                                comboChangePassword.hidePopup();
                                setModel1(new DefaultComboBoxModel(vChangePassword), "");
                            } else {
                                DefaultComboBoxModel m = getSuggestedModel1(vChangePassword, text);
                                if (m.getSize() == 0 || hide_flag) {
                                    comboChangePassword.hidePopup();
                                    hide_flag = false;
                                } else {
                                    setModel1(m, text);
                                    comboChangePassword.showPopup();
                                }

                            }

                            //  String text1 = tf.getText();

                            int code = e.getKeyCode();
                            if (code == KeyEvent.VK_ENTER) {

                                System.out.println("Enter");
                                if (!vChangePassword.contains(text)) {
                                    vChangePassword.addElement(text);
                                    Collections.sort(vChangePassword);
                                    setModel1(getSuggestedModel1(vChangePassword, text), text);
                                }
                                hide_flag = true;

                            } else if (code == KeyEvent.VK_ESCAPE) {
                                hide_flag = true;
                            } else if (code == KeyEvent.VK_RIGHT) {
                                for (int i = 0; i < vChangePassword.size(); i++) {
                                    String str = vChangePassword.elementAt(i);
                                    if (str.startsWith(text)) {
                                        comboChangePassword.setSelectedIndex(-1);
                                        tfChangePassword.setText(str);
                                        return;

                                    }

                                }

                            }

                        }
                    });

                }
            });
            tfChangePassword.addKeyListener(new KeyAdapter() {
                public void keyPressed(final KeyEvent event) {
                    EventQueue.invokeLater(new Runnable() {
                        @Override
                        public void run() {

                            if (event.getKeyCode() == KeyEvent.VK_ENTER) {
                                txtPass.requestFocus();
                            }
                            if (event.getKeyCode() == KeyEvent.VK_ESCAPE) {
                                //      btnBackActionPerformed(null);
                            }
                        }
                    });
                }
            });
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(ChangePass.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
/////////////////////////////////22-11-2013////Change EMail Settings Panel//////////////////////////////////////////////////////////////////////////

        //UESButtonChange.setMnemonic(KeyEvent.VK_C);
        //UESButtonBack.setMnemonic(KeyEvent.VK_B);
        //Connection conn = null;

        try {
            conn = DatabaseConnection1.GetConnection();
            Statement st = conn.createStatement();
            System.out.println("b4 query");
            comboChangeEMailSetting.removeAllItems();
            comboChangeEMailSetting.addItem("");
            q = "select username from tbllogin";
            resultSet = st.executeQuery(q);

            comboChangeEMailSetting.setEditable(true);
            tfChangeEMailSettings = (JTextField) comboChangeEMailSetting.getEditor().getEditorComponent();

            while (resultSet.next()) {
                vChangeEMailSettings.add(resultSet.getString("username"));
            }
            Collections.sort(
                    vChangeEMailSettings,
                    new Comparator<String>() {
                        public int compare(String lhs, String rhs) {
                            return lhs.compareToIgnoreCase(rhs);
                        }
                    });

            //cmbGroupAlter_Under.addItem(GroupItems);

            for (int i = 0; i < vChangeEMailSettings.size(); i++) {
                comboChangeEMailSetting.addItem(vChangeEMailSettings.get(i));
            }

            tfChangeEMailSettings.addKeyListener(new KeyAdapter() {
                public void keyTyped(final KeyEvent e) {
                    EventQueue.invokeLater(new Runnable() {
                        public void run() {
                            String text = tfChangeEMailSettings.getText();
                            if (text.length() == 0) {
                                comboChangeEMailSetting.hidePopup();
                                setModel2(new DefaultComboBoxModel(vChangeEMailSettings), "");
                            } else {
                                DefaultComboBoxModel m = getSuggestedModel2(vChangeEMailSettings, text);
                                if (m.getSize() == 0 || hide_flag) {
                                    comboChangeEMailSetting.hidePopup();
                                    hide_flag = false;
                                } else {
                                    setModel2(m, text);
                                    comboChangeEMailSetting.showPopup();
                                }
                            }

                            //String text1 = tfChangeEMailSettings.getText();
                            int code = e.getKeyCode();
                            if (code == KeyEvent.VK_ENTER) {
                                System.out.println("Enter");
                                if (!vChangeEMailSettings.contains(text)) {
                                    vChangeEMailSettings.addElement(text);
                                    Collections.sort(vChangeEMailSettings);
                                    setModel2(getSuggestedModel2(vChangeEMailSettings, text), text);
                                }
                                hide_flag = true;
                            } else if (code == KeyEvent.VK_ESCAPE) {
                                hide_flag = true;
                            } else if (code == KeyEvent.VK_RIGHT) {
                                for (int i = 0; i < vChangeEMailSettings.size(); i++) {
                                    String str = vChangeEMailSettings.elementAt(i);
                                    if (str.startsWith(text)) {
                                        comboChangeEMailSetting.setSelectedIndex(-1);
                                        tfChangeEMailSettings.setText(str);
                                        return;
                                    }
                                }
                            }

                        }
                    });

                }
            });
            tfChangeEMailSettings.addKeyListener(new KeyAdapter() {
                public void keyPressed(final KeyEvent event) {
                    EventQueue.invokeLater(new Runnable() {
                        @Override
                        public void run() {

                            if (event.getKeyCode() == KeyEvent.VK_ENTER) {
                                txtEmailId.requestFocus();
                            }
                            if (event.getKeyCode() == KeyEvent.VK_ESCAPE) {
                                //btnBackActionPerformed(null);
                                UESButtonBackActionPerformed(null);
                            }
                        }
                    });
                }
            });

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(AllAdSuMuDiSettingsOLD.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
///////////////22-11-2013//////////User Right Settings Panel/////////////////////////////////////////////////////////////////////////////////

        //URSButtonChange.setMnemonic(KeyEvent.VK_C);
        //URSButtonBack.setMnemonic(KeyEvent.VK_B);
        //Connection conn = null;

        try {
            conn = DatabaseConnection1.GetConnection();
            Statement st = conn.createStatement();
            System.out.println("b4 query");
            comboUserRightSettings.removeAllItems();
            comboUserRightSettings.addItem("");
            q = "select username from tbllogin";
            resultSet = st.executeQuery(q);
            comboUserRightSettings.setEditable(true);
            tfChangeUserRightSettings = (JTextField) comboUserRightSettings.getEditor().getEditorComponent();

            while (resultSet.next()) {
                vChangeUserRightSettings.add(resultSet.getString("username"));
            }
            Collections.sort(
                    vChangeUserRightSettings,
                    new Comparator<String>() {
                        public int compare(String lhs, String rhs) {
                            return lhs.compareToIgnoreCase(rhs);
                        }
                    });

            //cmbGroupAlter_Under.addItem(GroupItems);

            for (int i = 0; i < vChangeUserRightSettings.size(); i++) {
                comboUserRightSettings.addItem(vChangeUserRightSettings.get(i));
            }

            tfChangeUserRightSettings.addKeyListener(new KeyAdapter() {
                public void keyTyped(final KeyEvent e) {
                    EventQueue.invokeLater(new Runnable() {
                        public void run() {
                            String text = tfChangeUserRightSettings.getText();
                            if (text.length() == 0) {
                                comboUserRightSettings.hidePopup();
                                setModel3(new DefaultComboBoxModel(vChangeUserRightSettings), "");
                            } else {
                                DefaultComboBoxModel m = getSuggestedModel3(vChangeUserRightSettings, text);
                                if (m.getSize() == 0 || hide_flag) {
                                    comboUserRightSettings.hidePopup();
                                    hide_flag = false;
                                } else {
                                    setModel3(m, text);
                                    comboUserRightSettings.showPopup();
                                }

                            }

                            //  String text1 = tf.getText();

                            int code = e.getKeyCode();
                            if (code == KeyEvent.VK_ENTER) {

                                System.out.println("Enter");
                                if (!vChangeUserRightSettings.contains(text)) {
                                    vChangeUserRightSettings.addElement(text);
                                    Collections.sort(vChangeUserRightSettings);
                                    setModel3(getSuggestedModel3(vChangeUserRightSettings, text), text);
                                }
                                hide_flag = true;

                            } else if (code == KeyEvent.VK_ESCAPE) {
                                hide_flag = true;
                            } else if (code == KeyEvent.VK_RIGHT) {
                                for (int i = 0; i < vChangeUserRightSettings.size(); i++) {
                                    String str = vChangeUserRightSettings.elementAt(i);
                                    if (str.startsWith(text)) {
                                        comboUserRightSettings.setSelectedIndex(-1);
                                        tfChangeUserRightSettings.setText(str);
                                        return;

                                    }

                                }

                            }

                        }
                    });

                }
            });
            tfChangeUserRightSettings.addKeyListener(new KeyAdapter() {
                public void keyPressed(final KeyEvent event) {
                    EventQueue.invokeLater(new Runnable() {
                        @Override
                        public void run() {

                            if (event.getKeyCode() == KeyEvent.VK_ENTER) {
                                checkGroupLedger.requestFocus();
                            }
                            if (event.getKeyCode() == KeyEvent.VK_ESCAPE) {
                                //      btnBackActionPerformed(null);
                            }
                        }
                    });
                }
            });

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(AllAdSuMuDiSettingsOLD.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
/////////////////////////////////23-11-2013/////////Delete User Panel Controls///////////////////////////////////////////////////////////////


        try {
            conn = DatabaseConnection1.GetConnection();
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("select username from tbllogin");

            DefaultTableModel tableModel = (DefaultTableModel) jTable4.getModel();
            tableModel.setRowCount(0);
            tableModel.setColumnCount(2);

            int i = 0;
            while (rs.next()) {
                i = tableModel.getRowCount();
                tableModel.setRowCount(i + 1);
                jTable4.setValueAt(rs.getString("username"), i, 0);

            }
        } catch (Exception e) {
            System.out.println("" + e);
        }
////////////////////////////23-11-2013//////////Printer Settings Control Panel///////////////////////////////////////

        btnBack.setMnemonic(KeyEvent.VK_B);

        btnSave.setMnemonic(KeyEvent.VK_V);

        printSettingsInitilise();
        ResultSet rs2;


        try {
            conn = DatabaseConnection1.GetConnection();
            Statement st = conn.createStatement();
            rs2 = st.executeQuery("select * from  tblOtherSetting");
            if (rs2.next()) {
                if (PrinterSettings.flagDirectPrint == 1) {
                    optYes.setSelected(true);
                    optNo.setSelected(false);
                } else if (PrinterSettings.flagDirectPrint == 0) {
                    optNo.setSelected(true);
                    optYes.setSelected(false);
                }

                if (PrinterSettings.flagPrintPageFormat == 1) {
                    optPdf.setSelected(true);
                    optHtml.setSelected(false);
                    optWord.setSelected(false);
                    optExcel.setSelected(false);
                } else if (PrinterSettings.flagPrintPageFormat == 2) {
                    optHtml.setSelected(true);
                    optPdf.setSelected(false);
                    optWord.setSelected(false);
                    optExcel.setSelected(false);
                } else if (PrinterSettings.flagPrintPageFormat == 3) {
                    optWord.setSelected(true);
                    optPdf.setSelected(false);
                    optHtml.setSelected(false);
                    optExcel.setSelected(false);
                } else if (PrinterSettings.flagPrintPageFormat == 4) {
                    optExcel.setSelected(true);
                    optPdf.setSelected(false);
                    optHtml.setSelected(false);
                    optWord.setSelected(false);
                }
                if (PrinterSettings.flagPrintPageSize == 1) {
                    optA4.setSelected(true);
                    optA5.setSelected(false);
                    optAsk.setSelected(false);
                } else if (PrinterSettings.flagPrintPageSize == 2) {
                    optA5.setSelected(true);
                    optA4.setSelected(false);
                    optAsk.setSelected(false);

                } else if (PrinterSettings.flagPrintPageSize == 3) {
                    optAsk.setSelected(true);
                    optA5.setSelected(false);
                    optA4.setSelected(false);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(PrinterSettings.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
////////////////////////23-11-2013/////////////////Company Controls/////////////////////////////////////////////////

        jButtonUpdateLogo.setMnemonic(KeyEvent.VK_L);

        btnUpdate.setMnemonic(KeyEvent.VK_U);

        btnCompanyCreate.setMnemonic(KeyEvent.VK_C);

        btncompanyClear.setMnemonic(KeyEvent.VK_R);

        btnUpdate.setMnemonic(KeyEvent.VK_U);

        btnEdit.setMnemonic(KeyEvent.VK_E);
        control = 0;
        Connection con = DatabaseConnection1.GetConnection();


        try {

            ResultSet rs;
            Statement stmt = con.createStatement();
            rs = stmt.executeQuery("select * from registration ");
            Image img = null;
            BufferedImage mImage1 = null;
            byte[] bytes = null;
            while (rs.next()) {
                Blob blob = rs.getBlob("image");
                InputStream in = blob.getBinaryStream();
                mImage1 = ImageIO.read(in);
                bytes = rs.getBytes("image");
                img = Toolkit.getDefaultToolkit().createImage(bytes);

                ImageIcon icon = new ImageIcon(img);
                Image img1 = icon.getImage();
                Image newimg = img.getScaledInstance(157, 111, Image.SCALE_SMOOTH);
                ImageIcon newicon = new ImageIcon(newimg);
                LogoPanelView.setIcon(newicon);

            }

            con.close();
        } catch (Exception e) {
        }

        try {
            String q = "";
            //Connection conn;
            conn = DatabaseConnection1.GetConnection();
            conn.setAutoCommit(false);
            Statement st = conn.createStatement();

            q = "select * from tblCreateCompany";
            resultSet = st.executeQuery(q);
            // System.out.println("CI"+rs.next());

            String value = "" + resultSet.next();
            //  System.out.println("CI"+rs.getInt("CompanyIndex"));

            // System.out.println(""+value);
            if (value.equals("true")) {
                String name = resultSet.getString("Name");
                txtCompanyName.setText(name);
                txtCompanyName.setEnabled(false);
                String alias = resultSet.getString("Alias");
                txtCompanyAlias.setText(alias);
                txtCompanyAlias.setEnabled(false);
                String address = resultSet.getString("Address");
                txtCompanyAddress.setText(address);
                txtCompanyAddress.setEnabled(false);
                String contact = "" + resultSet.getString("ContactNo");
                txtCompanyContact.setText(contact);
                txtCompanyContact.setEnabled(false);
                String emailid = resultSet.getString("EmailId");
                txtCompanyMail.setText(emailid);
                txtCompanyMail.setEnabled(false);
                String income = "" + resultSet.getString("IncomeTaxNo");
                txtCompanyITN.setText(income);
                txtCompanyITN.setEnabled(false);
                String sales = "" + resultSet.getString("SaleTaxNo");
                txtCompanySTN.setText(sales);
                txtCompanySTN.setEnabled(false);
                String declaration = resultSet.getString("Declaration");
                txtCompanyDeclaration.setText(declaration);
                txtCompanyDeclaration.setEnabled(false);
                String tagline = resultSet.getString("TagLine");
                txtCompanyTagLine.setText(tagline);
                txtCompanyTagLine.setEnabled(false);
                String termsConditions = resultSet.getString("TermCnditions");
                txtCompanyTermsConditions.setText(termsConditions);
                txtCompanyTermsConditions.setEnabled(false);
                String nameOfGod = resultSet.getString("NameOfGod");
                txtNameOfGod.setText(nameOfGod);
                txtNameOfGod.setEnabled(false);
                String signAuthority = resultSet.getString("SignAuthority");
                txtCompanySignature.setText(signAuthority);
                txtCompanySignature.setEnabled(false);
                String cstNewNumber = resultSet.getString("VatTinNo");
                txtCompanyCSTNo.setText(cstNewNumber);
                txtCompanyCSTNo.setEnabled(false);
                btnCompanyCreate.setEnabled(false);
                //String LBTNumber = resultSet.getString("LBTNo");
                //txt.setText(LBTNumber);
                //txtLBTNumber.setEnabled(false);

            } else {

                btnCompanyCreate.setEnabled(true);

            }




        } catch (Exception e) {
            System.out.println("" + e);
        }
/////////////////////////Fetch Company Logo Image//////////////////////////////////////////////////////////////////        

        control = 0;
        //Connection con = DatabaseConnection1.GetConnection();


        try {

            ResultSet rs;
            Statement stmt = con.createStatement();
            rs = stmt.executeQuery("select * from registration ");
            Image img = null;
            BufferedImage mImage1 = null;
            byte[] bytes = null;
            while (rs.next()) {
                Blob blob = rs.getBlob("image");
                InputStream in = blob.getBinaryStream();
                mImage1 = ImageIO.read(in);
                bytes = rs.getBytes("image");
                img = Toolkit.getDefaultToolkit().createImage(bytes);

                ImageIcon icon = new ImageIcon(img);
                Image img1 = icon.getImage();
                Image newimg = img.getScaledInstance(111, 76, Image.SCALE_SMOOTH);
                ImageIcon newicon = new ImageIcon(newimg);
                LogoPanelView.setIcon(newicon);

            }

            con.close();
        } catch (Exception e) {
        }
        SetWaitTimer s = new SetWaitTimer();

        s.resumeWaitTimer(AllAdSuMuDiSettingsOLD.this);
    }//GEN-LAST:event_formInternalFrameOpened

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
        // TODO add your handling code here:
        if (txtNameOfGod.isEnabled()) {
            btncompanyClear.setEnabled(true);
        } else {
            btncompanyClear.setEnabled(false);
        }
    }//GEN-LAST:event_formInternalFrameActivated

    private void createUserPanelFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_createUserPanelFocusLost
        // TODO add your handling code here:
        txtUname.setText("");
        txtPass.setText("");
        txtConfirmPass.setText("");
        txtEmailId.setText("");
        txtEmailpass.setText("");
        checkAccVouchers.setSelected(false);
        checkGroupLedger.setSelected(false);
        checkProduction.setSelected(false);
        checkReport.setSelected(false);
        optAdmin.setSelected(false);
        optNormalUser.setSelected(false);
    }//GEN-LAST:event_createUserPanelFocusLost

    private void optYesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_optYesStateChanged
        // TODO add your handling code here:
        if (optYes.isSelected()) {
            optNo.setSelected(false);
        }
    }//GEN-LAST:event_optYesStateChanged

    private void optNoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_optNoStateChanged
        // TODO add your handling code here:
        if (optNo.isSelected()) {
            optYes.setSelected(false);
        }
    }//GEN-LAST:event_optNoStateChanged

    private void optPdfStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_optPdfStateChanged
        // TODO add your handling code here:
        if (optPdf.isSelected()) {
            optHtml.setSelected(false);
            optWord.setSelected(false);
            optExcel.setSelected(false);
        }
    }//GEN-LAST:event_optPdfStateChanged

    private void optHtmlStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_optHtmlStateChanged
        // TODO add your handling code here:
        if (optHtml.isSelected()) {
            optPdf.setSelected(false);
            optWord.setSelected(false);
            optExcel.setSelected(false);
        }
    }//GEN-LAST:event_optHtmlStateChanged

    private void optWordStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_optWordStateChanged
        // TODO add your handling code here:
        if (optWord.isSelected()) {
            optHtml.setSelected(false);
            optPdf.setSelected(false);
            optExcel.setSelected(false);
        }
    }//GEN-LAST:event_optWordStateChanged

    private void optExcelStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_optExcelStateChanged
        // TODO add your handling code here:
        if (optExcel.isSelected()) {
            optHtml.setSelected(false);
            optWord.setSelected(false);
            optPdf.setSelected(false);
        }
    }//GEN-LAST:event_optExcelStateChanged

    private void optA4StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_optA4StateChanged
        // TODO add your handling code here:
        if (optA4.isSelected()) {
            optA5.setSelected(false);
            optAsk.setSelected(false);
        }
    }//GEN-LAST:event_optA4StateChanged

    private void optA5StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_optA5StateChanged
        // TODO add your handling code here:
        if (optA5.isSelected()) {
            optA4.setSelected(false);
            optAsk.setSelected(false);
        }
    }//GEN-LAST:event_optA5StateChanged

    private void optAskStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_optAskStateChanged
        // TODO add your handling code here:
        if (optAsk.isSelected()) {
            optA5.setSelected(false);
            optA4.setSelected(false);
        }
    }//GEN-LAST:event_optAskStateChanged

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        Connection conn = null;
        try {
            conn = DatabaseConnection1.GetConnection();
            Statement st = conn.createStatement();
            String query = "select * from tblOtherSetting";
            resultSet = st.executeQuery(query);
            AllAdSuMuDiSettingsOLD.flagDirectPrint = 0;
            AllAdSuMuDiSettingsOLD.flagPrintPageSize = 0;
            AllAdSuMuDiSettingsOLD.flagPrintPageFormat = 0;
            if (optYes.isSelected()) {
                AllAdSuMuDiSettingsOLD.flagDirectPrint = 1;
            } else if (optNo.isSelected()) {
                AllAdSuMuDiSettingsOLD.flagDirectPrint = 0;
            }
            if (optPdf.isSelected()) {
                AllAdSuMuDiSettingsOLD.flagPrintPageFormat = 1;
            } else if (optHtml.isSelected()) {
                AllAdSuMuDiSettingsOLD.flagPrintPageFormat = 2;
            } else if (optWord.isSelected()) {
                AllAdSuMuDiSettingsOLD.flagPrintPageFormat = 3;
            } else if (optExcel.isSelected()) {
                AllAdSuMuDiSettingsOLD.flagPrintPageFormat = 4;
            }
            if (optA4.isSelected()) {
                AllAdSuMuDiSettingsOLD.flagPrintPageSize = 1;
            } else if (optA5.isSelected()) {
                AllAdSuMuDiSettingsOLD.flagPrintPageSize = 2;
            } else if (optAsk.isSelected()) {
                AllAdSuMuDiSettingsOLD.flagPrintPageSize = 3;
            }

            if (optYes.isSelected() == false && optNo.isSelected() == false) {
                JOptionPane.showMessageDialog(null, "Please Select Show Print Preview ");
                optYes.requestFocus();
            } else if (optPdf.isSelected() == false && optHtml.isSelected() == false && optWord.isSelected() == false && optExcel.isSelected() == false) {
                JOptionPane.showMessageDialog(null, "Please Select Print Display Format");
                optPdf.requestFocus();
            } else if (optA4.isSelected() == false && optA5.isSelected() == false && optAsk.isSelected() == false) {
                JOptionPane.showMessageDialog(null, "Please Select Page Format ");
                optA4.requestFocus();
            } else {
                if (resultSet.next()) {

                    query = "update tblOtherSetting set printpreview=" + AllAdSuMuDiSettingsOLD.flagDirectPrint + ",printPageFormat=" + AllAdSuMuDiSettingsOLD.flagPrintPageSize + ",printDisplayFormat=" + AllAdSuMuDiSettingsOLD.flagPrintPageFormat + "";
                } else {
                    query = "insert into tblOtherSetting(printpreview,printPageFormat,printDisplayFormat) values(" + AllAdSuMuDiSettingsOLD.flagDirectPrint + "," + AllAdSuMuDiSettingsOLD.flagPrintPageSize + "," + AllAdSuMuDiSettingsOLD.flagPrintPageFormat + ")";
                }
                st.executeUpdate(query);
                System.out.println("Operation Performed");
                JOptionPane.showMessageDialog(null, "Settings Saved Successfully");
                btnBackActionPerformed(evt);
            }
        } catch (Exception e) {
        } finally {
            try {
                conn.close();


            } catch (SQLException ex) {
                Logger.getLogger(AllAdSuMuDiSettingsOLD.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        try {
            MainClass m = new MainClass();
            m.menuselection(5);
            this.setClosed(true);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(this.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnBackActionPerformed

    private void txtNameOfGodKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNameOfGodKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtCompanyName.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            try {
                this.setClosed(true);


            } catch (PropertyVetoException ex) {
                Logger.getLogger(AllAdSuMuDiSettingsOLD.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_txtNameOfGodKeyPressed

    private void txtCompanyNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCompanyNameFocusGained
        // TODO add your handling code here:
        txtCompanyName.selectAll();
    }//GEN-LAST:event_txtCompanyNameFocusGained

    private void txtCompanyNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCompanyNameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtCompanyAlias.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtNameOfGod.requestFocus();
        }
    }//GEN-LAST:event_txtCompanyNameKeyPressed

    private void txtCompanyAliasFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCompanyAliasFocusGained
        // TODO add your handling code here:
        txtCompanyAlias.selectAll();
    }//GEN-LAST:event_txtCompanyAliasFocusGained

    private void txtCompanyAliasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCompanyAliasKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtCompanyTagLine.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtCompanyName.requestFocus();
        }
    }//GEN-LAST:event_txtCompanyAliasKeyPressed

    private void txtCompanyTagLineFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCompanyTagLineFocusGained
        // TODO add your handling code here:
        txtCompanyTagLine.selectAll();
    }//GEN-LAST:event_txtCompanyTagLineFocusGained

    private void txtCompanyTagLineKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCompanyTagLineKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtCompanyAddress.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtCompanyAlias.requestFocus();
        }
    }//GEN-LAST:event_txtCompanyTagLineKeyPressed

    private void txtCompanyAddressFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCompanyAddressFocusGained
        // TODO add your handling code here:
        txtCompanyAddress.selectAll();
    }//GEN-LAST:event_txtCompanyAddressFocusGained

    private void txtCompanyAddressKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCompanyAddressKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtCompanyContact.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtCompanyTagLine.requestFocus();
        }
    }//GEN-LAST:event_txtCompanyAddressKeyPressed

    private void txtCompanyContactKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCompanyContactKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtCompanyMail.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtCompanyAddress.requestFocus();
        }
    }//GEN-LAST:event_txtCompanyContactKeyPressed

    private void txtCompanyMailFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCompanyMailFocusGained
        // TODO add your handling code here:
        txtCompanyMail.selectAll();
    }//GEN-LAST:event_txtCompanyMailFocusGained

    private void txtCompanyMailKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCompanyMailKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtCompanyITN.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtCompanyContact.requestFocus();
        }
    }//GEN-LAST:event_txtCompanyMailKeyPressed

    private void txtCompanyITNKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCompanyITNKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtCompanySTN.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtCompanyMail.requestFocus();
        }
    }//GEN-LAST:event_txtCompanyITNKeyPressed

    private void txtCompanySTNKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCompanySTNKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtCompanyCSTNo.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtCompanyITN.requestFocus();
        }
    }//GEN-LAST:event_txtCompanySTNKeyPressed

    private void txtCompanyCSTNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCompanyCSTNoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtCompanyDeclaration.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtCompanySTN.requestFocus();
        }
    }//GEN-LAST:event_txtCompanyCSTNoKeyPressed

    private void txtCompanyDeclarationFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCompanyDeclarationFocusGained
        // TODO add your handling code here:
        txtCompanyDeclaration.selectAll();
    }//GEN-LAST:event_txtCompanyDeclarationFocusGained

    private void txtCompanyDeclarationKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCompanyDeclarationKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtCompanyTermsConditions.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtCompanyCSTNo.requestFocus();
        }
    }//GEN-LAST:event_txtCompanyDeclarationKeyPressed

    private void txtCompanyTermsConditionsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCompanyTermsConditionsFocusGained
        // TODO add your handling code here:
        txtCompanyTermsConditions.selectAll();
    }//GEN-LAST:event_txtCompanyTermsConditionsFocusGained

    private void txtCompanyTermsConditionsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCompanyTermsConditionsKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtCompanySignature.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtCompanyDeclaration.requestFocus();
        }
    }//GEN-LAST:event_txtCompanyTermsConditionsKeyPressed

    private void txtCompanySignatureFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCompanySignatureFocusGained
        // TODO add your handling code here:
        txtCompanySignature.selectAll();
    }//GEN-LAST:event_txtCompanySignatureFocusGained

    private void txtCompanySignatureKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCompanySignatureKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnCompanyCreate.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtCompanyTermsConditions.requestFocus();
        }
    }//GEN-LAST:event_txtCompanySignatureKeyPressed

    private void btncompanyClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncompanyClearActionPerformed
        txtCompanyName.setText("");
        txtCompanyAddress.setText("");
        txtCompanyAlias.setText("");
        txtCompanyContact.setText("");
        txtCompanyITN.setText("");
        txtCompanyMail.setText("");
        txtCompanySTN.setText("");
        txtCompanyDeclaration.setText("");
        txtCompanyTagLine.setText("");
        txtCompanyCSTNo.setText("");
        txtCompanyTermsConditions.setText("");
        txtCompanySignature.setText("");
    }//GEN-LAST:event_btncompanyClearActionPerformed

    private void btncompanyClearKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btncompanyClearKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btncompanyClearActionPerformed(null);
        } else if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            btnCompanyCreate.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtCompanySignature.requestFocus();
        }
    }//GEN-LAST:event_btncompanyClearKeyPressed

    private void btnCompanyCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompanyCreateActionPerformed

        if (txtCompanyName.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Enter Name Of Company");
            txtCompanyName.requestFocus();
        } /*  else if(txtCompanyAlias.getText().trim().trim().equals(""))
         {
         // JOptionPane.showMessageDialog(null, "Enter Alias Of Company");
         txtCompanyAlias.requestFocus();
         }*/ /*  else if(txtCompanyAddress.getText().trim().trim().equals(""))
         {
         // JOptionPane.showMessageDialog(null, "Enter Address Of Company");
         txtCompanyAddress.requestFocus();
         }*/ /*  else if(txtCompanyContact.getText().trim().trim().equals(""))
         {
         //JOptionPane.showMessageDialog(null, "Enter Contact Details Of Company");
         txtCompanyContact.requestFocus();
         }*/ /*else if(txtCompanyMail.getText().trim().trim().equals(""))
         {
         // JOptionPane.showMessageDialog(null, "Enter E-MailID Of Company");
         txtCompanyMail.requestFocus();
         }*/ /*else if(txtCompanyITN.getText().trim().trim().equals(""))
         {
         //JOptionPane.showMessageDialog(null, "Enter Income Tax Number Of Company");
         txtCompanyITN.requestFocus();
         }*/ /*else if(txtCompanySTN.getText().trim().trim().equals(""))
         {
         // JOptionPane.showMessageDialog(null, "Enter Sales Tax Number Of Company");
         txtCompanySTN.requestFocus();
         }*/ else {
            txtCompanyName.transferFocus();
            int current = 0;
            Connection conn = null;
            try {

                conn = DatabaseConnection1.GetConnection();

                conn.setAutoCommit(false);
                Statement st = conn.createStatement();

                resultSet = st.executeQuery("select max(CompanyIndex) As id from tblcreatecompany");
                if (resultSet.next()) {
                    current = resultSet.getInt("id");
                }
                current = current + 1;
                // String contact=txtCompanyContact.getText().trim();
                // String ITN=txtCompanyITN.getText().trim();
                // String STN=txtCompanySTN.getText().trim();
                String sql = "insert into tblCreateCompany(CompanyIndex,Name,Alias,Address,ContactNo,EmailId,IncomeTaxNo,SaleTaxNo,Declaration,TagLine,TermCnditions,NameOfGod,SignAuthority,VatTinNo) values(" + current + ",'" + txtCompanyName.getText().trim() + "','" + txtCompanyAlias.getText().trim() + "','" + txtCompanyAddress.getText().trim() + "','" + txtCompanyContact.getText().trim() + "','" + txtCompanyMail.getText().trim() + "','" + txtCompanyITN.getText().trim() + "','" + txtCompanySTN.getText().trim() + "','" + txtCompanyDeclaration.getText().trim() + "','" + txtCompanyTagLine.getText().trim() + "','" + txtCompanyTermsConditions.getText().trim() + "','" + txtNameOfGod.getText().trim() + "','" + txtCompanySignature.getText().trim() + "','" + txtCompanyCSTNo.getText().trim() + "');";
                System.out.println("fgsfsdfdfsdfdsfdsfsf" + sql);
                st.executeUpdate(sql);
                //  rs=st.executeQuery("select CompanyIndex from tblcreatecompany");
                // while(rs.next())
                // {

                JOptionPane.showMessageDialog(null, "Company Created Successfully...");
                conn.commit();

            } catch (Exception e) {
                System.out.println("Exception : " + e);
            }

        }

    }//GEN-LAST:event_btnCompanyCreateActionPerformed

    private void btnCompanyCreateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnCompanyCreateKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnCompanyCreateActionPerformed(null);
        } else if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            btncompanyClear.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtCompanySignature.requestFocus();
        }
    }//GEN-LAST:event_btnCompanyCreateKeyPressed

    private void jButtonUpdateLogoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateLogoActionPerformed
        control = 1;
        int dialogButton1 = JOptionPane.YES_NO_OPTION;
        int dialogResult1 = JOptionPane.showConfirmDialog(this, "Your Current Logo Will Be Removed,Do You Want To Proceed ?", "Warning", dialogButton1);
        if (dialogResult1 == 0) {

            imageloading o = new imageloading();
            o.setVisible(true);
        } else {
            //formInternalFrameActivated(null);
        }
        // path  = filechoose();
        //  JOptionPane.showMessageDialog(this, "Dear User,This Option is Temperary Out Of Service");
    }//GEN-LAST:event_jButtonUpdateLogoActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        if (txtCompanyName.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Enter Name Of Company");
            txtCompanyName.requestFocus();
        } else {
            txtCompanyName.transferFocus();
            int current = 0;
            Connection conn = null;
            try {


                conn = DatabaseConnection1.GetConnection();
                conn.setAutoCommit(false);
                Statement st = conn.createStatement();

                resultSet = st.executeQuery("select max(CompanyIndex) As id from tblcreatecompany");
                if (resultSet.next()) {
                    current = resultSet.getInt("id");
                }
                current = current + 1;
                //String sql="update tblCreateCompany set Name='"+txtCName.getText().trim()+"',Alias='"+txtCAlias.getText().trim()+"',Address='"+txtCAddress.getText().trim()+"',ContactNo='"+txtCContact.getText().trim()+"',EmailId='"+txtCEmailId.getText().trim()+"',IncomeTaxNo='"+txtCITN.getText().trim()+"',SaleTaxNo='"+txtCSTN.getText().trim()+"',Declaration='"+txtCDeclaration.getText().trim()+"',TagLine='"+txtCTagLine.getText().trim()+"',TermCnditions='"+txtCTermsConditions.getText().trim()+"',NameOfGod='"+txtCGod.getText().trim()+"',SignAuthority='"+txtCSignature.getText().trim()+"',VatTinNo='"+txtCstNewNumber.getText().trim()+"';";   
                String sql = "update tblCreateCompany set NameOfGod=?,Name=?,Alias=?,Address=?,ContactNo=?,EmailId=?,IncomeTaxNo=?,SaleTaxNo=?,Declaration=?,TagLine=?,TermCnditions=?,SignAuthority=?,VatTinNo=?,LBTNo=?;";
                PreparedStatement stat = conn.prepareStatement(sql);
                stat.setString(1, txtNameOfGod.getText().trim());
                stat.setString(2, txtCompanyName.getText().trim());
                stat.setString(3, txtCompanyAlias.getText().trim());
                stat.setString(4, txtCompanyAddress.getText().trim());
                stat.setString(5, txtCompanyContact.getText().trim());
                stat.setString(6, txtCompanyMail.getText().trim());
                stat.setString(7, txtCompanyITN.getText().trim());
                stat.setString(8, txtCompanySTN.getText().trim());
                stat.setString(9, txtCompanyDeclaration.getText().trim());
                stat.setString(10, txtCompanyTagLine.getText().trim());
                stat.setString(11, txtCompanyTermsConditions.getText().trim());
                stat.setString(12, txtCompanySignature.getText().trim());
                stat.setString(13, txtCompanyCSTNo.getText().trim());
                stat.setString(14, "");

                stat.executeUpdate();
                System.out.println("fgsfsdfdfsdfdsfdsfsf" + sql);
                // st.executeUpdate(sql);    




                if (control == 1) {
                    BufferedImage mImage;
                    final String dir = System.getProperty("user.dir");
                    File imgfile = new File(source);
                    FileInputStream fin = new FileInputStream(imgfile);

                    PreparedStatement pre1 = conn.prepareStatement("delete from registration");
                    pre1.executeUpdate();

                    PreparedStatement pre2 = conn.prepareStatement("insert into registration values(?)");
                    pre2.setBinaryStream(1, fin, (int) imgfile.length());
                    pre2.executeUpdate();
                    System.out.println("Successfully inserted the file into the database!");
                }

                JOptionPane.showMessageDialog(null, "Company Information Updated Successfully...");
                conn.commit();

            } catch (Exception e) {
                System.out.println("Exception On Save button Click : " + e);
            }

        }
        txtCompanyAddress.setEnabled(false);
        txtCompanyAlias.setEnabled(false);
        txtCompanyContact.setEnabled(false);
        txtCompanyDeclaration.setEnabled(false);
        txtCompanyMail.setEnabled(false);
        txtCompanyITN.setEnabled(false);
        txtCompanyName.setEnabled(false);
        txtCompanySTN.setEnabled(false);
        txtCompanyTagLine.setEnabled(false);
        txtCompanyTermsConditions.setEnabled(false);
        txtNameOfGod.setEnabled(false);
        txtCompanySignature.setEnabled(false);
        txtCompanyCSTNo.setEnabled(false);
        btncompanyClear.setEnabled(false);
        //txtLBTNumber.setEditable(false);
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        txtCompanyName.requestFocus();
        btncompanyClear.setEnabled(true);
        txtCompanyAddress.setEnabled(true);
        txtCompanyAddress.setEditable(true);
        txtCompanyAlias.setEnabled(true);
        txtCompanyAlias.setEditable(true);
        txtCompanyContact.setEnabled(true);
        txtCompanyContact.setEditable(true);
        txtCompanyDeclaration.setEnabled(true);
        txtCompanyDeclaration.setEditable(true);
        txtCompanyMail.setEnabled(true);
        txtCompanyMail.setEditable(true);
        txtCompanyITN.setEnabled(true);
        txtCompanyITN.setEditable(true);
        txtCompanyName.setEnabled(true);
        txtCompanyName.setEditable(true);
        txtCompanySTN.setEnabled(true);
        txtCompanySTN.setEditable(true);
        txtCompanyTagLine.setEnabled(true);
        txtCompanyTagLine.setEditable(true);
        txtCompanyTermsConditions.setEnabled(true);
        txtCompanyTermsConditions.setEditable(true);
        txtNameOfGod.setEnabled(true);
        txtNameOfGod.setEditable(true);
        txtCompanySignature.setEnabled(true);
        txtCompanySignature.setEditable(true);
        txtCompanyCSTNo.setEnabled(true);
        txtCompanyCSTNo.setEditable(true);
    }//GEN-LAST:event_btnEditActionPerformed

    private void acrylMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_acrylMouseClicked
        // TODO add your handling code here:
        if (acryl.isSelected()) {

            texture.setSelected(false);
            aero.setSelected(false);
            aluminium.setSelected(false);
            macwin.setSelected(false);
            luna.setSelected(false);
            mint.setSelected(false);
            fast.setSelected(false);
            graphite.setSelected(false);
            smart.setSelected(false);

            choice = "06";

            Image img = new javax.swing.ImageIcon(dir + "/images/Acryl.png").getImage();
            img = img.getScaledInstance(jPanelPreview.getWidth(), jPanelPreview.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon scaledImageIcon = new ImageIcon(img);
            jPanelPreview.setIcon(scaledImageIcon);
        }
    }//GEN-LAST:event_acrylMouseClicked

    private void mintMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mintMouseClicked
        // TODO add your handling code here:
        if (mint.isSelected()) {

            texture.setSelected(false);
            aero.setSelected(false);
            aluminium.setSelected(false);
            macwin.setSelected(false);
            luna.setSelected(false);
            acryl.setSelected(false);
            fast.setSelected(false);
            graphite.setSelected(false);
            smart.setSelected(false);

            choice = "07";

            Image img = new javax.swing.ImageIcon(dir + "/images/Mint.png").getImage();
            img = img.getScaledInstance(jPanelPreview.getWidth(), jPanelPreview.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon scaledImageIcon = new ImageIcon(img);
            jPanelPreview.setIcon(scaledImageIcon);
        }
    }//GEN-LAST:event_mintMouseClicked

    private void fastMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fastMouseClicked
        // TODO add your handling code here:
        if (fast.isSelected()) {

            texture.setSelected(false);
            aero.setSelected(false);
            aluminium.setSelected(false);
            macwin.setSelected(false);
            luna.setSelected(false);
            acryl.setSelected(false);
            mint.setSelected(false);
            graphite.setSelected(false);
            smart.setSelected(false);

            choice = "08";

            Image img = new javax.swing.ImageIcon(dir + "/images/Fast.png").getImage();
            img = img.getScaledInstance(jPanelPreview.getWidth(), jPanelPreview.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon scaledImageIcon = new ImageIcon(img);
            jPanelPreview.setIcon(scaledImageIcon);
        }
    }//GEN-LAST:event_fastMouseClicked

    private void graphiteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_graphiteMouseClicked
        // TODO add your handling code here:
        if (graphite.isSelected()) {

            texture.setSelected(false);
            aero.setSelected(false);
            aluminium.setSelected(false);
            macwin.setSelected(false);
            luna.setSelected(false);
            acryl.setSelected(false);
            fast.setSelected(false);
            mint.setSelected(false);
            smart.setSelected(false);

            choice = "09";

            Image img = new javax.swing.ImageIcon(dir + "/images/Graphite.png").getImage();
            img = img.getScaledInstance(jPanelPreview.getWidth(), jPanelPreview.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon scaledImageIcon = new ImageIcon(img);
            jPanelPreview.setIcon(scaledImageIcon);
        }
    }//GEN-LAST:event_graphiteMouseClicked

    private void smartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_smartMouseClicked
        // TODO add your handling code here:
        if (smart.isSelected()) {

            texture.setSelected(false);
            aero.setSelected(false);
            aluminium.setSelected(false);
            macwin.setSelected(false);
            luna.setSelected(false);
            acryl.setSelected(false);
            fast.setSelected(false);
            mint.setSelected(false);
            graphite.setSelected(false);

            choice = "10";

            Image img = new javax.swing.ImageIcon(dir + "/images/Smart.png").getImage();
            img = img.getScaledInstance(jPanelPreview.getWidth(), jPanelPreview.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon scaledImageIcon = new ImageIcon(img);
            jPanelPreview.setIcon(scaledImageIcon);
        }
    }//GEN-LAST:event_smartMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CPButtonBack;
    private javax.swing.JButton CPButtonChange;
    private javax.swing.JPasswordField CPTxtConfirmPassword;
    private javax.swing.JPasswordField CPTxtNewPassword;
    private javax.swing.JPasswordField CPTxtPassword;
    private javax.swing.JButton DUButtonBack;
    private javax.swing.JButton DUButtonDelete;
    private javax.swing.JLabel LogoPanelView;
    private javax.swing.JButton NUButtonBack;
    private javax.swing.JButton NUButtonCreateUser;
    private javax.swing.JButton UESButtonBack;
    private javax.swing.JButton UESButtonChange;
    private javax.swing.JTextField UESTxtEmailID;
    private javax.swing.JPasswordField UESTxtEmailPassword;
    private javax.swing.JButton URSButtonBack;
    private javax.swing.JButton URSButtonChange;
    private javax.swing.JCheckBox URSCheckAccVouchers;
    private javax.swing.JCheckBox URSCheckGroupLedger;
    private javax.swing.JCheckBox URSCheckProduction;
    private javax.swing.JCheckBox URSCheckReport;
    private javax.swing.JRadioButton URSOptAdmin;
    private javax.swing.JRadioButton URSOptNormalUser;
    private javax.swing.JCheckBox acryl;
    private javax.swing.JCheckBox aero;
    private javax.swing.JCheckBox aluminium;
    private javax.swing.JPanel applicationSettingsPanel;
    private javax.swing.JButton btnAll;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCompanyCreate;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnNone;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btncompanyClear;
    private javax.swing.JButton buttonApply;
    private javax.swing.JButton buttonExit;
    private javax.swing.JPanel changePasswordPanel;
    private javax.swing.JCheckBox checkAccVouchers;
    private javax.swing.JCheckBox checkGroupLedger;
    private javax.swing.JCheckBox checkProduction;
    private javax.swing.JCheckBox checkReport;
    private javax.swing.JComboBox comboChangeEMailSetting;
    private javax.swing.JComboBox comboChangePassword;
    private javax.swing.JComboBox comboUserRightSettings;
    private javax.swing.JPanel createUserPanel;
    private javax.swing.JPanel deleteUserPanel;
    private javax.swing.JPanel emailSettingsPanel;
    private javax.swing.JCheckBox fast;
    private javax.swing.JCheckBox graphite;
    private javax.swing.JButton jButtonApply;
    private javax.swing.JButton jButtonEMailOK2;
    private javax.swing.JButton jButtonEnableDisableOK;
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonParticularOK;
    private javax.swing.JButton jButtonUpdateLogo;
    private javax.swing.JCheckBox jCheckBoxAmount;
    private javax.swing.JCheckBox jCheckBoxDisableEMail;
    private javax.swing.JCheckBox jCheckBoxDisableSMSSend;
    private javax.swing.JCheckBox jCheckBoxEnableEMail;
    private javax.swing.JCheckBox jCheckBoxEnableSMSSend;
    private javax.swing.JCheckBox jCheckBoxEnableSMSSendWithAsk;
    private javax.swing.JCheckBox jCheckBoxQuantity;
    private javax.swing.JCheckBox jCheckBoxStockItemName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel jPanelPreview;
    private javax.swing.JPasswordField jPasswordFieldPassword;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable4;
    private javax.swing.JTextField jTextFieldPaginationValue;
    private javax.swing.JTextField jTextFieldSender;
    private javax.swing.JCheckBox luna;
    private javax.swing.JCheckBox macwin;
    private javax.swing.JCheckBox mint;
    private javax.swing.JRadioButton optA4;
    private javax.swing.JRadioButton optA5;
    private javax.swing.JRadioButton optAdmin;
    private javax.swing.JRadioButton optAsk;
    private javax.swing.JRadioButton optExcel;
    private javax.swing.JRadioButton optHtml;
    private javax.swing.JRadioButton optNo;
    private javax.swing.JRadioButton optNormalUser;
    private javax.swing.JRadioButton optPdf;
    private javax.swing.JRadioButton optWord;
    private javax.swing.JRadioButton optYes;
    private javax.swing.JCheckBox smart;
    private javax.swing.JCheckBox texture;
    private javax.swing.JTextArea txtCompanyAddress;
    private javax.swing.JTextField txtCompanyAlias;
    private javax.swing.JTextField txtCompanyCSTNo;
    private javax.swing.JTextField txtCompanyContact;
    private javax.swing.JTextArea txtCompanyDeclaration;
    private javax.swing.JTextField txtCompanyITN;
    private javax.swing.JTextField txtCompanyMail;
    private javax.swing.JTextField txtCompanyName;
    private javax.swing.JTextField txtCompanySTN;
    private javax.swing.JTextField txtCompanySignature;
    private javax.swing.JTextArea txtCompanyTagLine;
    private javax.swing.JTextArea txtCompanyTermsConditions;
    private javax.swing.JPasswordField txtConfirmPass;
    private javax.swing.JTextField txtEmailId;
    private javax.swing.JPasswordField txtEmailpass;
    private javax.swing.JTextField txtNameOfGod;
    private javax.swing.JPasswordField txtPass;
    private javax.swing.JTextField txtUname;
    private javax.swing.JPanel userRightSettingsPanel;
    // End of variables declaration//GEN-END:variables

    private void set_Value_CheckBox() {
        map_checkBoxValue.clear();
        map_checkBoxValue = gen.other.AdSuMuDiSettingsOLD.AdSuMuDiSettingsDAO.getting_CheckBoxValue();
//        if (map_checkBoxValue.get(gen.other.AdSuMuDiSettings.AdSuMuDiConstant.RECEIPT_SETTINGS) == 1) {
//            checkBoxReceiptnoEditable.setSelected(true);
//        } else {
//            checkBoxReceiptnoUNEditable.setSelected(true);
//        }
//        if (map_checkBoxValue.get(gen.other.AdSuMuDiSettings.AdSuMuDiConstant.VOUCHER_NUMBER_SETTING) == 1) {
//            checkBoxAutoInrementVoucherNumber.setSelected(true);
//        } else {
//            checkBoxUserSpecifiedVoucherNumber.setSelected(true);
//        }
        jTextFieldPaginationValue.setText(map_checkBoxValue.get(gen.other.AdSuMuDiSettingsOLD.AdSuMuDiConstant.PAGINATION));

    }
    private boolean hide_flag = false;

    private void setModel1(DefaultComboBoxModel mdl, String str) {
        comboChangePassword.setModel(mdl);
        comboChangePassword.setSelectedIndex(0);
        tfChangePassword.setText(str);
    }

    private void setModel2(DefaultComboBoxModel mdl, String str) {
        comboChangeEMailSetting.setModel(mdl);
        comboChangeEMailSetting.setSelectedIndex(0);
        tfChangeEMailSettings.setText(str);
    }

    private void setModel3(DefaultComboBoxModel mdl, String str) {
        comboUserRightSettings.setModel(mdl);
        comboUserRightSettings.setSelectedIndex(0);
        tfChangeUserRightSettings.setText(str);
    }

    private static DefaultComboBoxModel getSuggestedModel1(java.util.List<String> list, String text) {
        DefaultComboBoxModel m = new DefaultComboBoxModel();
        for (String s : list) {
            //if(s.startsWith(text)) m.addElement(s);
            if (s.toLowerCase().matches("(.*)" + text.toLowerCase() + "(.*)")) {
                m.addElement(s);
                System.out.println("Yes" + s);
            }
        }
        return m;
    }

    private static DefaultComboBoxModel getSuggestedModel2(java.util.List<String> list, String text) {
        DefaultComboBoxModel m = new DefaultComboBoxModel();
        for (String s : list) {
            //if(s.startsWith(text)) m.addElement(s);
            if (s.toLowerCase().matches("(.*)" + text.toLowerCase() + "(.*)")) {
                m.addElement(s);
                System.out.println("Yes" + s);
            }
        }
        return m;
    }

    private static DefaultComboBoxModel getSuggestedModel3(java.util.List<String> list, String text) {
        DefaultComboBoxModel m = new DefaultComboBoxModel();
        for (String s : list) {
            //if(s.startsWith(text)) m.addElement(s);
            if (s.toLowerCase().matches("(.*)" + text.toLowerCase() + "(.*)")) {
                m.addElement(s);
                System.out.println("Yes" + s);
            }
        }
        return m;
    }

    public static void printSettingsInitilise() {
        ResultSet rs2;
        Connection conn = null;
        try {
            conn = DatabaseConnection1.GetConnection();
            Statement st = conn.createStatement();
            rs2 = st.executeQuery("select * from  tblOtherSetting");
            if (rs2.next()) {

                PrinterSettings.flagDirectPrint = rs2.getInt("printpreview");
                PrinterSettings.flagPrintPageFormat = rs2.getInt("printDisplayFormat");
                PrinterSettings.flagPrintPageSize = rs2.getInt("printPageFormat");
                System.out.println("PrinterSettings---------------->>printSettingsInitilise------->>printer variables: Direct print:" + PrinterSettings.flagDirectPrint + " Page Format:" + PrinterSettings.flagPrintPageFormat + " Page Size:" + PrinterSettings.flagPrintPageSize);
            }
        } catch (Exception e) {
            System.out.println("PrinterSettings----------------->>formInternalFrameClosed :---->>Exception :" + e);
        } finally {
            try {
                conn.close();


            } catch (SQLException ex) {
                Logger.getLogger(AllAdSuMuDiSettingsOLD.class
                        .getName()).log(Level.SEVERE, null, ex);
            }


        }
    }

    public final class imageloading extends javax.swing.JInternalFrame {

        BufferedImage mImage;
        Image scaledImage = null;
        ImageIcon scaledImageIcon = null;
        String name, name1;

        public imageloading() {
            //JFrame frm=new JFrame("image loading test");
            source = filechoose();
            System.out.println("ViewEditCompany----->>imageloading -->>source: " + source);
            File inputFile = new File(source);
            try {
                mImage = ImageIO.read(inputFile);
            } catch (IOException ex) {
                //Logger.getLogger(index.class.getName()).log(Level.SEVERE, null, ex);
            }

            scaledImage = mImage.getScaledInstance(LogoPanelView.getWidth(), LogoPanelView.getHeight(), Image.SCALE_SMOOTH);
            scaledImageIcon = new ImageIcon(scaledImage);
            FileInputStream fin = null;
            try {

                final String dir = System.getProperty("user.dir");

                Connection conn = DatabaseConnection1.GetConnection();
                Statement st = conn.createStatement();



                File f1 = new File(source);//new File(dir + "/images/unnati_hinges_packing1_1.jpg");

                fin = new FileInputStream(f1);

                b1 = new byte[(int) f1.length()];
                fin.read(b1);
                fin.close();

                //  int ret = st.executeUpdate("insert into registration(image) values('"+b1+"')");
                // System.out.println("ViewEditCompany----->>imageloading -->>return: "+ ret);
            } catch (Exception e) {
                System.out.println("Exception for---->>Image--->" + e);
            }
//    int x=Integer.parseInt(""+LogoPanelView.getAlignmentX());
//    int y=Integer.parseInt(""+LogoPanelView.getAlignmentY());
//    
//    int h=mImage.getTileHeight();
//    int w=mImage.getTileWidth();

            //LogoPanelView.setBorder(new TempClassForImage(scaledImage,LogoPanelView.getSize()));
            LogoPanelView.setIcon(scaledImageIcon);
            // LogoPanelView.setBounds(x, y, w, h);
            LogoPanelView.show();


        }

        String filechoose() {
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new File("."));

            chooser.setFileFilter(new javax.swing.filechooser.FileFilter() {
                public boolean accept(File f) {
                    name = f.getName().toLowerCase();
                    return name.endsWith(".gif") || name.endsWith(".jpg")
                            || name.endsWith(".jpeg") || f.isDirectory();
                }

                public String getDescription() {
                    return "Image files";
                }
            });

            int r = chooser.showOpenDialog(this);



            if (r == JFileChooser.APPROVE_OPTION) {
                name1 = chooser.getSelectedFile().getAbsolutePath();
                StringBuffer sb = new StringBuffer();
                sb.append(name1);

                int l = sb.length();
                for (int i = 0; i < l; i++) {
                    if (sb.charAt(i) == '\\') {
                        sb.insert(i, "\\");
                        i++;
                    }
                }
            }

            return name1;
        }
    }
}
