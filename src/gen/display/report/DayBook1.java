/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gen.display.report;

import gen.accountvoucher.payment.PaymentDTO;
import gen.accountvoucher.payment.PaymentForm;
import gen.accountvoucher.purchase.PurchaseDTO;
import gen.accountvoucher.purchase.PurchaseForm;
import gen.accountvoucher.receipt.ReceiptDTO;
import gen.accountvoucher.receipt.ReceiptForm;
import gen.accountvoucher.sale.SaleDTO;
import gen.accountvoucher.sale.SaleForm;
import gen.database.connection.DatabaseConnection1;
import gen.database.connection.DayBookHelper;
import gen.database.connection.LedgerReportHelper;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import gen.dto.Constants;
import gen.mainclass.MainClass;
import groovy.model.DefaultTableColumn;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.MouseMotionListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.Calendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import javax.swing.tree.DefaultTreeCellEditor;
import ledgerreport.DayBookDTO;

/**
 *
 * @author pc5
 */
public class DayBook1 extends javax.swing.JInternalFrame {

    /**
     * Creates new form DayBook1
     */
    DecimalFormat df = new DecimalFormat("#.##");
    private final JTextField tfDatePickerfromDate;
    private final JTextField tfDatePickertoDate;
    DefaultTableModel dayBookCreditTableModel;
    DefaultTableModel dayBookDebitTableModel;
    int k = 0;
    JTextField text = new JTextField();
    Double totalSale, totalPurchase, totalReceipt, totalPayment, openigBal, totalDebit, totalCredit, closingBal;

    public DayBook1(String s) {
        initComponents();
        setClosable(true);
        initComponents();
        fromDate.setDateFormatString("dd-MM-yyyy");
        toDate.setDateFormatString("dd-MM-yyyy");
        this.setTitle(s);
        tfDatePickerfromDate = (JTextField) fromDate.getComponent(1);
        tfDatePickertoDate = (JTextField) toDate.getComponent(1);
        initilize();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        fromDate = new com.toedter.calendar.JDateChooser();
        toDate = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        btnShow = new javax.swing.JButton();
        btnPrint = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        labOpeningBal = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableDayBookCredit = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableDayBookDebit = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        labTotalCredit = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        labTotalDebit = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        labClosingBal = new javax.swing.JLabel();

        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Kasturi-logo-1.png"))); // NOI18N
        setPreferredSize(new java.awt.Dimension(1558, 797));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        fromDate.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N

        toDate.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(DayBook1.class, "DayBook1.jLabel1.text")); // NOI18N

        btnShow.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnShow, org.openide.util.NbBundle.getMessage(DayBook1.class, "DayBook1.btnShow.text")); // NOI18N
        btnShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowActionPerformed(evt);
            }
        });

        btnPrint.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnPrint, org.openide.util.NbBundle.getMessage(DayBook1.class, "DayBook1.btnPrint.text")); // NOI18N
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(DayBook1.class, "DayBook1.jLabel4.text")); // NOI18N

        labOpeningBal.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(labOpeningBal, org.openide.util.NbBundle.getMessage(DayBook1.class, "DayBook1.labOpeningBal.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(284, 284, 284)
                        .addComponent(fromDate, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(toDate, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(btnShow)
                        .addGap(26, 26, 26)
                        .addComponent(btnPrint))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(labOpeningBal, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(44, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnShow)
                        .addComponent(btnPrint))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(toDate, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
                        .addComponent(fromDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(labOpeningBal))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tableDayBookCredit.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        tableDayBookCredit.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "VCH No", "Particulars", "Amount", "transID", "Title 5", "Title 6"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.Double.class, java.lang.Long.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableDayBookCredit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableDayBookCreditMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableDayBookCredit);
        tableDayBookCredit.getColumnModel().getColumn(0).setResizable(false);
        tableDayBookCredit.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(DayBook1.class, "DayBook1.tableDayBookCredit.columnModel.title0")); // NOI18N
        tableDayBookCredit.getColumnModel().getColumn(1).setResizable(false);
        tableDayBookCredit.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(DayBook1.class, "DayBook1.tableDayBookCredit.columnModel.title1")); // NOI18N
        tableDayBookCredit.getColumnModel().getColumn(2).setResizable(false);
        tableDayBookCredit.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(DayBook1.class, "DayBook1.tableDayBookCredit.columnModel.title2")); // NOI18N
        tableDayBookCredit.getColumnModel().getColumn(3).setResizable(false);
        tableDayBookCredit.getColumnModel().getColumn(3).setHeaderValue(org.openide.util.NbBundle.getMessage(DayBook1.class, "DayBook1.tableDayBookCredit.columnModel.title3")); // NOI18N
        tableDayBookCredit.getColumnModel().getColumn(4).setHeaderValue(org.openide.util.NbBundle.getMessage(DayBook1.class, "DayBook1.tableDayBookCredit.columnModel.title4")); // NOI18N
        tableDayBookCredit.getColumnModel().getColumn(5).setHeaderValue(org.openide.util.NbBundle.getMessage(DayBook1.class, "DayBook1.tableDayBookCredit.columnModel.title5")); // NOI18N

        tableDayBookDebit.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        tableDayBookDebit.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "VCH No", "Particulars", "Amount", "transID", "Title 5", "Title 6"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.Double.class, java.lang.Long.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableDayBookDebit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableDayBookDebitMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableDayBookDebit);
        tableDayBookDebit.getColumnModel().getColumn(0).setResizable(false);
        tableDayBookDebit.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(DayBook1.class, "DayBook1.tableDayBookDebit.columnModel.title0")); // NOI18N
        tableDayBookDebit.getColumnModel().getColumn(1).setResizable(false);
        tableDayBookDebit.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(DayBook1.class, "DayBook1.tableDayBookDebit.columnModel.title1")); // NOI18N
        tableDayBookDebit.getColumnModel().getColumn(2).setResizable(false);
        tableDayBookDebit.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(DayBook1.class, "DayBook1.tableDayBookDebit.columnModel.title2")); // NOI18N
        tableDayBookDebit.getColumnModel().getColumn(3).setResizable(false);
        tableDayBookDebit.getColumnModel().getColumn(3).setHeaderValue(org.openide.util.NbBundle.getMessage(DayBook1.class, "DayBook1.tableDayBookDebit.columnModel.title3")); // NOI18N
        tableDayBookDebit.getColumnModel().getColumn(4).setHeaderValue(org.openide.util.NbBundle.getMessage(DayBook1.class, "DayBook1.tableDayBookDebit.columnModel.title4")); // NOI18N
        tableDayBookDebit.getColumnModel().getColumn(5).setHeaderValue(org.openide.util.NbBundle.getMessage(DayBook1.class, "DayBook1.tableDayBookDebit.columnModel.title5")); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(DayBook1.class, "DayBook1.jLabel2.text")); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(DayBook1.class, "DayBook1.jLabel3.text")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(220, 220, 220)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(226, 226, 226))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jLabel5.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(DayBook1.class, "DayBook1.jLabel5.text")); // NOI18N

        labTotalCredit.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(labTotalCredit, org.openide.util.NbBundle.getMessage(DayBook1.class, "DayBook1.labTotalCredit.text")); // NOI18N

        jLabel6.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(DayBook1.class, "DayBook1.jLabel6.text")); // NOI18N

        labTotalDebit.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(labTotalDebit, org.openide.util.NbBundle.getMessage(DayBook1.class, "DayBook1.labTotalDebit.text")); // NOI18N

        jLabel7.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(DayBook1.class, "DayBook1.jLabel7.text")); // NOI18N

        labClosingBal.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(labClosingBal, org.openide.util.NbBundle.getMessage(DayBook1.class, "DayBook1.labClosingBal.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(241, 241, 241)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(399, 399, 399)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labClosingBal, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labTotalCredit, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(174, 174, 174)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labTotalDebit, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(346, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(labTotalCredit)
                    .addComponent(jLabel6)
                    .addComponent(labTotalDebit))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(labClosingBal))
                .addContainerGap(102, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            bindToGUI();
        } catch (SQLException ex) {
            Logger.getLogger(DayBook1.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnShowActionPerformed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnPrintActionPerformed

    private void tableDayBookCreditMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableDayBookCreditMouseClicked
        // TODO add your handling code here:
        int row = tableDayBookCredit.getSelectedRow();
        if (tableDayBookCredit.getValueAt(row, 1) != null && tableDayBookCredit.getValueAt(row, 2) != null) {
            Connection conn;
            try {
                conn = DatabaseConnection1.GetConnection();
                Statement st = conn.createStatement();
                ResultSet rs = st.executeQuery("select trans_typeIndex from tbltransactionmain where trans_id=" + Long.parseLong(tableDayBookCredit.getValueAt(row, 3).toString()) + "");
                if (rs.next()) {
                    if (rs.getInt("trans_typeIndex") == 2) //if purchase
                    {
                        String id = tableDayBookCredit.getValueAt(tableDayBookCredit.getSelectedRow(), 3).toString();
                        PurchaseDTO purchaseDTO = new PurchaseDTO();
                        PurchaseForm p = new PurchaseForm(purchaseDTO, true);
                        p.loadEditForm(id);
                        p.pack();
                        p.setVisible(true);
                        this.getParent().add(p);
                        this.getParent().setVisible(true);
                        Dimension desktopSize = this.getParent().getSize();
                        p.setSize(desktopSize);
                        p.setPreferredSize(desktopSize);
                        try {
                            p.setSelected(true);
                        } catch (java.beans.PropertyVetoException e) {
                            e.printStackTrace();
                        }
                        BasicInternalFrameUI ui = (BasicInternalFrameUI) p.getUI();

                        Component north = ui.getNorthPane();
                        MouseMotionListener[] actions =
                                (MouseMotionListener[]) north.getListeners(MouseMotionListener.class);

                        for (int i = 0; i < actions.length; i++) {
                            north.removeMouseMotionListener(actions[i]);
                        }
                    } else if (rs.getInt("trans_typeIndex") == 6) //if receipt
                    {
                        String id = tableDayBookCredit.getValueAt(tableDayBookCredit.getSelectedRow(), 3).toString();
                        ReceiptDTO receiptDTO = new ReceiptDTO();
                        ReceiptForm r = new ReceiptForm(receiptDTO, true);
                        r.loadEditForm(id);
                        r.pack();
                        r.setVisible(true);
                        this.getParent().add(r);
                        this.getParent().setVisible(true);
                        Dimension desktopSize = this.getParent().getSize();
                        r.setSize(desktopSize);
                        r.setPreferredSize(desktopSize);
                        try {
                            r.setSelected(true);
                        } catch (java.beans.PropertyVetoException e) {
                            e.printStackTrace();
                        }
                        BasicInternalFrameUI ui = (BasicInternalFrameUI) r.getUI();

                        Component north = ui.getNorthPane();
                        MouseMotionListener[] actions =
                                (MouseMotionListener[]) north.getListeners(MouseMotionListener.class);

                        for (int i = 0; i < actions.length; i++) {
                            north.removeMouseMotionListener(actions[i]);
                        }
                    }
                }
            } catch (Exception ex) {
                Logger.getLogger(DayBook1.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_tableDayBookCreditMouseClicked

    private void tableDayBookDebitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableDayBookDebitMouseClicked
        // TODO add your handling code here:
        int row = tableDayBookDebit.getSelectedRow();
        if (tableDayBookDebit.getValueAt(row, 1) != null && tableDayBookDebit.getValueAt(row, 3) != null) {
            Connection conn = null;
            try {
                conn = DatabaseConnection1.GetConnection();
                Statement st = conn.createStatement();
                ResultSet rs = st.executeQuery("select trans_typeIndex from tbltransactionmain where trans_id=" + Long.parseLong(tableDayBookDebit.getValueAt(row, 3).toString()) + "");
                if (rs.next()) {
                    if (rs.getInt("trans_typeIndex") == 1) //if sales
                    {
                        String id = tableDayBookDebit.getValueAt(tableDayBookDebit.getSelectedRow(), 3).toString();
                        SaleDTO saleDTO = new SaleDTO();
                        SaleForm s = new SaleForm("Sales", new Dimension(), saleDTO, true);
                        s.loadEditForm(id);
                        s.pack();
                        s.setVisible(true);
                        this.getParent().add(s);
                        this.getParent().setVisible(true);
                        Dimension desktopSize = this.getParent().getSize();
                        s.setSize(desktopSize);
                        s.setPreferredSize(desktopSize);
                        try {
                            s.setSelected(true);
                        } catch (java.beans.PropertyVetoException e) {
                        }
                        BasicInternalFrameUI uiBasicComponent = (BasicInternalFrameUI) s.getUI();

                        Component north = uiBasicComponent.getNorthPane();
                        MouseMotionListener[] actions =
                                (MouseMotionListener[]) north.getListeners(MouseMotionListener.class);

                        for (int i = 0; i < actions.length; i++) {
                            north.removeMouseMotionListener(actions[i]);
                        }
                    } else if (rs.getInt("trans_typeIndex") == 3) //if payment
                    {
                        String id = tableDayBookDebit.getValueAt(tableDayBookDebit.getSelectedRow(), 3).toString();
                        PaymentDTO paymentDTO = new PaymentDTO();
                        PaymentForm p = new PaymentForm(paymentDTO, true);
                        p.loadEditForm(id);
                        p.pack();
                        p.setVisible(true);
                        this.getParent().add(p);
                        this.getParent().setVisible(true);
                        Dimension desktopSize = this.getParent().getSize();
                        p.setSize(desktopSize);
                        p.setPreferredSize(desktopSize);
                        try {
                            p.setSelected(true);
                        } catch (java.beans.PropertyVetoException e) {
                            e.printStackTrace();
                        }
                        BasicInternalFrameUI ui = (BasicInternalFrameUI) p.getUI();

                        Component north = ui.getNorthPane();
                        MouseMotionListener[] actions =
                                (MouseMotionListener[]) north.getListeners(MouseMotionListener.class);

                        for (int i = 0; i < actions.length; i++) {
                            north.removeMouseMotionListener(actions[i]);
                        }
                    }
                }
            } catch (Exception ex) {
                Logger.getLogger(DayBook1.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_tableDayBookDebitMouseClicked

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        // TODO add your handling code here:
        MainClass.setstaticvar();
    }//GEN-LAST:event_formInternalFrameClosed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnShow;
    private com.toedter.calendar.JDateChooser fromDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labClosingBal;
    private javax.swing.JLabel labOpeningBal;
    private javax.swing.JLabel labTotalCredit;
    private javax.swing.JLabel labTotalDebit;
    private javax.swing.JTable tableDayBookCredit;
    private javax.swing.JTable tableDayBookDebit;
    private com.toedter.calendar.JDateChooser toDate;
    // End of variables declaration//GEN-END:variables

    private void initilize() {

        initilizetfDatePickerfromDate();
        initilizetfDatePickertoDate();
        initJTable();

    }

    private void initilizetfDatePickerfromDate() {
        tfDatePickerfromDate.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                int code = e.getKeyCode();
                System.out.println("code:" + e.getKeyCode());

                if (code == KeyEvent.VK_ENTER) {
                    //txtAccount.requestFocus();
                    System.out.println("DAte From DatePIcker" + (fromDate.getDate() == null));

                    if (fromDate.getDate() == null) {
                        JOptionPane.showMessageDialog(rootPane, "Please Select Valid Date");
                        tfDatePickerfromDate.requestFocus();
                    } else {
                        tfDatePickertoDate.requestFocus();
                    }

                }

            }
        });
        tfDatePickerfromDate.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                // throw new UnsupportedOperationException("Not supported yet.");
                tfDatePickerfromDate.selectAll();
            }

            @Override
            public void focusLost(FocusEvent e) {
                // throw new UnsupportedOperationException("Not supported yet.");
            }
        });
    }

    private void initilizetfDatePickertoDate() {
        tfDatePickertoDate.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                System.out.println("code:" + e.getKeyCode());
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    btnShow.requestFocus();
                    btnShowActionPerformed(null);
                }
                if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
                    tfDatePickerfromDate.requestFocus();
                }

            }
        });
        tfDatePickertoDate.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                // throw new UnsupportedOperationException("Not supported yet.");
                tfDatePickertoDate.selectAll();
            }

            @Override
            public void focusLost(FocusEvent e) {
                // throw new UnsupportedOperationException("Not supported yet.");
            }
        });
    }

    private void initJTable() {
        dayBookCreditTableModel = (DefaultTableModel) tableDayBookCredit.getModel();
        dayBookCreditTableModel.setRowCount(0);
        dayBookCreditTableModel.setColumnCount(4);

        dayBookDebitTableModel = (DefaultTableModel) tableDayBookDebit.getModel();
        dayBookDebitTableModel.setRowCount(0);
        dayBookDebitTableModel.setColumnCount(4);

        Calendar currentDate = Calendar.getInstance();
        fromDate.setDate(currentDate.getTime());
        toDate.setDate(currentDate.getTime());

        tableDayBookCredit.setCellSelectionEnabled(true);
        tableDayBookDebit.setCellSelectionEnabled(true);
    }

    private void bindToGUI() throws SQLException {
        //get sale List
        initilizeVariables();
        openigBal = getOpeningBalance();
        totalCredit = loadCreaditTransacations();
        totalDebit = loadDebitTrancastions();
        bindValuesToGUI();
    }

    private Double getOpeningBalance() throws SQLException {
        Set<String> ledgerSet = new HashSet<String>();
        ledgerSet.add("Cash");
        Map<String, Double> ledgerReportMap = LedgerReportHelper.getLedgerOpeningBal(null, fromDate.getDate(), ledgerSet);
        System.out.println("--->>ledgerReportMap.keySet() : " + ledgerReportMap.keySet().size());
        for (String ledgerNames : ledgerReportMap.keySet()) {
            System.out.println("DayBook1 : ledgerNames  : ----------------->>" + ledgerNames + " vales : " + ledgerReportMap.get(ledgerNames));

            if (ledgerNames.trim().equalsIgnoreCase("cash")) {
                System.out.println("Got cash----------------->>");
                return ledgerReportMap.get("cash");
            }

        }
        return ledgerReportMap.get("cash");
    }

    private Double loadCreaditTransacations() throws SQLException {
        Double valueToReturn = 0D;
        dayBookCreditTableModel.setRowCount(0);
        valueToReturn = valueToReturn + loadPurchaseTransaction();
        if (valueToReturn != null && valueToReturn > 0) {
            dayBookCreditTableModel.setRowCount(dayBookCreditTableModel.getRowCount() + 1);
            dayBookCreditTableModel.setValueAt(valueToReturn + "", dayBookCreditTableModel.getRowCount() - 1, 1);
        }

        dayBookCreditTableModel.setRowCount(dayBookCreditTableModel.getRowCount() + 1);
        valueToReturn = valueToReturn + loadReceiptTransaction();
        if (valueToReturn != null && valueToReturn > 0) {
            dayBookCreditTableModel.setRowCount(dayBookCreditTableModel.getRowCount() + 1);
            dayBookCreditTableModel.setValueAt(valueToReturn + "", dayBookCreditTableModel.getRowCount() - 1, 1);
        }
        return valueToReturn;
    }

    private Double loadDebitTrancastions() throws SQLException {
        Double valueToReturn = 0D;
        dayBookDebitTableModel.setRowCount(0);
        valueToReturn = valueToReturn + loadSaleTransaction();
        dayBookDebitTableModel.setRowCount(dayBookDebitTableModel.getRowCount() + 1);
        valueToReturn = valueToReturn + loadPaymentTransaction();
        return valueToReturn;
    }

    private Double loadSaleTransaction() throws SQLException {
        Double valueToReturn = 0D;
        List<DayBookDTO> dayBookDTOList = DayBookHelper.getDaybookLedgerList(fromDate.getDate(), toDate.getDate(), Constants.SALE_TYPE_INDEX, Constants.DEBIT, null, null);
        if (dayBookDTOList != null && dayBookDTOList.size() > 0) {
            dayBookDebitTableModel.setRowCount(dayBookDebitTableModel.getRowCount() + 1);
            dayBookDebitTableModel.setValueAt("Sale", dayBookDebitTableModel.getRowCount() - 1, 1);
//            tableDayBookDebit.setSelectionBackground(Color.GRAY);
//            tableDayBookDebit.setRowSelectionInterval(0, 0);
            tableDayBookDebit.getColumnModel().getColumn(1).setCellRenderer(new CustomRenderer(1, 0));

            for (DayBookDTO dayBook : dayBookDTOList) {
                dayBookDebitTableModel.setRowCount(dayBookDebitTableModel.getRowCount() + 1);
                dayBookDebitTableModel.setValueAt(dayBook.getReceiptNo(), dayBookDebitTableModel.getRowCount() - 1, 0);
                dayBookDebitTableModel.setValueAt(dayBook.getLedgerName(), dayBookDebitTableModel.getRowCount() - 1, 1);
                dayBookDebitTableModel.setValueAt((dayBook.getAmount()), dayBookDebitTableModel.getRowCount() - 1, 2);
                dayBookDebitTableModel.setValueAt(dayBook.getTransID(), dayBookDebitTableModel.getRowCount() - 1, 3);
                valueToReturn = valueToReturn + dayBook.getAmount();
            }
        }
        return valueToReturn;
    }

    private Double loadPurchaseTransaction() throws SQLException {
        Double valueToReturn = 0D;
        List<DayBookDTO> dayBookDTOList = DayBookHelper.getDaybookLedgerList(fromDate.getDate(), toDate.getDate(), Constants.PURCHASE_TYPE_INDEX, Constants.CREDIT, null, null);
        if (dayBookDTOList != null && dayBookDTOList.size() > 0) {
            dayBookCreditTableModel.setRowCount(dayBookCreditTableModel.getRowCount() + 1);
            dayBookCreditTableModel.setValueAt("Purchase", dayBookCreditTableModel.getRowCount() - 1, 1);
//            tableDayBookCredit.setSelectionBackground(Color.GRAY);
//            tableDayBookCredit.setRowSelectionInterval(0, 0);
            tableDayBookCredit.getColumnModel().getColumn(1).setCellRenderer(new CustomRenderer(1, 0));
            for (DayBookDTO dayBook : dayBookDTOList) {
                dayBookCreditTableModel.setRowCount(dayBookCreditTableModel.getRowCount() + 1);
                dayBookCreditTableModel.setValueAt(dayBook.getReceiptNo(), dayBookCreditTableModel.getRowCount() - 1, 0);
                dayBookCreditTableModel.setValueAt(dayBook.getLedgerName(), dayBookCreditTableModel.getRowCount() - 1, 1);
                dayBookCreditTableModel.setValueAt((dayBook.getAmount()), dayBookCreditTableModel.getRowCount() - 1, 2);
                dayBookCreditTableModel.setValueAt(dayBook.getTransID(), dayBookCreditTableModel.getRowCount() - 1, 3);
                valueToReturn = valueToReturn + dayBook.getAmount();
            }
        }
        return valueToReturn;
    }

    private Double loadReceiptTransaction() throws SQLException {
        Double valueToReturn = 0D;
        List<DayBookDTO> dayBookDTOList = DayBookHelper.getDaybookLedgerList(fromDate.getDate(), toDate.getDate(), Constants.RECEIPT_TYPE_INDEX, Constants.CREDIT, null, null);
        if (dayBookDTOList != null && dayBookDTOList.size() > 0) {
            dayBookCreditTableModel.setRowCount(dayBookCreditTableModel.getRowCount() + 1);
            dayBookCreditTableModel.setValueAt("Receipt", dayBookCreditTableModel.getRowCount() - 1, 1);
            //  tableDayBookCredit.getColumnModel().getColumn(1).setCellRenderer(new CustomRenderer(1, dayBookCreditTableModel.getRowCount() - 1));
            for (DayBookDTO dayBook : dayBookDTOList) {
                dayBookCreditTableModel.setRowCount(dayBookCreditTableModel.getRowCount() + 1);
                dayBookCreditTableModel.setValueAt(dayBook.getReceiptNo(), dayBookCreditTableModel.getRowCount() - 1, 0);
                dayBookCreditTableModel.setValueAt(dayBook.getLedgerName(), dayBookCreditTableModel.getRowCount() - 1, 1);
                dayBookCreditTableModel.setValueAt((dayBook.getAmount()), dayBookCreditTableModel.getRowCount() - 1, 2);
                dayBookCreditTableModel.setValueAt(dayBook.getTransID(), dayBookCreditTableModel.getRowCount() - 1, 3);
                valueToReturn = valueToReturn + dayBook.getAmount();
            }
        }
        return valueToReturn;
    }

    private Double loadPaymentTransaction() throws SQLException {
        Double valueToReturn = 0D;
        List<DayBookDTO> dayBookDTOList = DayBookHelper.getDaybookLedgerList(fromDate.getDate(), toDate.getDate(), Constants.PAYMENT_TYPE_INDEX, Constants.DEBIT, null, null);
        if (dayBookDTOList != null && dayBookDTOList.size() > 0) {
            dayBookDebitTableModel.setRowCount(dayBookDebitTableModel.getRowCount() + 1);
            dayBookDebitTableModel.setValueAt("Payment", dayBookDebitTableModel.getRowCount() - 1, 1);
            //tableDayBookDebit.getColumnModel().getColumn(1).setCellRenderer(new CustomRenderer(1, dayBookCreditTableModel.getRowCount() - 1));
            for (DayBookDTO dayBook : dayBookDTOList) {
                dayBookDebitTableModel.setRowCount(dayBookDebitTableModel.getRowCount() + 1);
                dayBookDebitTableModel.setValueAt(dayBook.getReceiptNo(), dayBookDebitTableModel.getRowCount() - 1, 0);
                dayBookDebitTableModel.setValueAt(dayBook.getLedgerName(), dayBookDebitTableModel.getRowCount() - 1, 1);
                dayBookDebitTableModel.setValueAt((dayBook.getAmount()), dayBookDebitTableModel.getRowCount() - 1, 2);
                dayBookDebitTableModel.setValueAt(dayBook.getTransID(), dayBookDebitTableModel.getRowCount() - 1, 3);
                valueToReturn = valueToReturn + dayBook.getAmount();
            }
        }
        return valueToReturn;
    }

    private void initilizeVariables() {
        totalPayment = 0D;
        totalPurchase = 0D;
        totalReceipt = 0D;
        totalSale = 0D;
        openigBal = 0D;
        totalDebit = 0D;
        totalCredit = 0D;
        closingBal = 0D;
    }

    private void bindValuesToGUI() {
        System.out.println(openigBal + " : " + totalCredit + " : " + totalDebit);
        labOpeningBal.setText(openigBal + "");
        labTotalCredit.setText(openigBal + totalCredit + "");
        labTotalDebit.setText(totalDebit + "");
        labClosingBal.setText(closingBal + "");
    }

    class CustomRenderer extends DefaultTableCellRenderer {

        int col;
        int row;

        public CustomRenderer(int col, int row) {
            this.col = col;
            this.row = row;
        }

        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);



            setBackground((column == this.col && row == this.row)
                    ? Color.YELLOW : Color.WHITE);
            setForeground((column == this.col && row == this.row)
                    ? Color.red : Color.BLACK);



            return c;
        }
    }
}
